# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby27 < Parser::Base


  def version
    27
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-685,532,587,816,834,-108,-106,-685,-685,-685,213,214,276,-685,-685',
'628,-685,223,834,1030,-111,-105,-590,-109,-685,-685,630,492,757,-590',
'221,882,-110,-277,-107,932,-685,-685,587,-685,-685,-685,-685,-685,-106',
'-113,758,-112,587,834,-483,-111,118,-91,118,-112,492,117,224,117,-112',
'224,-107,-105,-113,-77,-685,-685,-685,-685,-685,-685,-685,-685,-685',
'-685,-685,-685,-685,-685,224,627,-685,-685,-685,-682,655,-590,-681,-113',
'-685,-107,629,-685,-107,1083,213,214,-685,275,-685,1031,-685,-685,224',
'-685,-685,-685,-685,-685,-580,-685,-685,-685,-99,-97,766,-580,-580,-580',
'118,587,-580,-580,-580,117,-580,-685,-682,-102,-685,-685,-100,-685,-580',
'-685,-580,-580,-580,-105,881,-101,-685,-98,-105,-109,-580,-580,-108',
'-580,-580,-580,-580,-580,-110,-109,118,587,587,911,817,117,-106,-113',
'-103,-112,118,-106,-113,-111,-112,117,-96,-104,-111,-276,-580,-580,-580',
'-580,-580,-580,-580,-580,-580,-580,-580,-580,-580,-580,118,594,-580',
'-580,-580,117,-580,-580,276,771,-580,1090,118,-580,-580,804,-580,117',
'-580,-107,-580,-694,-580,-580,-107,-580,-580,-580,-580,-580,118,-580',
'-302,-580,874,117,594,213,214,-302,-302,-302,-681,-694,-302,-302,-302',
'-580,-302,118,-580,-580,-580,-580,117,-580,-302,-580,-302,-302,-302',
'224,-580,213,214,-580,803,-101,-302,-302,650,-302,-302,-302,-302,-302',
'-108,799,1036,224,-99,-108,-110,-109,276,118,118,-110,-109,615,117,117',
'118,1091,931,275,1035,117,-302,-302,-302,-302,-302,-302,-302,-302,-302',
'-302,-302,-302,-302,-302,96,97,-302,-302,-302,-101,832,-302,96,97,-302',
'600,-694,-302,-302,852,-302,-110,-302,224,-302,-101,-302,-302,276,-302',
'-302,-302,-302,-302,-302,-302,650,-302,-99,649,271,-302,-302,-302,789',
'617,616,-302,-302,224,-302,-302,224,772,-302,-302,-302,-302,-302,-302',
'219,-302,1098,275,615,-101,-302,269,-101,-111,-302,-302,649,-302,-302',
'-302,-302,-302,-99,768,-101,-99,98,99,-100,-98,-99,219,767,461,98,99',
'271,-99,269,-110,545,829,-108,547,-302,-302,-302,-302,-302,-302,-302',
'-302,-302,-302,-302,-302,-302,-302,762,275,-302,-302,-302,-587,654,532',
'830,689,-302,220,-587,-302,617,616,760,-108,-302,615,-302,615,-302,-302',
'800,-302,-302,-302,-302,-302,615,-302,-685,-302,-113,-681,-100,-98,220',
'-685,-685,-685,-108,759,-685,-685,-685,-302,-685,545,-302,-302,547,-102',
'-103,-302,-685,-685,-685,-685,-685,-595,-302,906,874,-111,-112,-110',
'-685,-685,-587,-685,-685,-685,-685,-685,-100,-98,545,-100,-98,547,615',
'617,616,617,616,613,615,213,214,-100,-98,802,617,616,618,748,-685,-685',
'-685,-685,-685,-685,-685,-685,-685,-685,-685,-685,-685,-685,-594,816',
'-685,-685,-685,874,831,-685,-106,-595,-685,615,118,-685,-685,771,-685',
'117,-685,746,-685,615,-685,-685,615,-685,-685,-685,-685,-685,-302,-685',
'-685,-685,617,616,620,-302,-302,-302,617,616,631,-302,-302,600,-302',
'-685,-98,852,-685,-685,-685,-685,-302,-685,-97,-685,224,-105,-107,1120',
'-685,-594,744,-109,-302,-302,-106,-302,-302,-302,-302,-302,742,617,616',
'613,567,740,564,563,562,572,565,617,616,622,617,616,626,600,1098,575',
'740,601,-302,-302,-302,-302,-302,-302,-302,-302,-302,-302,-302,-302',
'-302,-302,-96,221,-302,-302,-302,570,654,1081,1082,737,-302,615,-105',
'-302,580,579,583,582,-302,733,-302,576,-302,-302,224,-302,-302,-302',
'-302,-302,-583,-302,862,-302,963,408,731,-583,-583,-583,410,409,-583',
'-583,-583,-586,-583,-302,-104,730,-302,-302,-586,-302,-583,-302,-583',
'-583,-583,840,-113,923,-302,-679,836,-111,-583,-583,837,-583,-583,-583',
'-583,-583,725,617,616,613,725,-303,-585,-588,-591,583,582,980,-303,-585',
'-588,-591,545,538,711,544,-275,-303,-583,-583,-583,-583,-583,-583,-583',
'-583,-583,-583,-583,-583,-583,-583,-586,984,-583,-583,-583,-583,-583',
'-583,846,847,-583,988,-583,-583,-583,989,-583,-679,-583,740,-583,-583',
'-583,-583,758,-583,-583,-583,-583,-583,991,-583,-302,-583,-303,-585',
'-588,-591,-340,-302,-679,262,263,993,-682,-340,995,-583,-302,-589,-583',
'-583,-583,-583,-340,-583,-589,-583,997,-685,906,874,-583,213,214,-583',
'-685,-685,-685,572,-583,997,-685,-685,-302,-685,224,261,260,575,224',
'-302,714,-685,-685,1004,-682,-91,1006,224,-302,106,105,107,108,-685',
'-685,-302,-685,-685,-685,-685,-685,-340,224,224,1014,110,109,111,1015',
'224,583,582,-589,1018,224,576,224,1023,96,97,-278,245,321,-685,-685',
'-685,-685,-685,-685,-685,-685,-685,-685,-685,-685,-685,-685,-302,245',
'-685,-685,-685,245,655,245,219,-583,-685,224,-580,-685,219,458,-583',
'224,-685,-580,-685,1110,-685,-685,459,-685,-685,-685,-685,-685,605,-685',
'-685,-685,659,94,82,85,86,1029,87,89,88,90,949,271,1032,-685,83,93,-685',
'-685,648,-100,575,-685,688,647,84,98,99,224,-685,224,224,-109,298,72',
'73,74,9,60,1040,220,-583,66,67,-580,224,220,70,-678,68,69,71,30,31,75',
'76,643,639,1044,576,740,77,28,27,106,105,107,108,740,1048,19,957,1050',
'1052,245,1054,8,48,300,10,110,109,111,100,59,102,101,103,224,104,112',
'113,219,96,97,44,45,43,-592,218,-580,1056,219,638,-275,-592,242,-580',
'216,642,244,243,-678,636,-592,635,-580,40,640,632,33,607,82,61,62,-593',
'599,63,598,35,400,1077,-593,47,83,-678,1078,245,594,1087,789,-593,20',
'834,84,1089,507,94,82,85,86,1092,87,89,88,90,949,220,549,834,83,93,548',
'-592,224,-580,575,220,65,242,84,98,99,244,243,41,42,298,72,73,74,9,60',
'245,1108,535,66,67,529,1111,-593,70,-685,68,69,71,30,31,75,76,271,224',
'280,526,576,77,28,27,106,105,107,108,1116,519,19,1117,957,1118,1121',
'997,8,48,300,10,110,109,111,100,59,102,101,103,997,104,112,113,-303',
'96,97,44,45,43,219,-303,-685,997,219,518,224,525,-76,-685,-303,603,127',
'507,-681,1133,523,505,-685,40,605,503,33,1136,740,61,62,219,1138,63',
'1140,35,1142,1144,1115,47,567,-685,564,563,562,1144,565,1113,20,492',
'223,730,463,94,82,85,86,462,87,89,88,90,460,-303,411,1078,83,93,398',
'220,1159,-685,224,220,65,1136,84,98,99,1136,325,41,42,298,72,73,74,9',
'60,324,265,215,66,67,-682,-681,220,70,224,68,69,71,30,31,75,76,237,212',
'211,210,127,77,28,27,106,105,107,108,794,795,19,997,796,112,113,1136',
'8,48,300,10,110,109,111,100,59,102,101,103,1171,104,112,113,1144,96',
'97,44,45,43,245,249,250,251,252,262,263,257,258,253,254,-293,238,239',
'1144,1144,255,256,-293,40,114,874,33,572,1144,61,62,-293,245,63,224',
'35,242,575,248,47,244,243,725,240,241,261,260,246,20,247,271,271,224',
'94,82,85,86,219,87,89,88,90,725,507,1110,900,83,93,901,259,583,582,224',
'605,65,576,84,98,99,874,-293,41,42,298,72,73,74,9,60,908,909,505,66',
'67,224,864,862,70,860,68,69,71,30,31,75,76,121,122,123,124,125,77,28',
'27,106,105,107,108,265,855,19,854,220,224,851,644,8,48,300,10,110,109',
'111,100,59,102,101,103,919,104,112,113,844,96,97,44,45,43,245,249,250',
'251,252,262,263,257,258,253,254,219,238,239,835,834,255,256,597,40,224',
',33,,,61,62,595,,63,,35,242,,248,47,244,243,,240,241,261,260,246,20',
'247,,,,94,82,85,86,219,87,89,88,90,,,534,,83,93,,259,,-249,,459,65,',
'84,98,99,,220,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,121,122,123,124,125,77,28,27,106,105,107,108,,,19,,220,,,644,8',
'48,300,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
'245,249,250,251,252,262,263,257,258,253,254,,238,239,,,255,256,,40,',
',33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261,260,246,20,247',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,259,,,,,65,,84,98,99,,,41,42',
'298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,121,122,123,124',
'125,77,28,27,106,105,107,108,,1071,19,564,563,562,,565,8,48,300,10,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,249,250',
'251,252,262,263,257,258,253,254,,238,239,,,255,256,,40,,,33,,,61,62',
',,63,,35,242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,224,259,,,,,65,,84,98,99,,,41,42,298,72,73',
'74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,121,122,123,124,125,77',
'28,27,106,105,107,108,,1071,19,564,563,562,,565,8,48,300,10,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,249,250,251',
'252,262,263,257,258,253,254,,238,239,,,255,256,,40,,,33,,,61,62,,,63',
',35,242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,',
'87,89,88,90,,,,,83,93,,259,,,,,65,,84,98,99,,,41,42,298,72,73,74,9,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,',
',19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,245,249,250,251,252,262,263,257,258,253,254,,238,239,,,255',
'256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261,260,246',
'20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,259,,,,,65,,84,98,99,',
',41,42,5,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77',
'28,27,106,105,107,108,,,19,,,,,,8,48,7,10,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,245,249,250,251,252,262,263,257,258',
'253,254,,238,239,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244',
'243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',259,,,,,65,,84,98,99,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,249,250',
'251,252,262,263,257,258,253,254,,238,239,,,255,256,,40,,,33,,,61,62',
',,63,,35,242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,259,,,,,65,,84,98,99,,,41,42,298,72,73,74',
'9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,567,19,564,563,562,,565,8,48,300,10,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,567,,564,563,562,,565,,750,,567,,564',
'563,562,,565,754,,40,,,33,,,61,62,,,63,567,35,564,563,562,47,565,750',
',,,,,,20,,754,750,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,750,,,65,,84',
'98,99,,754,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,245,249,250,251,252,262',
'263,257,258,253,254,,-706,-706,,,255,256,,40,,,33,,,61,62,,245,63,,35',
'242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89',
'88,90,,,242,,83,93,244,243,,240,241,,65,,84,98,99,,,41,42,298,72,73',
'74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,19,,,245,,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112',
'113,,96,97,44,45,43,245,-706,-706,-706,-706,262,263,242,,-706,-706,244',
'243,,240,241,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,',
'240,241,261,260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,567',
',564,563,562,65,565,84,98,99,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,750,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48',
'300,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245',
'249,250,251,252,262,263,257,258,253,254,,-706,-706,,,255,256,,40,,,33',
',,61,62,,,63,,35,242,,248,47,244,243,,240,241,261,260,246,20,247,,,',
'94,82,85,86,,87,89,88,90,,,,,83,93,,567,,564,563,562,65,565,84,98,99',
',,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,750,',
',,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59',
'102,101,103,,104,112,113,,96,97,44,45,43,245,-706,-706,-706,-706,262',
'263,,,-706,-706,,,,,,255,256,,40,,,302,,,61,62,,,63,,35,242,,248,47',
'244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,',
'83,93,,,,,,,65,,84,98,99,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68',
'69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10',
'110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,-706',
'-706,-706,-706,262,263,,,-706,-706,,,,,,255,256,,40,,,33,,,61,62,,,63',
',35,242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,',
'87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,298,72,73,74,9,60,',
',,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,',
'19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,245,-706,-706,-706,-706,262,263,,,-706,-706,,,,,,255,256',
',40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261,260,246,20',
'247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42',
'298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27',
'106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103',
',104,112,113,,96,97,44,45,43,245,,,,,,,,,,,,,,,,255,256,,40,,,33,,,61',
'62,,,63,,35,242,,248,47,244,243,,240,241,,,246,20,247,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,298,72,73,74,9,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,',
',19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,245,-706,-706,-706,-706,262,263,,,-706,-706,,,,,,255,256',
',40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261,260,246,20',
'247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42',
'298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27',
'106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103',
',104,112,113,,96,97,44,45,43,245,-706,-706,-706,-706,262,263,,,-706',
'-706,,,,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240',
'241,261,260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65',
',84,98,99,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,245,249,250,251,252,262',
'263,,,253,254,,,,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244',
'243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,41,42,5,72,73,74,9,60,,,,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,7,10,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,249,250,251',
'252,262,263,257,,253,254,,,,,,255,256,,40,,,33,,,61,62,,,63,,35,242',
',248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,298,72,73,74,9,60,,,,66,67,',
',,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8',
'48,300,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
'245,249,250,251,252,262,263,257,258,253,254,,-706,-706,,,255,256,,40',
',,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261,260,246,20,247',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,298',
'72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106',
'105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104',
'112,113,,96,97,44,45,43,245,,,,,,,,,,,,,,,,255,256,,40,,,302,,,61,62',
',,63,,35,242,,248,47,244,243,,240,241,,,246,20,247,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,298,72,73,74,9,60,,,,66',
'67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,',
',,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44',
'45,43,245,249,250,251,252,262,263,257,258,253,254,,-706,-706,,,255,256',
',40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261,260,246,20',
'247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42',
'298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27',
'106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103',
',104,112,113,,96,97,44,45,43,245,,,,,,,,,,,,,,,,255,256,,40,,,33,,,61',
'62,,,63,,35,242,,,47,244,243,,240,241,,,,20,,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,298,72,73,74,9,60,,,,66,67,',
',,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8',
'48,300,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
'245,,,,,,,,,,,,,,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244',
'243,,240,241,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,',
'84,98,99,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,245,,,,,,,,,,,,,,,,255,256',
',40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,,,,20,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,298,72,73',
'74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,302,,,61,62,,,63,,35,,,,47,',
',,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,19,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,118,,,,,117,65,,84,98,99',
',,41,42,72,73,74,,60,,,,66,67,,,,70,,68,69,71,317,318,75,76,,,,,,77',
'314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77',
'314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101',
'103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61',
'62,,,63,,,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,',
'83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75',
'76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,416,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,41,42,72,73,74,9,60,,,,66,67,,,,70,,68',
'69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,7,10',
'110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,',
',,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,400,65,,84,98,99,,,41,42,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,',
'94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
'41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,',
',,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41',
'42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,',
',,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,',
',,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42',
',70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48',
',,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,',
',,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,72,73,74,9,60,',
',,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,',
'19,,,,,,8,48,,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,416,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,416,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,',
'94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
'41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,',
',,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41',
'42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236,,,',
',,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41',
'42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236,,,',
',,,48,,,110,109,111,100,59,102,101,103,292,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,289,,287,,47,,,293,,,',
',,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108',
',,19,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,',
'94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
'41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
'41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,',
',,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41',
'42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,',
',,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,',
',,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,224,,,72,73,74,65,60,84,98,99,66,67,41',
'42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236,,,',
',,,48,,,110,109,111,100,59,102,101,103,292,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,289,,287,,47,,,293,,,',
',,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,289,,287,,47,,,293',
',,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105',
'107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,',
',,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108',
',,19,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
'41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,289,,287,,47,,,293',
',,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,41,494,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,289,,287',
',47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73',
'74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27',
'106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,292',
'104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63',
',289,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93',
'224,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,',
',,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,',
',65,,84,98,99,,,41,42,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,,10,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,',
'33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100,59',
'102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235',
',,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235',
',,61,62,,,63,,,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90',
',,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229',
',,235,,,61,62,,,63,,708,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69',
'71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,',
',,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,-687,,41,42,,,,-687,-687,-687',
',,-687,-687,-687,,-687,,,,,,,,-687,-687,-687,-687,-687,,,,,,,,-687,-687',
',-687,-687,-687,-687,-687,,,,,,,,,,,,,,,,,,,,,,,-687,-687,-687,-687',
'-687,-687,-687,-687,-687,-687,-687,-687,-687,-687,,,-687,-687,-687,',
',-687,,,-687,,,-687,-687,,-687,,-687,,-687,,-687,-687,,-687,-687,-687',
'-687,-687,,-687,-687,-687,,,,,,,,,,,,,,-687,,,-687,-687,-687,-687,,-687',
',-687,,72,73,74,-687,60,,,,66,67,,,,70,,68,69,71,317,318,75,76,,,,,',
'77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,',
',,65,,84,98,99,,,41,42,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,,10,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,',
'33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59',
'102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,289,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236,,,,,,,48,,,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71',
'317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,229,,,235,,,61,62,,,63,,808,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,72,73,74,9,60,,,,66,67,,',
',70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8',
'48,,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,',
',,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42',
',70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,',
',,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41',
'42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
'41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
'41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,',
'236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,-686,,41,42',
',,,-686,-686,-686,,,-686,-686,-686,,-686,,,,,,,,-686,-686,-686,-686',
'-686,,,,,,,,-686,-686,,-686,-686,-686,-686,-686,,,,,,,,,,,,,,,,,,,,',
',,-686,-686,-686,-686,-686,-686,-686,-686,-686,-686,-686,-686,-686,-686',
',,-686,-686,-686,,,-686,,,-686,,,-686,-686,,-686,,-686,,-686,,-686,-686',
',-686,-686,-686,-686,-686,,-686,-686,-686,,,,,,,,,,,,,,-686,,,-686,-686',
'-686,-686,,-686,,-686,,72,73,74,-686,60,,,,66,67,,,,70,,68,69,71,317',
'318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111',
'100,59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,',
',,229,,,235,,,61,62,,,63,,708,,,,47,,,293,,,,,,234,,,,,94,290,85,86',
',87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68',
'69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,',
',110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,',
',,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70',
',68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,',
'48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,229,,,235,538,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41',
'42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236,,,',
',,,48,,,110,109,111,100,59,102,101,103,292,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,289,,287,,47,,,293,,,',
',,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,',
'293,,,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65',
'60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106',
'105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,292,104',
'112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,289',
',287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77',
'314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,289,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,',
',,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,,',
',,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,',
',,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,',
',65,,84,98,99,-258,,41,42,,,,-258,-258,-258,,,-258,-258,-258,567,-258',
'564,563,562,572,565,,,-258,-258,-258,,,,575,,,,,,-258,-258,,-258,-258',
'-258,-258,-258,567,,564,563,562,572,565,567,570,564,563,562,572,565',
',575,,580,579,583,582,,575,,576,,567,,564,563,562,572,565,-258,,,,570',
',,-258,575,,,570,271,-258,,583,582,224,,,576,,583,582,,,,576,,,570,',
',,,-258,-258,,,580,579,583,582,,,,576,,,,-258,,,-258,,72,73,74,-258',
'60,,,,66,67,-258,,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105',
'107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,',
',,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
'-258,,41,42,,,,-258,-258,-258,,,-258,-258,-258,,-258,,,,,,,,-258,-258',
'-258,-258,,,,,,,,,-258,-258,,-258,-258,-258,-258,-258,,,,,,,,,,,,,,',
',,,,,,,,-258,-258,-258,-258,-258,-258,-258,-258,-258,-258,-258,-258',
'-258,-258,,,-258,-258,-258,,,-258,,271,-258,,,-258,-258,,-258,,-258',
',-258,,-258,-258,,-258,-258,-258,-258,-258,,-258,-258,-258,,,,,,,,,',
',,,,-258,,,-258,-258,,-258,,-258,72,73,74,,60,,-258,,66,67,,,,70,,68',
'69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,',
',110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,',
',,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236,,,,,,,48,',
',110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,',
',,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70',
',68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,',
'48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42',
',70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,',
',,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41',
'42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
'41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,',
'236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,-418,,41,42',
',,,-418,-418,-418,,,-418,-418,-418,,-418,,,,,,,,-418,-418,-418,-418',
',,,,,,,,-418,-418,,-418,-418,-418,-418,-418,,,,,,,,,,,,,,,,,,,,,,,-418',
'-418,-418,-418,-418,-418,-418,-418,-418,-418,-418,-418,-418,-418,,,-418',
'-418,-418,,,-418,,271,-418,,,-418,-418,,-418,,-418,,-418,,-418,-418',
',-418,-418,-418,-418,-418,-309,-418,-418,-418,,,,-309,-309,-309,,,-309',
'-309,-309,,-309,-418,,,-418,-418,,-418,-309,-418,-309,-309,,,,,-418',
',,,-309,-309,,-309,-309,-309,-309,-309,,,,,,,,,,,,,,,,,,,,,,,-309,-309',
'-309,-309,-309,-309,-309,-309,-309,-309,-309,-309,-309,-309,,,-309,-309',
'-309,,,-309,,280,-309,,,-309,-309,,-309,,-309,,-309,,-309,-309,,-309',
'-309,-309,-309,-309,,-309,,-309,,,,,,,,,,,,,,-309,,,-309,-309,,-309',
',-309,72,73,74,,60,,-309,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77',
'28,27,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103',
'292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,289,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,',
'83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59',
'102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,289,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236,,,,,,,48,,,110,109',
'111,100,59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,',
',,,,,,229,,,235,,,61,62,,,63,,289,,287,,47,,,293,,,,,,234,,,,,94,290',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,72,73,74,9,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,',
',19,,,,,,8,48,7,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,289,,287,,47,,,293',
',,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105',
'107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112',
'113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,708,',
'287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77',
'314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101',
'103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61',
'62,,,63,,,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,',
'83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75',
'76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,41,42,72,73,74,9,60,,,,66,67,,,,70,,68',
'69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10',
'110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,',
',,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,400,65,,84,98,99,,,41,42,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,708,,,,47,,,,,,',
',,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,-294',
',41,42,,,,-294,-294,-294,,,-294,-294,-294,,-294,,,,,,,,-294,,-294,-294',
'-294,,,,106,105,107,108,-294,-294,,-294,-294,-294,-294,-294,,,,,110',
'109,111,,,,,,,,,,,96,97,,,321,-294,-294,-294,-294,-294,-294,-294,-294',
'-294,-294,-294,-294,-294,-294,,,-294,-294,-294,,,-294,,,-294,,,-294',
'-294,,-294,,-294,,-294,,-294,-294,,-294,-294,-294,-294,-294,,-294,,-294',
',94,82,85,86,,87,89,88,90,,,,-294,83,93,-294,-294,-294,-294,,-294,688',
'-294,84,98,99,,-294,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,,10,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,',
'33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229',
',,235,,,61,62,,,63,,289,,,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89',
'88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71',
'317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109',
'111,100,59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,',
',,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,293,,,,,,234,,,,,94,290,85,86',
',87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68',
'69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,',
',,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71',
'317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,315,,,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,',
',,,,311,,,307,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,315,,,110,109,111',
'100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,311',
',,307,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318,75,76,,',
',,,77,314,320,106,105,107,108,,,236,,,,,,,315,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,311,,,307,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318,75,76,,,,,,77,314',
'320,106,105,107,108,,,236,,,,,,,315,,,110,109,111,100,59,102,101,103',
',104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,311,,,307,,,61,62,,,63',
',306,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74',
'65,60,84,98,99,66,67,,,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106',
'105,107,108,,,236,,,,,,,315,,,110,109,111,100,59,102,101,103,,104,112',
'113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,311,,,235,,,61,62,,,63,,,567,,564',
'563,562,572,565,,,,,,,,,575,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,323',
',570,65,,84,98,99,72,73,74,,60,583,582,,66,67,576,,,70,,68,69,71,317',
'318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,315,,,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,',
'360,,,33,,,61,62,,,63,,35,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318,75',
'76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,315,,,110,109,111,365',
'59,102,101,366,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,372,,,367,',
',235,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318,75,76,,',
',,,77,314,320,106,105,107,108,,,236,,,,,,,315,,,110,109,111,365,59,102',
'101,366,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,367,,,235,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318,75,76,,,,,,77,314',
'320,106,105,107,108,,,236,,,,,,,315,,,110,109,111,100,59,102,101,103',
',104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,311,,,235,,,61,62,,,63',
',,567,,564,563,562,572,565,,,,,,,,,575,,94,82,85,86,,87,89,88,90,,,',
',83,93,,,,521,,570,65,,84,98,99,72,73,74,,60,583,582,,66,67,576,,,70',
',68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,',
'315,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,',
',,,,,,,,,,,,,,1058,,,235,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69',
'71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,315,,,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,',
',,,,311,,,307,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,315,,,110,109,111',
'100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,311',
',,307,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318,75,76,,',
',,,77,314,320,106,105,107,108,,,236,,,,,,,315,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,1064,,,235,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318,75,76,,,,,,77,314',
'320,106,105,107,108,,,236,,,,,,,315,,,110,109,111,100,59,102,101,103',
',104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,1058,,,235,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98',
'99,177,188,178,201,174,194,184,183,204,205,199,182,181,176,202,206,207',
'186,175,189,193,195,187,180,,,,196,203,198,197,190,200,185,173,192,191',
',,,,,172,179,170,171,167,168,169,130,132,,,131,,,,,,,,161,162,,158,140',
'141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,,,,,,,,,155,154',
',139,160,157,156,165,152,153,147,145,137,159,138,,,166,94,,,,,,,,,,',
',,,93,177,188,178,201,174,194,184,183,204,205,199,182,181,176,202,206',
'207,186,175,189,193,195,187,180,,,,196,203,198,197,190,200,185,173,192',
'191,,,,,,172,179,170,171,167,168,169,130,132,,,131,,,,,,,,161,162,,158',
'140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,,,,,,,,,155',
'154,,139,160,157,156,165,152,153,147,145,137,159,138,,,166,94,,,,,,',
',,,,,,,93,177,188,178,201,174,194,184,183,204,205,199,182,181,176,202',
'206,207,186,175,189,193,195,187,180,,,,196,203,198,197,190,200,185,173',
'192,191,,,,,,172,179,170,171,167,168,169,130,132,,,131,,,,,,,,161,162',
',158,140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,,,,,',
',,,155,154,,139,160,157,156,165,152,153,147,145,137,159,138,,,166,94',
',,,,,,,,,,,,,93,177,188,178,201,174,194,184,183,204,205,199,182,181',
'176,202,206,207,186,175,189,193,195,187,180,,,,196,203,198,197,190,200',
'185,173,192,191,,,,,,172,179,170,171,167,168,169,130,132,129,,131,,',
',,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164,150,151',
',,,,,,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137,159,138',
',,166,94,106,105,107,108,,,,,,,,,,93,,,110,109,111,689,,,567,692,564',
'563,562,572,565,96,97,,,321,,,,575,,,,,,,,,,,,,,,,691,,,673,,,570,671',
',,672,,,,,580,579,583,582,,,,576,,,,690,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,106,105,107,108,,,688,,84,98,99,,,677,678,,110,109,111,689',
',,567,692,564,563,562,572,565,96,97,,,321,,,,575,,,,,,,,,,,,,,,,691',
',,673,,,570,671,,,672,,943,,,580,579,583,582,,,,576,,,,690,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,106,105,107,108,,,688,,84,98,99,,,677,678',
',110,109,111,689,,,567,692,564,563,562,572,565,96,97,,,321,,,,575,,',
',,,,,,,,,,,,,691,,,673,,,570,671,,,672,,,,,580,579,583,582,,,,576,,',
',690,,,,94,82,85,86,,87,89,88,90,,,,,83,93,106,105,107,108,,,688,,84',
'98,99,,,677,678,,110,109,111,689,,,567,692,564,563,562,572,565,96,97',
',,321,,,,575,,,,,,,,,,,,,,,,691,,,673,,,570,671,,,672,,,,,,,583,582',
',,,576,,,,690,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,688,,84,98',
'99,,,677,678,177,188,178,201,174,194,184,183,204,205,199,182,181,176',
'202,206,207,186,175,189,193,195,187,180,,,,196,203,198,197,190,200,185',
'173,192,191,,,,,,172,179,170,171,167,168,169,130,132,,,131,,,,,,,,161',
'162,,158,140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,',
',,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137,159,138,,,166',
'106,105,107,108,,,567,,564,563,562,572,565,,,,110,109,111,689,,575,',
'692,949,,,,,96,97,,,321,575,,,,,,,,,570,,,,,,,,,,691,583,582,673,,,576',
'671,,,672,,943,,,,,,,576,,,,,,,690,,,,94,950,85,86,,87,89,88,90,,,,',
'83,93,106,105,107,108,,,688,,84,98,99,,,677,678,,110,109,111,689,,,567',
'692,564,563,562,572,565,96,97,,,321,,,,575,,,,,,,,,,,,,,,,691,,,673',
',,570,671,,,672,,,,,580,579,583,582,,,,576,,,,690,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,688,,84,98,99,,,677,678,177,188,178,201,174',
'194,184,183,204,205,199,182,181,176,202,206,207,186,175,189,193,195',
'187,180,,,,196,203,198,383,382,384,381,173,192,191,,,,,,172,179,170',
'171,378,379,380,376,132,102,101,377,,104,,,,,,161,162,,158,140,141,142',
'149,146,148,,,143,144,,,,163,164,150,151,,,,,,388,,,,,,,,155,154,,139',
'160,157,156,165,152,153,147,145,137,159,138,,,166,106,105,107,108,,',
'567,,564,563,562,572,565,,,,110,109,111,689,,575,,692,,,,,,96,97,,,321',
',,,,,,,,,570,,,,,,,,,,691,583,582,673,,,576,671,,,672,,,,,,,,,,,,,,',
',690,,,,94,82,85,86,,87,89,88,90,,,,,83,93,106,105,107,108,,,688,,84',
'98,99,,,677,678,,110,109,111,689,,,567,692,564,563,562,572,565,96,97',
',,321,,,,575,,,,,,,,,,,,,,,,691,,,673,,,570,671,,,672,,,,,580,579,583',
'582,,,,576,,,,690,,,,94,82,85,86,,87,89,88,90,,,,,83,93,106,105,107',
'108,,,688,,84,98,99,,,677,678,,110,109,111,689,,,567,692,564,563,562',
'572,565,96,97,,,321,,,,575,,,,,,,,,,,,,,,,691,,,673,,,570,671,,,672',
',,,,,,583,582,,,,576,,,,690,,,,94,82,85,86,,87,89,88,90,,,,,83,93,106',
'105,107,108,,,688,,84,98,99,,,677,678,,110,109,111,689,,,567,692,564',
'563,562,572,565,96,97,,,321,,,,575,,,,,,,,,,,,,,,,691,,,673,,,570,671',
',,672,,1028,,,,,583,582,,,,576,,,,690,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,106,105,107,108,,,688,,84,98,99,,,677,678,,110,109,111,689,',
',,692,949,,,,,96,97,,,321,575,,,,,,,,,,,,,,,,,,,691,,,673,,,,671,,,672',
',943,,,,,,,576,,,,,,,690,,,,94,950,85,86,,87,89,88,90,,,,,83,93,106',
'105,107,108,,,688,,84,98,99,,,677,678,,110,109,111,689,,,,692,949,,',
',,96,97,,,321,575,,,,,,,,,,,,,,,,,,,691,,,673,,,,671,,,672,,943,,,,',
',,576,,,,,,,690,,,,94,950,85,86,,87,89,88,90,,,,,83,93,106,105,107,108',
',,688,,84,98,99,,,677,678,,110,109,111,689,,,567,692,564,563,562,572',
'565,96,97,,,321,,,,575,,,,,,,,,,,,,,,,691,,,673,,,570,671,,,672,,,,',
'580,579,583,582,,,,576,,,,690,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
'106,105,107,108,,,688,,84,98,99,,,677,678,,110,109,111,689,,,567,692',
'564,563,562,572,565,96,97,,,321,,,,575,,,,,,,,,,,,,,,,691,,,673,,,570',
'671,,,672,,943,,,,,583,582,,,,576,,,,690,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,106,105,107,108,,,688,,84,98,99,,,677,678,,110,109,111,689',
',,,692,,,,,,96,97,,,321,,,,,,,,106,105,107,108,,,,,,,,,691,,,673,110',
'109,111,671,,,672,,,,,,,96,97,,,321,,,,,690,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,688,,84,98,99,,,677,678,,,,,,,,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,106,105,107,108,,,688,,84,98,99,,,,,,110,109,111',
'660,442,,,661,,,,,,96,97,161,162,321,158,140,141,142,149,146,148,,,143',
'144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165',
'152,153,147,145,137,159,138,,,166,94,82,85,86,,87,89,88,90,,,,,83,93',
'718,442,,,719,,688,,84,98,99,,161,162,,158,140,141,142,149,146,148,',
',143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156',
'165,152,153,147,145,137,159,138,721,449,166,,722,,,,,,,,161,162,,158',
'140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,',
',155,154,,139,160,157,156,165,152,153,147,145,137,159,138,445,449,166',
',444,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164',
'150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145',
'137,159,138,813,449,166,,812,,,,,,,,161,162,,158,140,141,142,149,146',
'148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157',
'156,165,152,153,147,145,137,159,138,490,442,166,,491,,,,,,,,161,162',
',158,140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,,,,,',
',,,155,154,,139,160,157,156,165,152,153,147,145,137,159,138,1148,449',
'166,,1147,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163',
'164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152,153,147',
'145,137,159,138,1151,442,166,,1152,,,,,,,,161,162,,158,140,141,142,149',
'146,148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160',
'157,156,165,152,153,147,145,137,159,138,660,442,166,,661,,,,,,,,161',
'162,,158,140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,271',
',,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137,159,138,662',
'449,166,,663,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144,',
',,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152,153',
'147,145,137,159,138,777,449,166,,778,,,,,,,,161,162,,158,140,141,142',
'149,146,148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139',
'160,157,156,165,152,153,147,145,137,159,138,810,442,166,,811,,,,,,,',
'161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,',
',,,271,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137,159,138',
'780,449,166,,781,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144',
',,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152',
'153,147,145,137,159,138,438,442,166,,439,,,,,,,,161,162,,158,140,141',
'142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154',
',139,160,157,156,165,152,153,147,145,137,159,138,775,442,166,,776,,',
',,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164,150,151',
',,,,,271,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137,159',
'138,490,442,166,,491,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143',
'144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165',
'152,153,147,145,137,159,138,1153,449,166,,1154,,,,,,,,161,162,,158,140',
'141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155',
'154,,139,160,157,156,165,152,153,147,145,137,159,138,662,449,166,,663',
',,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164,150',
'151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137',
'159,138,,567,166,564,563,562,572,565,,567,,564,563,562,572,565,575,',
',,,,,,575,,,,,,,,,,,,,,570,552,,,,,,,570,580,579,583,582,,,,576,580',
'579,583,582,,,,576' ]
        racc_action_table = arr = ::Array.new(27126, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'813,460,349,928,937,775,358,813,813,813,728,728,64,813,813,395,813,19',
'958,943,778,1061,378,777,813,813,396,656,577,378,423,735,776,807,913',
'833,813,813,773,813,813,813,813,813,1062,1065,577,1116,983,1009,937',
'1154,917,713,296,598,651,917,19,296,460,958,928,357,361,713,813,813',
'813,813,813,813,813,813,813,813,813,813,813,813,809,395,813,813,813',
'778,813,378,777,423,813,1166,396,813,833,1009,608,608,813,64,813,943',
'813,813,728,813,813,813,813,813,100,813,813,813,775,358,589,100,100',
'100,349,350,100,100,100,349,100,813,1154,778,813,813,777,813,100,813',
'100,100,100,1061,735,776,813,913,1061,813,100,100,1151,100,100,100,100',
'100,1152,1153,773,1005,1007,773,646,773,1062,1065,598,1116,983,1062',
'1065,1154,1116,983,357,361,1154,637,100,100,100,100,100,100,100,100',
'100,100,100,100,100,100,608,592,100,100,100,608,100,100,697,592,100',
'1028,354,100,100,630,100,354,100,1166,100,836,100,100,1166,100,100,100',
'100,100,589,100,663,100,1013,589,1013,454,454,663,663,663,1153,837,663',
'663,663,100,663,350,100,100,100,100,350,100,663,100,663,663,663,836',
'100,612,612,100,628,719,663,663,439,663,663,663,663,663,1151,620,951',
'837,718,1151,1152,1153,316,1005,1007,1152,1153,1041,1005,1007,924,1028',
'818,697,951,924,663,663,663,663,663,663,663,663,663,663,663,663,663',
'663,43,43,663,663,663,439,663,663,321,321,663,691,671,663,663,691,663',
'439,663,454,663,719,663,663,26,663,663,663,663,663,444,663,811,663,718',
'438,316,444,444,444,610,1041,1041,444,444,612,444,663,671,593,663,663',
'663,663,444,663,24,663,1041,316,623,719,663,24,719,663,444,444,810,444',
'444,444,444,444,718,591,719,718,43,43,721,869,438,386,590,230,321,321',
'26,718,386,811,343,660,438,343,444,444,444,444,444,444,444,444,444,444',
'444,444,444,444,586,26,444,444,444,384,444,325,661,834,444,24,384,444',
'623,623,584,810,444,625,444,390,444,444,623,444,444,444,444,444,391',
'444,662,444,230,721,721,869,386,662,662,662,660,581,662,662,662,444',
'662,734,444,444,734,444,325,444,662,662,662,662,662,228,444,1127,1127',
'444,325,661,662,662,384,662,662,662,662,662,721,869,340,721,869,340',
'392,625,625,390,390,390,397,14,14,721,869,625,391,391,391,569,662,662',
'662,662,662,662,662,662,662,662,662,662,662,662,227,645,662,662,662',
'1158,662,662,228,39,662,1034,3,662,662,1158,662,3,662,560,662,393,662',
'662,394,662,662,662,662,662,812,662,662,662,392,392,392,812,812,812',
'397,397,397,812,812,840,812,662,645,840,662,662,662,662,812,662,39,662',
'1069,227,645,1069,662,38,559,662,812,812,39,812,812,812,812,812,558',
'1034,1034,1034,789,556,789,789,789,789,789,393,393,393,394,394,394,367',
'1034,789,555,367,812,812,812,812,812,812,812,812,812,812,812,812,812',
'812,38,17,812,812,812,789,812,1008,1008,554,812,509,38,812,789,789,789',
'789,812,542,812,789,812,812,541,812,812,812,812,812,103,812,856,812',
'859,129,540,103,103,103,129,129,103,103,103,383,103,812,17,539,812,812',
'383,812,103,812,103,103,103,670,17,789,812,366,670,812,103,103,670,103',
'103,103,103,103,868,509,509,509,530,601,382,381,380,740,740,872,601',
'382,381,380,339,527,509,339,875,601,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,383,876,103,103,103,366,103,103,674,674,103',
'883,366,103,103,884,103,366,103,885,103,366,103,103,887,103,103,103',
'103,103,890,103,722,103,601,382,381,380,49,722,366,46,46,891,722,49',
'893,103,722,379,103,103,103,103,49,103,379,103,894,445,761,761,103,348',
'348,103,445,445,445,737,366,896,445,445,781,445,899,46,46,737,522,781',
'520,445,445,904,781,517,907,516,781,846,846,846,846,445,445,722,445',
'445,445,445,445,49,500,496,914,846,846,846,916,495,737,737,379,920,921',
'737,922,926,846,846,927,472,846,445,445,445,445,445,445,445,445,445',
'445,445,445,445,445,781,471,445,445,445,470,445,469,226,377,445,938',
'376,445,1109,226,377,939,445,376,445,1109,445,445,226,445,445,445,445',
'445,1109,445,445,445,456,846,846,846,846,942,846,846,846,846,843,446',
'944,445,846,846,445,445,437,445,843,445,846,436,846,846,846,952,445',
'953,955,445,798,798,798,798,798,798,956,226,377,798,798,376,434,1109',
'798,365,798,798,798,798,798,798,798,424,420,964,843,965,798,798,798',
'798,798,798,798,966,968,798,843,969,970,467,972,798,798,798,798,798',
'798,798,798,798,798,798,798,973,798,798,798,16,798,798,798,798,798,308',
'16,365,974,422,417,415,308,467,365,16,422,467,467,365,414,308,412,365',
'798,422,406,798,371,80,798,798,309,362,798,360,798,356,1002,309,798',
'80,365,1003,468,355,1017,1022,309,798,1026,80,1027,344,798,798,798,798',
'1030,798,798,798,798,1032,16,342,1033,798,798,341,308,337,365,1032,422',
'798,468,798,798,798,468,468,798,798,588,588,588,588,588,588,331,1055',
'329,588,588,322,1058,309,588,780,588,588,588,588,588,588,588,320,315',
'314,311,1032,588,588,588,588,588,588,588,1064,305,588,1067,1032,1068',
'1073,1074,588,588,588,588,588,588,588,588,588,588,588,588,1075,588,588',
'588,526,588,588,588,588,588,310,526,780,1076,369,304,303,310,301,780',
'526,369,300,288,780,1090,310,285,780,588,369,284,588,1093,1099,588,588',
'1063,1102,588,1103,588,1104,1105,1063,588,754,780,754,754,754,1107,754',
'1063,588,270,236,1112,232,588,588,588,588,231,588,588,588,588,229,526',
'208,1126,588,588,114,310,1132,780,48,369,588,1134,588,588,588,1135,40',
'588,588,585,585,585,585,585,585,37,22,15,585,585,1147,1148,1063,585',
'1150,585,585,585,585,585,585,585,21,13,12,10,7,585,585,585,585,585,585',
'585,616,616,585,1156,616,616,616,1160,585,585,585,585,585,585,585,585',
'585,585,585,585,1162,585,585,585,1163,585,585,585,585,585,21,21,21,21',
'21,21,21,21,21,21,21,312,21,21,1164,1165,21,21,312,585,1,729,585,1044',
'1176,585,585,312,727,585,736,585,21,1044,21,585,21,21,724,21,21,21,21',
'21,585,21,723,720,717,585,585,585,585,1057,585,585,585,585,715,707,1057',
'752,585,585,753,21,1044,1044,755,1057,585,1044,585,585,585,763,312,585',
'585,962,962,962,962,962,962,769,770,705,962,962,774,703,702,962,701',
'962,962,962,962,962,962,962,514,514,514,514,514,962,962,962,962,962',
'962,962,696,694,962,693,1057,783,690,427,962,962,962,962,962,962,962',
'962,962,962,962,962,787,962,962,962,672,962,962,962,962,962,427,427',
'427,427,427,427,427,427,427,427,427,359,427,427,667,665,427,427,359',
'962,664,,962,,,962,962,359,,962,,962,427,,427,962,427,427,,427,427,427',
'427,427,962,427,,,,962,962,962,962,326,962,962,962,962,,,326,,962,962',
',427,,427,,326,962,,962,962,962,,359,962,962,863,863,863,863,863,863',
',,,863,863,,,,863,,863,863,863,863,863,863,863,336,336,336,336,336,863',
'863,863,863,863,863,863,,,863,,326,,,433,863,863,863,863,863,863,863',
'863,863,863,863,863,,863,863,863,,863,863,863,863,863,433,433,433,433',
'433,433,433,433,433,433,433,,433,433,,,433,433,,863,,,863,,,863,863',
',,863,,863,433,,433,863,433,433,,433,433,433,433,433,863,433,,,,863',
'863,863,863,,863,863,863,863,,,,,863,863,,433,,,,,863,,863,863,863,',
',863,863,235,235,235,235,235,235,,,,235,235,,,,235,,235,235,235,235',
'235,235,235,6,6,6,6,6,235,235,235,235,235,235,235,,988,235,988,988,988',
',988,235,235,235,235,235,235,235,235,235,235,235,235,,235,235,235,,235',
'235,235,235,235,486,486,486,486,486,486,486,486,486,486,486,,486,486',
',,486,486,,235,,,235,,,235,235,,,235,,235,486,,486,235,486,486,,486',
'486,486,486,486,235,486,,,,235,235,235,235,,235,235,235,235,,,,,235',
'235,486,486,,,,,235,,235,235,235,,,235,235,1060,1060,1060,1060,1060',
'1060,,,,1060,1060,,,,1060,,1060,1060,1060,1060,1060,1060,1060,299,299',
'299,299,299,1060,1060,1060,1060,1060,1060,1060,,1120,1060,1120,1120',
'1120,,1120,1060,1060,1060,1060,1060,1060,1060,1060,1060,1060,1060,1060',
',1060,1060,1060,,1060,1060,1060,1060,1060,282,282,282,282,282,282,282',
'282,282,282,282,,282,282,,,282,282,,1060,,,1060,,,1060,1060,,,1060,',
'1060,282,,282,1060,282,282,,282,282,282,282,282,1060,282,,,,1060,1060',
'1060,1060,,1060,1060,1060,1060,,,,,1060,1060,,282,,,,,1060,,1060,1060',
'1060,,,1060,1060,987,987,987,987,987,987,,,,987,987,,,,987,,987,987',
'987,987,987,987,987,,,,,,987,987,987,987,987,987,987,,,987,,,,,,987',
'987,987,987,987,987,987,987,987,987,987,987,,987,987,987,,987,987,987',
'987,987,961,961,961,961,961,961,961,961,961,961,961,,961,961,,,961,961',
',987,,,987,,,987,987,,,987,,987,961,,961,987,961,961,,961,961,961,961',
'961,987,961,,,,987,987,987,987,,987,987,987,987,,,,,987,987,,961,,,',
',987,,987,987,987,,,987,987,127,127,127,127,127,127,,,,127,127,,,,127',
',127,127,127,127,127,127,127,,,,,,127,127,127,127,127,127,127,,,127',
',,,,,127,127,127,127,127,127,127,127,127,127,127,127,,127,127,127,,127',
'127,127,127,127,537,537,537,537,537,537,537,537,537,537,537,,537,537',
',,537,537,,127,,,127,,,127,127,,,127,,127,537,,537,127,537,537,,537',
'537,537,537,537,127,537,,,,127,127,127,127,,127,127,127,127,,,,,127',
'127,,537,,,,,127,,127,127,127,,,127,127,980,980,980,980,980,980,,,,980',
'980,,,,980,,980,980,980,980,980,980,980,,,,,,980,980,980,980,980,980',
'980,,,980,,,,,,980,980,980,980,980,980,980,980,980,980,980,980,,980',
'980,980,,980,980,980,980,980,815,815,815,815,815,815,815,815,815,815',
'815,,815,815,,,815,815,,980,,,980,,,980,980,,,980,,980,815,,815,980',
'815,815,,815,815,815,815,815,980,815,,,,980,980,980,980,,980,980,980',
'980,,,,,980,980,,815,,,,,980,,980,980,980,,,980,980,986,986,986,986',
'986,986,,,,986,986,,,,986,,986,986,986,986,986,986,986,,,,,,986,986',
'986,986,986,986,986,,900,986,900,900,900,,900,986,986,986,986,986,986',
'986,986,986,986,986,986,,986,986,986,,986,986,986,986,986,570,,570,570',
'570,,570,,900,,1077,,1077,1077,1077,,1077,900,,986,,,986,,,986,986,',
',986,750,986,750,750,750,986,750,570,,,,,,,986,,570,1077,,986,986,986',
'986,,986,986,986,986,,,,,986,986,,,,750,,,986,,986,986,986,,750,986',
'986,609,609,609,609,609,609,,,,609,609,,,,609,,609,609,609,609,609,609',
'609,,,,,,609,609,609,609,609,609,609,,,609,,,,,,609,609,609,609,609',
'609,609,609,609,609,609,609,,609,609,609,,609,609,609,609,609,327,327',
'327,327,327,327,327,327,327,327,327,,327,327,,,327,327,,609,,,609,,',
'609,609,,483,609,,609,327,,327,609,327,327,,327,327,327,327,327,609',
'327,,,,609,609,609,609,,609,609,609,609,,,483,,609,609,483,483,,483',
'483,,609,,609,609,609,,,609,609,210,210,210,210,210,210,,,,210,210,',
',,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210,210,210,210',
',,210,,,482,,,210,210,210,210,210,210,210,210,210,210,210,210,,210,210',
'210,,210,210,210,210,210,481,481,481,481,481,481,481,482,,481,481,482',
'482,,482,482,481,481,,210,,,210,,,210,210,,,210,,210,481,,481,210,481',
'481,,481,481,481,481,481,210,481,,,,210,210,210,210,,210,210,210,210',
',,,,210,210,,901,,901,901,901,210,901,210,210,210,,,210,210,874,874',
'874,874,874,874,,,,874,874,,,,874,,874,874,874,874,874,874,874,901,',
',,,874,874,874,874,874,874,874,,,874,,,,,,874,874,874,874,874,874,874',
'874,874,874,874,874,,874,874,874,,874,874,874,874,874,465,465,465,465',
'465,465,465,465,465,465,465,,465,465,,,465,465,,874,,,874,,,874,874',
',,874,,874,465,,465,874,465,465,,465,465,465,465,465,874,465,,,,874',
'874,874,874,,874,874,874,874,,,,,874,874,,1078,,1078,1078,1078,874,1078',
'874,874,874,,,874,874,33,33,33,33,33,33,,,,33,33,,,,33,,33,33,33,33',
'33,33,33,1078,,,,,33,33,33,33,33,33,33,,,33,,,,,,33,33,33,33,33,33,33',
'33,33,33,33,33,,33,33,33,,33,33,33,33,33,480,480,480,480,480,480,480',
',,480,480,,,,,,480,480,,33,,,33,,,33,33,,,33,,33,480,,480,33,480,480',
',480,480,480,480,480,33,480,,,,33,33,33,33,,33,33,33,33,,,,,33,33,,',
',,,,33,,33,33,33,,,33,33,335,335,335,335,335,335,,,,335,335,,,,335,',
'335,335,335,335,335,335,335,,,,,,335,335,335,335,335,335,335,,,335,',
',,,,335,335,335,335,335,335,335,335,335,335,335,335,,335,335,335,,335',
'335,335,335,335,479,479,479,479,479,479,479,,,479,479,,,,,,479,479,',
'335,,,335,,,335,335,,,335,,335,479,,479,335,479,479,,479,479,479,479',
'479,335,479,,,,335,335,335,335,,335,335,335,335,,,,,335,335,,,,,,,335',
',335,335,335,,,335,335,1088,1088,1088,1088,1088,1088,,,,1088,1088,,',
',1088,,1088,1088,1088,1088,1088,1088,1088,,,,,,1088,1088,1088,1088,1088',
'1088,1088,,,1088,,,,,,1088,1088,1088,1088,1088,1088,1088,1088,1088,1088',
'1088,1088,,1088,1088,1088,,1088,1088,1088,1088,1088,478,478,478,478',
'478,478,478,,,478,478,,,,,,478,478,,1088,,,1088,,,1088,1088,,,1088,',
'1088,478,,478,1088,478,478,,478,478,478,478,478,1088,478,,,,1088,1088',
'1088,1088,,1088,1088,1088,1088,,,,,1088,1088,,,,,,,1088,,1088,1088,1088',
',,1088,1088,918,918,918,918,918,918,,,,918,918,,,,918,,918,918,918,918',
'918,918,918,,,,,,918,918,918,918,918,918,918,,,918,,,,,,918,918,918',
'918,918,918,918,918,918,918,918,918,,918,918,918,,918,918,918,918,918',
'536,,,,,,,,,,,,,,,,536,536,,918,,,918,,,918,918,,,918,,918,536,,536',
'918,536,536,,536,536,,,536,918,536,,,,918,918,918,918,,918,918,918,918',
',,,,918,918,,,,,,,918,,918,918,918,,,918,918,912,912,912,912,912,912',
',,,912,912,,,,912,,912,912,912,912,912,912,912,,,,,,912,912,912,912',
'912,912,912,,,912,,,,,,912,912,912,912,912,912,912,912,912,912,912,912',
',912,912,912,,912,912,912,912,912,477,477,477,477,477,477,477,,,477',
'477,,,,,,477,477,,912,,,912,,,912,912,,,912,,912,477,,477,912,477,477',
',477,477,477,477,477,912,477,,,,912,912,912,912,,912,912,912,912,,,',
',912,912,,,,,,,912,,912,912,912,,,912,912,779,779,779,779,779,779,,',
',779,779,,,,779,,779,779,779,779,779,779,779,,,,,,779,779,779,779,779',
'779,779,,,779,,,,,,779,779,779,779,779,779,779,779,779,779,779,779,',
'779,779,779,,779,779,779,779,779,476,476,476,476,476,476,476,,,476,476',
',,,,,476,476,,779,,,779,,,779,779,,,779,,779,476,,476,779,476,476,,476',
'476,476,476,476,779,476,,,,779,779,779,779,,779,779,779,779,,,,,779',
'779,,,,,,,779,,779,779,779,,,779,779,784,784,784,784,784,784,,,,784',
'784,,,,784,,784,784,784,784,784,784,784,,,,,,784,784,784,784,784,784',
'784,,,784,,,,,,784,784,784,784,784,784,784,784,784,784,784,784,,784',
'784,784,,784,784,784,784,784,484,484,484,484,484,484,484,,,484,484,',
',,,,484,484,,784,,,784,,,784,784,,,784,,784,484,,484,784,484,484,,484',
'484,484,484,484,784,484,,,,784,784,784,784,,784,784,784,784,,,,,784',
'784,,,,,,,784,,784,784,784,,,784,784,0,0,0,0,0,0,,,,0,0,,,,0,,0,0,0',
'0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,',
'0,0,0,0,0,485,485,485,485,485,485,485,485,,485,485,,,,,,485,485,,0,',
',0,,,0,0,,,0,,0,485,,485,0,485,485,,485,485,485,485,485,0,485,,,,0,0',
'0,0,,0,0,0,0,,,,,0,0,,,,,,,0,,0,0,0,,,0,0,1079,1079,1079,1079,1079,1079',
',,,1079,1079,,,,1079,,1079,1079,1079,1079,1079,1079,1079,,,,,,1079,1079',
'1079,1079,1079,1079,1079,,,1079,,,,,,1079,1079,1079,1079,1079,1079,1079',
'1079,1079,1079,1079,1079,,1079,1079,1079,,1079,1079,1079,1079,1079,466',
'466,466,466,466,466,466,466,466,466,466,,466,466,,,466,466,,1079,,,1079',
',,1079,1079,,,1079,,1079,466,,466,1079,466,466,,466,466,466,466,466',
'1079,466,,,,1079,1079,1079,1079,,1079,1079,1079,1079,,,,,1079,1079,',
',,,,,1079,,1079,1079,1079,,,1079,1079,302,302,302,302,302,302,,,,302',
'302,,,,302,,302,302,302,302,302,302,302,,,,,,302,302,302,302,302,302',
'302,,,302,,,,,,302,302,302,302,302,302,302,302,302,302,302,302,,302',
'302,302,,302,302,302,302,302,487,,,,,,,,,,,,,,,,487,487,,302,,,302,',
',302,302,,,302,,302,487,,487,302,487,487,,487,487,,,487,302,487,,,,302',
'302,302,302,,302,302,302,302,,,,,302,302,,,,,,,302,,302,302,302,,,302',
'302,1128,1128,1128,1128,1128,1128,,,,1128,1128,,,,1128,,1128,1128,1128',
'1128,1128,1128,1128,,,,,,1128,1128,1128,1128,1128,1128,1128,,,1128,',
',,,,1128,1128,1128,1128,1128,1128,1128,1128,1128,1128,1128,1128,,1128',
'1128,1128,,1128,1128,1128,1128,1128,328,328,328,328,328,328,328,328',
'328,328,328,,328,328,,,328,328,,1128,,,1128,,,1128,1128,,,1128,,1128',
'328,,328,1128,328,328,,328,328,328,328,328,1128,328,,,,1128,1128,1128',
'1128,,1128,1128,1128,1128,,,,,1128,1128,,,,,,,1128,,1128,1128,1128,',
',1128,1128,352,352,352,352,352,352,,,,352,352,,,,352,,352,352,352,352',
'352,352,352,,,,,,352,352,352,352,352,352,352,,,352,,,,,,352,352,352',
'352,352,352,352,352,352,352,352,352,,352,352,352,,352,352,352,352,352',
'475,,,,,,,,,,,,,,,,475,475,,352,,,352,,,352,352,,,352,,352,475,,,352',
'475,475,,475,475,,,,352,,,,,352,352,352,352,,352,352,352,352,,,,,352',
'352,,,,,,,352,,352,352,352,,,352,352,788,788,788,788,788,788,,,,788',
'788,,,,788,,788,788,788,788,788,788,788,,,,,,788,788,788,788,788,788',
'788,,,788,,,,,,788,788,788,788,788,788,788,788,788,788,788,788,,788',
'788,788,,788,788,788,788,788,474,,,,,,,,,,,,,,,,474,474,,788,,,788,',
',788,788,,,788,,788,474,,474,788,474,474,,474,474,,,,788,,,,,788,788',
'788,788,,788,788,788,788,,,,,788,788,,,,,,,788,,788,788,788,,,788,788',
'353,353,353,353,353,353,,,,353,353,,,,353,,353,353,353,353,353,353,353',
',,,,,353,353,353,353,353,353,353,,,353,,,,,,353,353,353,353,353,353',
'353,353,353,353,353,353,,353,353,353,,353,353,353,353,353,473,,,,,,',
',,,,,,,,,473,473,,353,,,353,,,353,353,,,353,,353,473,,473,353,473,473',
',473,473,,,,353,,,,,353,353,353,353,,353,353,353,353,,,,,353,353,,,',
',,,353,,353,353,353,,,353,353,307,307,307,307,307,307,,,,307,307,,,',
'307,,307,307,307,307,307,307,307,,,,,,307,307,307,307,307,307,307,,',
'307,,,,,,307,307,307,307,307,307,307,307,307,307,307,307,,307,307,307',
',307,307,307,307,307,,,,,,,,,,,,,,,,,,,,307,,,307,,,307,307,,,307,,307',
',,,307,,,,,,,,,307,,,,,307,307,307,307,,307,307,307,307,,,,,307,307',
',,,70,70,70,307,70,307,307,307,70,70,307,307,,70,,70,70,70,70,70,70',
'70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70',
',70,70,70,,70,70,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,',
',,,70,,,,,,,,,70,,,,,70,70,70,70,,70,70,70,70,,,,,70,70,70,,,,,70,70',
',70,70,70,,,70,70,932,932,932,,932,,,,932,932,,,,932,,932,932,932,932',
'932,932,932,,,,,,932,932,932,932,932,932,932,,,932,,,,,,,932,,,932,932',
'932,932,932,932,932,932,,932,932,932,,932,932,932,932,932,,,,,,,,,,',
',,,,,,,,,932,,,932,,,932,932,,,932,,,,,,932,,,,,,,,,932,,,,,932,932',
'932,932,,932,932,932,932,,,,,932,932,,,,931,931,931,932,931,932,932',
'932,931,931,932,932,,931,,931,931,931,931,931,931,931,,,,,,931,931,931',
'931,931,931,931,,,931,,,,,,,931,,,931,931,931,931,931,931,931,931,931',
'931,931,931,,931,931,931,931,931,,,,,,,,,,,,,,,,,,,,931,,,931,,,931',
'931,,,931,,,,931,,931,,,931,,,,,,931,,,,,931,931,931,931,,931,931,931',
'931,,,,,931,931,,,,730,730,730,931,730,931,931,931,730,730,931,931,',
'730,,730,730,730,730,730,730,730,,,,,,730,730,730,730,730,730,730,,',
'730,,,,,,,730,,,730,730,730,730,730,730,730,730,,730,730,730,,730,730',
'730,730,730,,,,,,,,,,,,,,,,,,,,730,,,730,,,730,730,,,730,,730,,,,730',
',,,,,,,,730,,,,,730,730,730,730,,730,730,730,730,,,,,730,730,,,,416',
'416,416,730,416,730,730,730,416,416,730,730,,416,,416,416,416,416,416',
'416,416,,,,,,416,416,416,416,416,416,416,,,416,,,,,,,416,,,416,416,416',
'416,416,416,416,416,,416,416,416,,416,416,416,416,416,,,,,,,,,,,,,,',
',,,,,416,,,416,,,416,416,,,416,,,,,,416,,,,,,,,,416,,,,,416,416,416',
'416,,416,416,416,416,,,,,416,416,,,,,,,416,,416,416,416,,,416,416,116',
'116,116,116,116,,,,116,116,,,,116,,116,116,116,116,116,116,116,,,,,',
'116,116,116,116,116,116,116,,,116,,,,,,116,116,116,116,116,116,116,116',
'116,116,116,116,,116,116,116,,116,116,116,116,116,,,,,,,,,,,,,,,,,,',
',116,,,116,,,116,116,,,116,,116,,,,116,,,,,,,,,116,,,,,116,116,116,116',
',116,116,116,116,,,,,116,116,,,,,,116,116,,116,116,116,,,116,116,121',
'121,121,,121,,,,121,121,,,,121,,121,121,121,121,121,121,121,,,,,,121',
'121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121,121,121,121,121',
'121,,121,121,121,,121,121,121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,',
',121,121,,,121,,,,,,121,,,,,,,,,121,,,,,121,121,121,121,,121,121,121',
'121,,,,,121,121,,,,122,122,122,121,122,121,121,121,122,122,121,121,',
'122,,122,122,122,122,122,122,122,,,,,,122,122,122,122,122,122,122,,',
'122,,,,,,,122,,,122,122,122,122,122,122,122,122,,122,122,122,,122,122',
'122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,,,,,122,,',
',,,,,,122,,,,,122,122,122,122,,122,122,122,122,,,,,122,122,,,,123,123',
'123,122,123,122,122,122,123,123,122,122,,123,,123,123,123,123,123,123',
'123,,,,,,123,123,123,123,123,123,123,,,123,,,,,,,123,,,123,123,123,123',
'123,123,123,123,,123,123,123,,123,123,123,123,123,,,,,,,,,,,,,,,,,,',
',123,,,123,,,123,123,,,123,,,,,,123,,,,,,,,,123,,,,,123,123,123,123',
',123,123,123,123,,,,,123,123,,,,124,124,124,123,124,123,123,123,124',
'124,123,123,,124,,124,124,124,124,124,124,124,,,,,,124,124,124,124,124',
'124,124,,,124,,,,,,,124,,,124,124,124,124,124,124,124,124,,124,124,124',
',124,124,124,124,124,,,,,,,,,,,,,,,,,,,,124,,,124,,,124,124,,,124,,',
',,,124,,,,,,,,,124,,,,,124,124,124,124,,124,124,124,124,,,,,124,124',
',,,,,,124,,124,124,124,,,124,124,125,125,125,125,125,,,,125,125,,,,125',
',125,125,125,125,125,125,125,,,,,,125,125,125,125,125,125,125,,,125',
',,,,,125,125,,125,125,125,125,125,125,125,125,125,,125,125,125,,125',
'125,125,125,125,,,,,,,,,,,,,,,,,,,,125,,,125,,,125,125,,,125,,125,,',
',125,,,,,,,,,125,,,,,125,125,125,125,,125,125,125,125,,,,,125,125,,',
',211,211,211,125,211,125,125,125,211,211,125,125,,211,,211,211,211,211',
'211,211,211,,,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211',
'211,211,211,211,211,211,,211,211,211,,211,211,211,211,211,,,,,,,,,,',
',,,,,,,,,211,,,211,,,211,211,,,211,,211,,,,211,,,,,,,,,211,,,,,211,211',
'211,211,,211,211,211,211,,,,,211,211,,,,212,212,212,211,212,211,211',
'211,212,212,211,211,,212,,212,212,212,212,212,212,212,,,,,,212,212,212',
'212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212,212,212,212,,212',
'212,212,,212,212,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212',
',,212,,212,,,,212,,,,,,,,,212,,,,,212,212,212,212,,212,212,212,212,',
',,,212,212,,,,213,213,213,212,213,212,212,212,213,213,212,212,,213,',
'213,213,213,213,213,213,213,,,,,,213,213,213,213,213,213,213,,,213,',
',,,,,213,,,213,213,213,213,213,213,213,213,,213,213,213,,213,213,213',
'213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,,213,,,,,,213,,,,,,',
',,213,,,,,213,213,213,213,,213,213,213,213,,,,,213,213,,,,214,214,214',
'213,214,213,213,213,214,214,213,213,,214,,214,214,214,214,214,214,214',
',,,,,214,214,214,214,214,214,214,,,214,,,,,,,214,,,214,214,214,214,214',
'214,214,214,,214,214,214,,214,214,214,214,214,,,,,,,,,,,,,,,,,,,,214',
',,214,,,214,214,,,214,,,,,,214,,,,,,,,,214,,,,,214,214,214,214,,214',
'214,214,214,,,,,214,214,,,,215,215,215,214,215,214,214,214,215,215,214',
'214,,215,,215,215,215,215,215,215,215,,,,,,215,215,215,215,215,215,215',
',,215,,,,,,,215,,,215,215,215,215,215,215,215,215,,215,215,215,,215',
'215,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,,,,,215',
',,,,,,,,215,,,,,215,215,215,215,,215,215,215,215,,,,,215,215,,,,216',
'216,216,215,216,215,215,215,216,216,215,215,,216,,216,216,216,216,216',
'216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216',
'216,216,216,216,216,216,216,216,216,,216,216,216,216,216,,,,,,,,,,,',
',,,,,,,,216,,,216,,,216,216,,,216,,216,,216,,216,,,216,,,,,,216,,,,',
'216,216,216,216,,216,216,216,216,,,,,216,216,,,,906,906,906,216,906',
'216,216,216,906,906,216,216,,906,,906,906,906,906,906,906,906,,,,,,906',
'906,906,906,906,906,906,,,906,,,,,,,906,,,906,906,906,906,906,906,906',
'906,,906,906,906,,906,906,906,906,906,,,,,,,,,,,,,,,,,,,,906,,,906,',
',906,906,,,906,,,,,,906,,,,,,,,,906,,,,,906,906,906,906,,906,906,906',
'906,,,,,906,906,,,,785,785,785,906,785,906,906,906,785,785,906,906,',
'785,,785,785,785,785,785,785,785,,,,,,785,785,785,785,785,785,785,,',
'785,,,,,,,785,,,785,785,785,785,785,785,785,785,,785,785,785,,785,785',
'785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,,785,,,,,,785,,',
',,,,,,785,,,,,785,785,785,785,,785,785,785,785,,,,,785,785,,,,221,221',
'221,785,221,785,785,785,221,221,785,785,,221,,221,221,221,221,221,221',
'221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221',
'221,221,221,221,,221,221,221,,221,221,221,221,221,,,,,,,,,,,,,,,,,,',
',221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,,221,,,,,221,221,221,221',
',221,221,221,221,,,,,221,221,,,,222,222,222,221,222,221,221,221,222',
'222,221,221,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222',
'222,222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222',
',222,222,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,',
',,,222,,,,,,,,,222,,,,,222,222,222,222,,222,222,222,222,,,,,222,222',
',,,223,223,223,222,223,222,222,222,223,223,222,222,,223,,223,223,223',
'223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223,,,,,,,223,,,223',
'223,223,223,223,223,223,223,,223,223,223,,223,223,223,223,223,,,,,,',
',,,,,,,,,,,,,223,,,223,,,223,223,,,223,,,,,,223,,,,,,,,,223,,,,,223',
'223,223,223,,223,223,223,223,,,,,223,223,223,,,523,523,523,223,523,223',
'223,223,523,523,223,223,,523,,523,523,523,523,523,523,523,,,,,,523,523',
'523,523,523,523,523,,,523,,,,,,,523,,,523,523,523,523,523,523,523,523',
'523,523,523,523,,523,523,523,523,523,,,,,,,,,,,,,,,,,,,,523,,,523,,',
'523,523,,,523,,523,,523,,523,,,523,,,,,,523,,,,,523,523,523,523,,523',
'523,523,523,,,,,523,523,,,,655,655,655,523,655,523,523,523,655,655,523',
'523,,655,,655,655,655,655,655,655,655,,,,,,655,655,655,655,655,655,655',
',,655,,,,,,,655,,,655,655,655,655,655,655,655,655,,655,655,655,,655',
'655,655,655,655,,,,,,,,,,,,,,,,,,,,655,,,655,,,655,655,,,655,,,,,,655',
',,,,,,,,655,,,,,655,655,655,655,,655,655,655,655,,,,,655,655,,,,1113',
'1113,1113,655,1113,655,655,655,1113,1113,655,655,,1113,,1113,1113,1113',
'1113,1113,1113,1113,,,,,,1113,1113,1113,1113,1113,1113,1113,,,1113,',
',,,,,1113,,,1113,1113,1113,1113,1113,1113,1113,1113,1113,1113,1113,1113',
',1113,1113,1113,1113,1113,,,,,,,,,,,,,,,,,,,,1113,,,1113,,,1113,1113',
',,1113,,1113,,1113,,1113,,,1113,,,,,,1113,,,,,1113,1113,1113,1113,,1113',
'1113,1113,1113,,,,,1113,1113,,,,234,234,234,1113,234,1113,1113,1113',
'234,234,1113,1113,,234,,234,234,234,234,234,234,234,,,,,,234,234,234',
'234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234',
'234,234,,234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234',
',,234,,,,,,234,,,,,,,,,234,,,,,234,234,234,234,,234,234,234,234,,,,',
'234,234,,,,654,654,654,234,654,234,234,234,654,654,234,234,,654,,654',
'654,654,654,654,654,654,,,,,,654,654,654,654,654,654,654,,,654,,,,,',
',654,,,654,654,654,654,654,654,654,654,,654,654,654,,654,654,654,654',
'654,,,,,,,,,,,,,,,,,,,,654,,,654,,,654,654,,,654,,,,,,654,,,,,,,,,654',
',,,,654,654,654,654,,654,654,654,654,,,,,654,654,,,,238,238,238,654',
'238,654,654,654,238,238,654,654,,238,,238,238,238,238,238,238,238,,',
',,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238',
'238,238,238,,238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238',
',,238,,,238,238,,,238,,,,,,238,,,,,,,,,238,,,,,238,238,238,238,,238',
'238,238,238,,,,,238,238,,,,239,239,239,238,239,238,238,238,239,239,238',
'238,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239',
',,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,,239',
'239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239',
',,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,,239,239,,,,240',
'240,240,239,240,239,239,239,240,240,239,239,,240,,240,240,240,240,240',
'240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240',
'240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,,,,,,,,,',
',,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240,240,240',
'240,,240,240,240,240,,,,,240,240,,,,241,241,241,240,241,240,240,240',
'241,241,240,240,,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241',
'241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241',
'241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241',
',,,,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241,241,,,,,241,241',
',,,242,242,242,241,242,241,241,241,242,242,241,241,,242,,242,242,242',
'242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242',
'242,242,242,242,242,242,242,,242,242,242,,242,242,242,242,242,,,,,,',
',,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242',
'242,242,242,,242,242,242,242,,,,,242,242,,,,243,243,243,242,243,242',
'242,242,243,243,242,242,,243,,243,243,243,243,243,243,243,,,,,,243,243',
'243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243',
',243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243',
'243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243,243',
',,,,243,243,,,,244,244,244,243,244,243,243,243,244,244,243,243,,244',
',244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244',
',,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,244',
'244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,',
',,244,,,,,244,244,244,244,,244,244,244,244,,,,,244,244,,,,245,245,245',
'244,245,244,244,244,245,245,244,244,,245,,245,245,245,245,245,245,245',
',,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245',
'245,245,245,,245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245',
',,245,,,245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245,245,,245',
'245,245,245,,,,,245,245,,,,246,246,246,245,246,245,245,245,246,246,245',
'245,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246',
',,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,,246',
'246,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246',
',,,,,,,,246,,,,,246,246,246,246,,246,246,246,246,,,,,246,246,,,,247',
'247,247,246,247,246,246,246,247,247,246,246,,247,,247,247,247,247,247',
'247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247',
'247,247,247,247,247,,247,247,247,,247,247,247,247,247,,,,,,,,,,,,,,',
',,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247,247,247',
'247,,247,247,247,247,,,,,247,247,,,,248,248,248,247,248,247,247,247',
'248,248,247,247,,248,,248,248,248,248,248,248,248,,,,,,248,248,248,248',
'248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248',
'248,,248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248',
',,,,,248,,,,,,,,,248,,,,,248,248,248,248,,248,248,248,248,,,,,248,248',
',,,249,249,249,248,249,248,248,248,249,249,248,248,,249,,249,249,249',
'249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249',
'249,249,249,249,249,249,249,,249,249,249,,249,249,249,249,249,,,,,,',
',,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,,249,,,,,249',
'249,249,249,,249,249,249,249,,,,,249,249,,,,372,372,372,249,372,249',
'249,249,372,372,249,249,,372,,372,372,372,372,372,372,372,,,,,,372,372',
'372,372,372,372,372,,,372,,,,,,,372,,,372,372,372,372,372,372,372,372',
',372,372,372,,372,372,372,372,372,,,,,,,,,,,,,,,,,,,,372,,,372,,,372',
'372,,,372,,,,,,372,,,,,,,,,372,,,,,372,372,372,372,,372,372,372,372',
',,,,372,372,,,,251,251,251,372,251,372,372,372,251,251,372,372,,251',
',251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251',
',,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251,251',
'251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,',
',,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251,,,,252,252,252',
'251,252,251,251,251,252,252,251,251,,252,,252,252,252,252,252,252,252',
',,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252',
'252,252,252,,252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,,,,,,,252',
',,252,,,252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252,252,,252',
'252,252,252,,,,,252,252,,,,253,253,253,252,253,252,252,252,253,253,252',
'252,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253',
',,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,,253',
'253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253',
',,,,,,,,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253,,,,254',
'254,254,253,254,253,253,253,254,254,253,253,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,254,254,254,,,,,,,,,,,,,,',
',,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254,254',
'254,,254,254,254,254,,,,,254,254,,,,255,255,255,254,255,254,254,254',
'255,255,254,254,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255',
'255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255',
'255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255',
',,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255,255,,,,,255,255',
',,,256,256,256,255,256,255,255,255,256,256,255,255,,256,,256,256,256',
'256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256',
'256,256,256,256,256,256,256,,256,256,256,,256,256,256,256,256,,,,,,',
',,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256,,,,,256',
'256,256,256,,256,256,256,256,,,,,256,256,,,,257,257,257,256,257,256',
'256,256,257,257,256,256,,257,,257,257,257,257,257,257,257,,,,,,257,257',
'257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257',
',257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257',
'257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257,257',
',,,,257,257,,,,258,258,258,257,258,257,257,257,258,258,257,257,,258',
',258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258',
',,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,,258,258,258',
'258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,',
',,258,,,,,258,258,258,258,,258,258,258,258,,,,,258,258,,,,259,259,259',
'258,259,258,258,258,259,259,258,258,,259,,259,259,259,259,259,259,259',
',,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259',
'259,259,259,,259,259,259,,259,259,259,259,259,,,,,,,,,,,,,,,,,,,,259',
',,259,,,259,259,,,259,,,,,,259,,,,,,,,,259,,,,,259,259,259,259,,259',
'259,259,259,,,,,259,259,,,,264,264,264,259,264,259,259,259,264,264,259',
'259,,264,,264,264,264,264,264,264,264,,,,,,264,264,264,264,264,264,264',
',,264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264,264,264,,264',
'264,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,,,,,264',
',,,,,,,,264,,,,,264,264,264,264,,264,264,264,264,,,,,264,264,,,,808',
'808,808,264,808,264,264,264,808,808,264,264,,808,,808,808,808,808,808',
'808,808,,,,,,808,808,808,808,808,808,808,,,808,,,,,,,808,,,808,808,808',
'808,808,808,808,808,,808,808,808,,808,808,808,808,808,,,,,,,,,,,,,,',
',,,,,808,,,808,,,808,808,,,808,,,,,,808,,,,,,,,,808,,,,,808,808,808',
'808,,808,808,808,808,,,,,808,808,,,,650,650,650,808,650,808,808,808',
'650,650,808,808,,650,,650,650,650,650,650,650,650,,,,,,650,650,650,650',
'650,650,650,,,650,,,,,,,650,,,650,650,650,650,650,650,650,650,,650,650',
'650,,650,650,650,650,650,,,,,,,,,,,,,,,,,,,,650,,,650,,,650,650,,,650',
',,,,,650,,,,,,,,,650,,,,,650,650,650,650,,650,650,650,650,,,,,650,650',
',,,271,271,271,650,271,650,650,650,271,271,650,650,,271,,271,271,271',
'271,271,271,271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271,,,271',
'271,271,271,271,271,271,271,271,271,271,271,,271,271,271,271,271,,,',
',,,,,,,,,,,,,,,,271,,,271,,,271,271,,,271,,271,,271,,271,,,271,,,,,',
'271,,,,,271,271,271,271,,271,271,271,271,,,,,271,271,,,,272,272,272',
'271,272,271,271,271,272,272,271,271,,272,,272,272,272,272,272,272,272',
',,,,,272,272,272,272,272,272,272,,,272,,,,,,,272,,,272,272,272,272,272',
'272,272,272,272,272,272,272,,272,272,272,272,272,,,,,,,,,,,,,,,,,,,',
'272,,,272,,,272,272,,,272,,272,,272,,272,,,272,,,,,,272,,,,,272,272',
'272,272,,272,272,272,272,,,,,272,272,,,,280,280,280,272,280,272,272',
'272,280,280,272,272,,280,,280,280,280,280,280,280,280,,,,,,280,280,280',
'280,280,280,280,,,280,,,,,,,280,,,280,280,280,280,280,280,280,280,280',
'280,280,280,,280,280,280,280,280,,,,,,,,,,,,,,,,,,,,280,,,280,,,280',
'280,,,280,,280,,280,,280,,,280,,,,,,280,,,,,280,280,280,280,,280,280',
'280,280,,,,,280,280,280,,,649,649,649,280,649,280,280,280,649,649,280',
'280,,649,,649,649,649,649,649,649,649,,,,,,649,649,649,649,649,649,649',
',,649,,,,,,,649,,,649,649,649,649,649,649,649,649,,649,649,649,,649',
'649,649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,,649,,,,,,649',
',,,,,,,,649,,,,,649,649,649,649,,649,649,649,649,,,,,649,649,,,,532',
'532,532,649,532,649,649,649,532,532,649,649,,532,,532,532,532,532,532',
'532,532,,,,,,532,532,532,532,532,532,532,,,532,,,,,,,532,,,532,532,532',
'532,532,532,532,532,,532,532,532,,532,532,532,532,532,,,,,,,,,,,,,,',
',,,,,532,,,532,,,532,532,,,532,,,,,,532,,,,,,,,,532,,,,,532,532,532',
'532,,532,532,532,532,,,,,532,532,,,,287,287,287,532,287,532,532,532',
'287,287,532,532,,287,,287,287,287,287,287,287,287,,,,,,287,287,287,287',
'287,287,287,,,287,,,,,,,287,,,287,287,287,287,287,287,287,287,,287,287',
'287,,287,287,287,287,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287',
',,,,,287,,,,,,,,,287,,,,,287,287,287,287,,287,287,287,287,,,,,287,287',
',,,289,289,289,287,289,287,287,287,289,289,287,287,,289,,289,289,289',
'289,289,289,289,,,,,,289,289,289,289,289,289,289,,,289,,,,,,,289,,,289',
'289,289,289,289,289,289,289,,289,289,289,,289,289,289,289,289,,,,,,',
',,,,,,,,,,,,,289,,,289,,,289,289,,,289,,,,,,289,,,,,,,,,289,,,,,289',
'289,289,289,,289,289,289,289,,,,,289,289,,,,292,292,292,289,292,289',
'289,289,292,292,289,289,,292,,292,292,292,292,292,292,292,,,,,,292,292',
'292,292,292,292,292,,,292,,,,,,,292,,,292,292,292,292,292,292,292,292',
',292,292,292,,292,292,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292',
'292,,,292,,,,,,292,,,,,,,,,292,,,,,292,292,292,292,,292,292,292,292',
',,,,292,292,,,,293,293,293,292,293,292,292,292,293,293,292,292,,293',
',293,293,293,293,293,293,293,,,,,,293,293,293,293,293,293,293,,,293',
',,,,,,293,,,293,293,293,293,293,293,293,293,,293,293,293,,293,293,293',
'293,293,,,,,,,,,,,,,,,,,,,,293,,,293,,,293,293,,,293,,,,,,293,,,,,,',
',,293,,,,,293,293,293,293,,293,293,293,293,,,,,293,293,,,,388,388,388',
'293,388,293,293,293,388,388,293,293,,388,,388,388,388,388,388,388,388',
',,,,,388,388,388,388,388,388,388,,,388,,,,,,,388,,,388,388,388,388,388',
'388,388,388,,388,388,388,,388,388,388,388,388,,,,,,,,,,,,,,,,,,,,388',
',,388,,,388,388,,,388,,,,,,388,,,,,,,,,388,,,,,388,388,388,388,,388',
'388,388,388,,,,,388,388,,,,,,,388,,388,388,388,,,388,388,298,298,298',
'298,298,,,,298,298,,,,298,,298,298,298,298,298,298,298,,,,,,298,298',
'298,298,298,298,298,,,298,,,,,,298,298,,298,298,298,298,298,298,298',
'298,298,,298,298,298,,298,298,298,298,298,,,,,,,,,,,,,,,,,,,,298,,,298',
',,298,298,,,298,,298,,,,298,,,,,,,,,298,,,,,298,298,298,298,,298,298',
'298,298,,,,,298,298,,,,1082,1082,1082,298,1082,298,298,298,1082,1082',
'298,298,,1082,,1082,1082,1082,1082,1082,1082,1082,,,,,,1082,1082,1082',
'1082,1082,1082,1082,,,1082,,,,,,,1082,,,1082,1082,1082,1082,1082,1082',
'1082,1082,,1082,1082,1082,,1082,1082,1082,1082,1082,,,,,,,,,,,,,,,,',
',,,1082,,,1082,,,1082,1082,,,1082,,,,,,1082,,,,,,,,,1082,,,,,1082,1082',
'1082,1082,,1082,1082,1082,1082,,,,,1082,1082,,,,1081,1081,1081,1082',
'1081,1082,1082,1082,1081,1081,1082,1082,,1081,,1081,1081,1081,1081,1081',
'1081,1081,,,,,,1081,1081,1081,1081,1081,1081,1081,,,1081,,,,,,,1081',
',,1081,1081,1081,1081,1081,1081,1081,1081,,1081,1081,1081,,1081,1081',
'1081,1081,1081,,,,,,,,,,,,,,,,,,,,1081,,,1081,,,1081,1081,,,1081,,,',
',,1081,,,,,,,,,1081,,,,,1081,1081,1081,1081,,1081,1081,1081,1081,,,',
',1081,1081,,,,648,648,648,1081,648,1081,1081,1081,648,648,1081,1081',
',648,,648,648,648,648,648,648,648,,,,,,648,648,648,648,648,648,648,',
',648,,,,,,,648,,,648,648,648,648,648,648,648,648,648,648,648,648,,648',
'648,648,648,648,,,,,,,,,,,,,,,,,,,,648,,,648,,,648,648,,,648,,,,648',
',648,,,648,,,,,,648,,,,,648,648,648,648,,648,648,648,648,,,,,648,648',
',,,647,647,647,648,647,648,648,648,647,647,648,648,,647,,647,647,647',
'647,647,647,647,,,,,,647,647,647,647,647,647,647,,,647,,,,,,,647,,,647',
'647,647,647,647,647,647,647,647,647,647,647,,647,647,647,647,647,,,',
',,,,,,,,,,,,,,,,647,,,647,,,647,647,,,647,,647,,647,,647,,,647,,,,,',
'647,,,,,647,647,647,647,,647,647,647,647,,,,,647,647,,,,535,535,535',
'647,535,647,647,647,535,535,647,647,,535,,535,535,535,535,535,535,535',
',,,,,535,535,535,535,535,535,535,,,535,,,,,,,535,,,535,535,535,535,535',
'535,535,535,,535,535,535,,535,535,535,535,535,,,,,,,,,,,,,,,,,,,,535',
',,535,,,535,535,,,535,,,,,,535,,,,,,,,,535,,,,,535,535,535,535,,535',
'535,535,535,,,,,535,535,,,,,,,535,,535,535,535,450,,535,535,,,,450,450',
'450,,,450,450,450,,450,,,,,,,,450,450,450,450,450,,,,,,,,450,450,,450',
'450,450,450,450,,,,,,,,,,,,,,,,,,,,,,,450,450,450,450,450,450,450,450',
'450,450,450,450,450,450,,,450,450,450,,,450,,,450,,,450,450,,450,,450',
',450,,450,450,,450,450,450,450,450,,450,450,450,,,,,,,,,,,,,,450,,,450',
'450,450,450,,450,,450,,644,644,644,450,644,,,,644,644,,,,644,,644,644',
'644,644,644,644,644,,,,,,644,644,644,644,644,644,644,,,644,,,,,,,644',
',,644,644,644,644,644,644,644,644,,644,644,644,,644,644,644,644,644',
',,,,,,,,,,,,,,,,,,,644,,,644,,,644,644,,,644,,,,,,644,,,,,,,,,644,,',
',,644,644,644,644,,644,644,644,644,,,,,644,644,,,,,,,644,,644,644,644',
',,644,644,643,643,643,643,643,,,,643,643,,,,643,,643,643,643,643,643',
'643,643,,,,,,643,643,643,643,643,643,643,,,643,,,,,,643,643,,643,643',
'643,643,643,643,643,643,643,,643,643,643,,643,643,643,643,643,,,,,,',
',,,,,,,,,,,,,643,,,643,,,643,643,,,643,,643,,,,643,,,,,,,,,643,,,,,643',
'643,643,643,,643,643,643,643,,,,,643,643,,,,640,640,640,643,640,643',
'643,643,640,640,643,643,,640,,640,640,640,640,640,640,640,,,,,,640,640',
'640,640,640,640,640,,,640,,,,,,,640,,,640,640,640,640,640,640,640,640',
'640,640,640,640,,640,640,640,640,640,,,,,,,,,,,,,,,,,,,,640,,,640,,',
'640,640,,,640,,640,,640,,640,,,640,,,,,,640,,,,,640,640,640,640,,640',
'640,640,640,,,,,640,640,,,,639,639,639,640,639,640,640,640,639,639,640',
'640,,639,,639,639,639,639,639,639,639,,,,,,639,639,639,639,639,639,639',
',,639,,,,,,,639,,,639,639,639,639,639,639,639,639,,639,639,639,,639',
'639,639,639,639,,,,,,,,,,,,,,,,,,,,639,,,639,,,639,639,,,639,,,,,,639',
',,,,,,,,639,,,,,639,639,639,639,,639,639,639,639,,,,,639,639,,,,638',
'638,638,639,638,639,639,639,638,638,639,639,,638,,638,638,638,638,638',
'638,638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638',
'638,638,638,638,638,,638,638,638,,638,638,638,638,638,,,,,,,,,,,,,,',
',,,,,638,,,638,,,638,638,,,638,,638,,,,638,,,,,,,,,638,,,,,638,638,638',
'638,,638,638,638,638,,,,,638,638,,,,538,538,538,638,538,638,638,638',
'538,538,638,638,,538,,538,538,538,538,538,538,538,,,,,,538,538,538,538',
'538,538,538,,,538,,,,,,,538,,,538,538,538,538,538,538,538,538,,538,538',
'538,,538,538,538,538,538,,,,,,,,,,,,,,,,,,,,538,,,538,,,538,538,,,538',
',,,,,538,,,,,,,,,538,,,,,538,538,538,538,,538,538,538,538,,,,,538,538',
',,,,,,538,,538,538,538,,,538,538,636,636,636,636,636,,,,636,636,,,,636',
',636,636,636,636,636,636,636,,,,,,636,636,636,636,636,636,636,,,636',
',,,,,636,636,,636,636,636,636,636,636,636,636,636,,636,636,636,,636',
'636,636,636,636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636,,636,,',
',636,,,,,,,,,636,,,,,636,636,636,636,,636,636,636,636,,,,,636,636,,',
',854,854,854,636,854,636,636,636,854,854,636,636,,854,,854,854,854,854',
'854,854,854,,,,,,854,854,854,854,854,854,854,,,854,,,,,,,854,,,854,854',
'854,854,854,854,854,854,,854,854,854,,854,854,854,854,854,,,,,,,,,,',
',,,,,,,,,854,,,854,,,854,854,,,854,,,,,,854,,,,,,,,,854,,,,,854,854',
'854,854,,854,854,854,854,,,,,854,854,,,,462,462,462,854,462,854,854',
'854,462,462,854,854,,462,,462,462,462,462,462,462,462,,,,,,462,462,462',
'462,462,462,462,,,462,,,,,,,462,,,462,462,462,462,462,462,462,462,,462',
'462,462,,462,462,462,462,462,,,,,,,,,,,,,,,,,,,,462,,,462,,,462,462',
',,462,,,,,,462,,,,,,,,,462,,,,,462,462,462,462,,462,462,462,462,,,,',
'462,462,,,,816,816,816,462,816,462,462,462,816,816,462,462,,816,,816',
'816,816,816,816,816,816,,,,,,816,816,816,816,816,816,816,,,816,,,,,',
',816,,,816,816,816,816,816,816,816,816,,816,816,816,,816,816,816,816',
'816,,,,,,,,,,,,,,,,,,,,816,,,816,,,816,816,,,816,,,,,,816,,,,,,,,,816',
',,,,816,816,816,816,,816,816,816,816,,,,,816,816,,,,829,829,829,816',
'829,816,816,816,829,829,816,816,,829,,829,829,829,829,829,829,829,,',
',,,829,829,829,829,829,829,829,,,829,,,,,,,829,,,829,829,829,829,829',
'829,829,829,,829,829,829,,829,829,829,829,829,,,,,,,,,,,,,,,,,,,,829',
',,829,,,829,829,,,829,,,,,,829,,,,,,,,,829,,,,,829,829,829,829,,829',
'829,829,829,,,,,829,829,,,,,,,829,,829,829,829,449,,829,829,,,,449,449',
'449,,,449,449,449,,449,,,,,,,,449,449,449,449,449,,,,,,,,449,449,,449',
'449,449,449,449,,,,,,,,,,,,,,,,,,,,,,,449,449,449,449,449,449,449,449',
'449,449,449,449,449,449,,,449,449,449,,,449,,,449,,,449,449,,449,,449',
',449,,449,449,,449,449,449,449,449,,449,449,449,,,,,,,,,,,,,,449,,,449',
'449,449,449,,449,,449,,544,544,544,449,544,,,,544,544,,,,544,,544,544',
'544,544,544,544,544,,,,,,544,544,544,544,544,544,544,,,544,,,,,,,544',
',,544,544,544,544,544,544,544,544,544,544,544,544,,544,544,544,544,544',
',,,,,,,,,,,,,,,,,,,544,,,544,,,544,544,,,544,,544,,,,544,,,544,,,,,',
'544,,,,,544,544,544,544,,544,544,544,544,,,,,544,544,,,,332,332,332',
'544,332,544,544,544,332,332,544,544,,332,,332,332,332,332,332,332,332',
',,,,,332,332,332,332,332,332,332,,,332,,,,,,,332,,,332,332,332,332,332',
'332,332,332,,332,332,332,,332,332,332,332,332,,,,,,,,,,,,,,,,,,,,332',
',,332,,,332,332,,,332,,,,,,332,,,,,,,,,332,,,,,332,332,332,332,,332',
'332,332,332,,,,,332,332,,,,334,334,334,332,334,332,332,332,334,334,332',
'332,,334,,334,334,334,334,334,334,334,,,,,,334,334,334,334,334,334,334',
',,334,,,,,,,334,,,334,334,334,334,334,334,334,334,,334,334,334,,334',
'334,334,334,334,,,,,,,,,,,,,,,,,,,,334,,,334,334,,334,334,,,334,,,,',
',334,,,,,,,,,334,,,,,334,334,334,334,,334,334,334,334,,,,,334,334,,',
',605,605,605,334,605,334,334,334,605,605,334,334,,605,,605,605,605,605',
'605,605,605,,,,,,605,605,605,605,605,605,605,,,605,,,,,,,605,,,605,605',
'605,605,605,605,605,605,605,605,605,605,,605,605,605,605,605,,,,,,,',
',,,,,,,,,,,,605,,,605,,,605,605,,,605,,605,,605,,605,,,605,,,,,,605',
',,,,605,605,605,605,,605,605,605,605,,,,,605,605,,,,547,547,547,605',
'547,605,605,605,547,547,605,605,,547,,547,547,547,547,547,547,547,,',
',,,547,547,547,547,547,547,547,,,547,,,,,,,547,,,547,547,547,547,547',
'547,547,547,547,547,547,547,,547,547,547,547,547,,,,,,,,,,,,,,,,,,,',
'547,,,547,,,547,547,,,547,,,,,,547,,,547,,,,,,547,,,,,547,547,547,547',
',547,547,547,547,,,,,547,547,,,,595,595,595,547,595,547,547,547,595',
'595,547,547,,595,,595,595,595,595,595,595,595,,,,,,595,595,595,595,595',
'595,595,,,595,,,,,,,595,,,595,595,595,595,595,595,595,595,595,595,595',
'595,,595,595,595,595,595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,595,,,595',
',595,,595,,595,,,595,,,,,,595,,,,,595,595,595,595,,595,595,595,595,',
',,,595,595,,,,594,594,594,595,594,595,595,595,594,594,595,595,,594,',
'594,594,594,594,594,594,594,,,,,,594,594,594,594,594,594,594,,,594,',
',,,,,594,,,594,594,594,594,594,594,594,594,,594,594,594,,594,594,594',
'594,594,,,,,,,,,,,,,,,,,,,,594,,,594,,,594,594,,,594,,594,,,,594,,,',
',,,,,594,,,,,594,594,594,594,,594,594,594,594,,,,,594,594,,,,830,830',
'830,594,830,594,594,594,830,830,594,594,,830,,830,830,830,830,830,830',
'830,,,,,,830,830,830,830,830,830,830,,,830,,,,,,,830,,,830,830,830,830',
'830,830,830,830,,830,830,830,,830,830,830,830,830,,,,,,,,,,,,,,,,,,',
',830,,,830,,,830,830,,,830,,,,,,830,,,,,,,,,830,,,,,830,830,830,830',
',830,830,830,830,,,,,830,830,,,,250,250,250,830,250,830,830,830,250',
'250,830,830,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250,250',
'250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250,250',
',250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,',
',,,250,,,,,,,,,250,,,,,250,250,250,250,,250,250,250,250,,,,,250,250',
',,,831,831,831,250,831,250,250,250,831,831,250,250,,831,,831,831,831',
'831,831,831,831,,,,,,831,831,831,831,831,831,831,,,831,,,,,,,831,,,831',
'831,831,831,831,831,831,831,,831,831,831,,831,831,831,831,831,,,,,,',
',,,,,,,,,,,,,831,,,831,,,831,831,,,831,,,,,,831,,,,,,,,,831,,,,,831',
'831,831,831,,831,831,831,831,,,,,831,831,,,,832,832,832,831,832,831',
'831,831,832,832,831,831,,832,,832,832,832,832,832,832,832,,,,,,832,832',
'832,832,832,832,832,,,832,,,,,,,832,,,832,832,832,832,832,832,832,832',
',832,832,832,,832,832,832,832,832,,,,,,,,,,,,,,,,,,,,832,,,832,,,832',
'832,,,832,,,,,,832,,,,,,,,,832,,,,,832,832,832,832,,832,832,832,832',
',,,,832,832,,,,573,573,573,832,573,832,832,832,573,573,832,832,,573',
',573,573,573,573,573,573,573,,,,,,573,573,573,573,573,573,573,,,573',
',,,,,,573,,,573,573,573,573,573,573,573,573,,573,573,573,,573,573,573',
'573,573,,,,,,,,,,,,,,,,,,,,573,,,573,,,573,573,,,573,,,,,,573,,,,,,',
',,573,,,,,573,573,573,573,,573,573,573,573,,,,,573,573,,,,351,351,351',
'573,351,573,573,573,351,351,573,573,,351,,351,351,351,351,351,351,351',
',,,,,351,351,351,351,351,351,351,,,351,,,,,,,351,,,351,351,351,351,351',
'351,351,351,,351,351,351,,351,351,351,351,351,,,,,,,,,,,,,,,,,,,,351',
',,351,,,351,351,,,351,,,,,,351,,,,,,,,,351,,,,,351,351,351,351,,351',
'351,351,351,,,,,351,351,,,,,,,351,,351,351,351,489,,351,351,,,,489,489',
'489,,,489,489,489,862,489,862,862,862,862,862,,,489,489,489,,,,862,',
',,,,489,489,,489,489,489,489,489,1142,,1142,1142,1142,1142,1142,995',
'862,995,995,995,995,995,,1142,,862,862,862,862,,995,,862,,1048,,1048',
'1048,1048,1048,1048,489,,,,1142,,,489,1048,,,995,489,489,,1142,1142',
'862,,,1142,,995,995,,,,995,,,1048,,,,,489,489,,,1048,1048,1048,1048',
',,,1048,,,,489,,,489,,463,463,463,489,463,,,,463,463,489,,,463,,463',
'463,463,463,463,463,463,,,,,,463,463,463,463,463,463,463,,,463,,,,,',
',463,,,463,463,463,463,463,463,463,463,,463,463,463,,463,463,463,463',
'463,,,,,,,,,,,,,,,,,,,,463,,,463,,,463,463,,,463,,,,,,463,,,,,,,,,463',
',,,,463,463,463,463,,463,463,463,463,,,,,463,463,,,,,,,463,,463,463',
'463,440,,463,463,,,,440,440,440,,,440,440,440,,440,,,,,,,,440,440,440',
'440,,,,,,,,,440,440,,440,440,440,440,440,,,,,,,,,,,,,,,,,,,,,,,440,440',
'440,440,440,440,440,440,440,440,440,440,440,440,,,440,440,440,,,440',
',440,440,,,440,440,,440,,440,,440,,440,440,,440,440,440,440,440,,440',
'440,440,,,,,,,,,,,,,,440,,,440,440,,440,,440,748,748,748,,748,,440,',
'748,748,,,,748,,748,748,748,748,748,748,748,,,,,,748,748,748,748,748',
'748,748,,,748,,,,,,,748,,,748,748,748,748,748,748,748,748,,748,748,748',
',748,748,748,748,748,,,,,,,,,,,,,,,,,,,,748,,,748,,,748,748,,,748,,',
',,,748,,,,,,,,,748,,,,,748,748,748,748,,748,748,748,748,,,,,748,748',
',,,20,20,20,748,20,748,748,748,20,20,748,748,,20,,20,20,20,20,20,20',
'20,,,,,,20,20,20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20',
',20,20,20,,20,20,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,',
',,,20,,,,,,,,,20,,,,,20,20,20,20,,20,20,20,20,,,,,20,20,,,,494,494,494',
'20,494,20,20,20,494,494,20,20,,494,,494,494,494,494,494,494,494,,,,',
',494,494,494,494,494,494,494,,,494,,,,,,,494,,,494,494,494,494,494,494',
'494,494,,494,494,494,,494,494,494,494,494,,,,,,,,,,,,,,,,,,,,494,,,494',
',,494,494,,,494,,,,,,494,,,,,,,,,494,,,,,494,494,494,494,,494,494,494',
'494,,,,,494,494,,,,461,461,461,494,461,494,494,494,461,461,494,494,',
'461,,461,461,461,461,461,461,461,,,,,,461,461,461,461,461,461,461,,',
'461,,,,,,,461,,,461,461,461,461,461,461,461,461,,461,461,461,,461,461',
'461,461,461,,,,,,,,,,,,,,,,,,,,461,,,461,,,461,461,,,461,,,,,,461,,',
',,,,,,461,,,,,461,461,461,461,,461,461,461,461,,,,,461,461,,,,711,711',
'711,461,711,461,461,461,711,711,461,461,,711,,711,711,711,711,711,711',
'711,,,,,,711,711,711,711,711,711,711,,,711,,,,,,,711,,,711,711,711,711',
'711,711,711,711,,711,711,711,,711,711,711,711,711,,,,,,,,,,,,,,,,,,',
',711,,,711,,,711,711,,,711,,,,,,711,,,,,,,,,711,,,,,711,711,711,711',
',711,711,711,711,,,,,711,711,,,,708,708,708,711,708,711,711,711,708',
'708,711,711,,708,,708,708,708,708,708,708,708,,,,,,708,708,708,708,708',
'708,708,,,708,,,,,,,708,,,708,708,708,708,708,708,708,708,,708,708,708',
',708,708,708,708,708,,,,,,,,,,,,,,,,,,,,708,,,708,,,708,708,,,708,,',
',,,708,,,,,,,,,708,,,,,708,708,708,708,,708,708,708,708,,,,,708,708',
',,,,,,708,,708,708,708,27,,708,708,,,,27,27,27,,,27,27,27,,27,,,,,,',
',27,27,27,27,,,,,,,,,27,27,,27,27,27,27,27,,,,,,,,,,,,,,,,,,,,,,,27',
'27,27,27,27,27,27,27,27,27,27,27,27,27,,,27,27,27,,,27,,27,27,,,27,27',
',27,,27,,27,,27,27,,27,27,27,27,27,28,27,27,27,,,,28,28,28,,,28,28,28',
',28,27,,,27,27,,27,28,27,28,28,,,,,27,,,,28,28,,28,28,28,28,28,,,,,',
',,,,,,,,,,,,,,,,,28,28,28,28,28,28,28,28,28,28,28,28,28,28,,,28,28,28',
',,28,,28,28,,,28,28,,28,,28,,28,,28,28,,28,28,28,28,28,,28,,28,,,,,',
',,,,,,,,28,,,28,28,,28,,28,29,29,29,,29,,28,,29,29,,,,29,,29,29,29,29',
'29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29,29,29',
'29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29,29',
',,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29,29,,29,29,29,29,,,,,29,29',
',,,30,30,30,29,30,29,29,29,30,30,29,29,,30,,30,30,30,30,30,30,30,,,',
',,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30',
'30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,,30',
',30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,,,,,30,30,,,,31,31,31',
'30,31,30,30,30,31,31,30,30,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31',
'31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31',
'31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,',
',,,31,,,,,31,31,31,31,,31,31,31,31,,,,,31,31,,,,,,,31,,31,31,31,,,31',
'31,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,',
'5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,',
',5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,,,459,459,459',
'5,459,5,5,5,459,459,5,5,,459,,459,459,459,459,459,459,459,,,,,,459,459',
'459,459,459,459,459,,,459,,,,,,,459,,,459,459,459,459,459,459,459,459',
'459,459,459,459,,459,459,459,459,459,,,,,,,,,,,,,,,,,,,,459,,,459,,',
'459,459,,,459,,459,,459,,459,,,459,,,,,,459,,,,,459,459,459,459,,459',
'459,459,459,,,,,459,459,,,,503,503,503,459,503,459,459,459,503,503,459',
'459,,503,,503,503,503,503,503,503,503,,,,,,503,503,503,503,503,503,503',
',,503,,,,,,,503,,,503,503,503,503,503,503,503,503,503,503,503,503,,503',
'503,503,503,503,,,,,,,,,,,,,,,,,,,,503,,,503,,,503,503,,,503,,503,,503',
',503,,,503,,,,,,503,,,,,503,503,503,503,,503,503,503,503,,,,,503,503',
',,,505,505,505,503,505,503,503,503,505,505,503,503,,505,,505,505,505',
'505,505,505,505,,,,,,505,505,505,505,505,505,505,,,505,,,,,,,505,,,505',
'505,505,505,505,505,505,505,505,505,505,505,,505,505,505,505,505,,,',
',,,,,,,,,,,,,,,,505,,,505,,,505,505,,,505,,,,505,,505,,,505,,,,,,505',
',,,,505,505,505,505,,505,505,505,505,,,,,505,505,,,,41,41,41,505,41',
'505,505,505,41,41,505,505,,41,,41,41,41,41,41,41,41,,,,,,41,41,41,41',
'41,41,41,,,41,,,,,,,41,,,41,41,41,41,41,41,41,41,,41,41,41,,41,41,41',
'41,41,,,,,,,,,,,,,,,,,,,,41,,,41,,,41,41,,,41,,,,,,41,,,,,,,,,41,,,',
',41,41,41,41,,41,41,41,41,,,,,41,41,,,,42,42,42,41,42,41,41,41,42,42',
'41,41,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,,,',
',42,,,42,42,42,42,42,42,42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,,,,',
',,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42,42',
'42,42,,,,,42,42,,,,507,507,507,42,507,42,42,42,507,507,42,42,,507,,507',
'507,507,507,507,507,507,,,,,,507,507,507,507,507,507,507,,,507,,,,,',
',507,,,507,507,507,507,507,507,507,507,,507,507,507,,507,507,507,507',
'507,,,,,,,,,,,,,,,,,,,,507,,,507,,,507,507,,,507,,,,,,507,,,,,,,,,507',
',,,,507,507,507,507,,507,507,507,507,,,,,507,507,,,,44,44,44,507,44',
'507,507,507,44,44,507,507,,44,,44,44,44,44,44,44,44,,,,,,44,44,44,44',
'44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44,,44,44,44',
'44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,,,44,,,',
',44,44,44,44,,44,44,44,44,,,,,44,44,,,,45,45,45,44,45,44,44,44,45,45',
'44,44,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,',
',45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,45,45,45,,,,,,,,,,,,',
',,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,,45,,,,,45,45,45,45,,45,45',
'45,45,,,,,45,45,,,,,,,45,,45,45,45,,,45,45,513,513,513,513,513,,,,513',
'513,,,,513,,513,513,513,513,513,513,513,,,,,,513,513,513,513,513,513',
'513,,,513,,,,,,513,513,513,513,513,513,513,513,513,513,513,513,,513',
'513,513,,513,513,513,513,513,,,,,,,,,,,,,,,,,,,,513,,,513,,,513,513',
',,513,,513,,,,513,,,,,,,,,513,,,,,513,513,513,513,,513,513,513,513,',
',,,513,513,,,,,,513,513,,513,513,513,,,513,513,47,47,47,,47,,,,47,47',
',,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47',
',,47,47,47,47,47,47,47,47,,47,47,47,,47,47,47,47,47,,,,,,,,,,,,,,,,',
',,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,,47,,,,,47,47,47,47,,47,47,47',
'47,,,,,47,47,,,,911,911,911,47,911,47,47,47,911,911,47,47,,911,,911',
'911,911,911,911,911,911,,,,,,911,911,911,911,911,911,911,,,911,,,,,',
',911,,,911,911,911,911,911,911,911,911,,911,911,911,,911,911,911,911',
'911,,,,,,,,,,,,,,,,,,,,911,,,911,,,911,911,,,911,,911,,,,911,,,,,,,',
',911,,,,,911,911,911,911,,911,911,911,911,,,,,911,911,,,,,,,911,,911',
'911,911,59,,911,911,,,,59,59,59,,,59,59,59,,59,,,,,,,,59,,59,59,59,',
',,678,678,678,678,59,59,,59,59,59,59,59,,,,,678,678,678,,,,,,,,,,,678',
'678,,,678,59,59,59,59,59,59,59,59,59,59,59,59,59,59,,,59,59,59,,,59',
',,59,,,59,59,,59,,59,,59,,59,59,,59,59,59,59,59,,59,,59,,678,678,678',
'678,,678,678,678,678,,,,59,678,678,59,59,59,59,,59,678,59,678,678,678',
',59,61,61,61,61,61,,,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61,61,61',
'61,61,61,61,,,61,,,,,,61,61,,61,61,61,61,61,61,61,61,61,,61,61,61,,61',
'61,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,61,,,,61,,,,,,',
',,61,,,,,61,61,61,61,,61,61,61,61,,,,,61,61,,,,62,62,62,61,62,61,61',
'61,62,62,61,61,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,',
',62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62,62,62,62,62,',
',,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,62,,,,,,62,,,,,62',
'62,62,62,,62,62,62,62,,,,,62,62,,,,63,63,63,62,63,62,62,62,63,63,62',
'62,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63',
',,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,63,63,63,,,,,,,,,,,,,,',
',,,,,63,,,63,,,63,63,,,63,,,,,,63,,,63,,,,,,63,,,,,63,63,63,63,,63,63',
'63,63,,,,,63,63,,,,66,66,66,63,66,63,63,63,66,66,63,63,,66,,66,66,66',
'66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66,66,66',
'66,66,66,,66,66,66,,66,66,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66',
',,66,,,,,,66,,,,,,,,,66,,,,,66,66,66,66,,66,66,66,66,,,,,66,66,,,,67',
'67,67,66,67,66,66,66,67,67,66,66,,67,,67,67,67,67,67,67,67,,,,,,67,67',
'67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67',
'67,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,',
'67,,,,,67,67,67,67,,67,67,67,67,,,,,67,67,,,,323,323,323,67,323,67,67',
'67,323,323,67,67,,323,,323,323,323,323,323,323,323,,,,,,323,323,323',
'323,323,323,323,,,323,,,,,,,323,,,323,323,323,323,323,323,323,323,,323',
'323,323,,323,323,,,323,,,,,,,,,,,,,,,,,,,,323,,,323,,,323,323,,,323',
',,,,,,,,,,,,,,,,,,,323,323,323,323,,323,323,323,323,,,,,323,323,,,,725',
'725,725,323,725,323,323,323,725,725,,,,725,,725,725,725,725,725,725',
'725,,,,,,725,725,725,725,725,725,725,,,725,,,,,,,725,,,725,725,725,725',
'725,725,725,725,,725,725,725,,725,725,,,725,,,,,,,,,,,,,,,,,,,,725,',
',725,,,725,725,,,725,,,,,,,,,,,,,,,,,,,,725,725,725,725,,725,725,725',
'725,,,,,725,725,,,,714,714,714,725,714,725,725,725,714,714,,,,714,,714',
'714,714,714,714,714,714,,,,,,714,714,714,714,714,714,714,,,714,,,,,',
',714,,,714,714,714,714,714,714,714,714,,714,714,714,,714,714,,,714,',
',,,,,,,,,,,,,,,,,,714,,,714,,,714,714,,,714,,,,,,,,,,,,,,,,,,,,714,714',
'714,714,,714,714,714,714,,,,,714,714,,,,34,34,34,714,34,714,714,714',
'34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,',
',,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,,34,,,,,,,,,,,,,,',
',,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34,34,34,,34,34,34',
'34,,,,,34,34,,,,35,35,35,34,35,34,34,34,35,35,,,,35,,35,35,35,35,35',
'35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35,35,35,35',
'35,,35,35,35,,35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,,746',
',746,746,746,746,746,,,,,,,,,746,,35,35,35,35,,35,35,35,35,,,,,35,35',
',,,35,,746,35,,35,35,35,71,71,71,,71,746,746,,71,71,746,,,71,,71,71',
'71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71',
'71,71,71,71,,71,71,71,,71,71,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71',
',,71,,71,,,,,,,,,,,,,,,,,,71,71,71,71,,71,71,71,71,,,,,71,71,,,,72,72',
'72,71,72,71,71,71,72,72,,,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72',
'72,72,72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,',
'72,,,,,,,,,,,,,,,,,72,,,72,,,72,,,72,72,,,72,,,,,,,,,,,,,,,,,,,,72,72',
'72,72,,72,72,72,72,,,,,72,72,,,,73,73,73,72,73,72,72,72,73,73,,,,73',
',73,73,73,73,73,73,73,,,,,,73,73,73,73,73,73,73,,,73,,,,,,,73,,,73,73',
'73,73,73,73,73,73,,73,73,73,,73,73,,,73,,,,,,,,,,,,,,,,,,,,73,,,73,',
',73,73,,,73,,,,,,,,,,,,,,,,,,,,73,73,73,73,,73,73,73,73,,,,,73,73,,',
',306,306,306,73,306,73,73,73,306,306,,,,306,,306,306,306,306,306,306',
'306,,,,,,306,306,306,306,306,306,306,,,306,,,,,,,306,,,306,306,306,306',
'306,306,306,306,,306,306,306,,306,306,,,306,,,,,,,,,,,,,,,,,,,,306,',
',306,,,306,306,,,306,,,1140,,1140,1140,1140,1140,1140,,,,,,,,,1140,',
'306,306,306,306,,306,306,306,306,,,,,306,306,,,,306,,1140,306,,306,306',
'306,1056,1056,1056,,1056,1140,1140,,1056,1056,1140,,,1056,,1056,1056',
'1056,1056,1056,1056,1056,,,,,,1056,1056,1056,1056,1056,1056,1056,,,1056',
',,,,,,1056,,,1056,1056,1056,1056,1056,1056,1056,1056,,1056,1056,1056',
',1056,1056,,,1056,,,,,,,,,,,,,,,,,,,,1056,,,1056,,,1056,1056,,,1056',
',,,,,,,,,,,,,,,,,,,1056,1056,1056,1056,,1056,1056,1056,1056,,,,,1056',
'1056,,,,529,529,529,1056,529,1056,1056,1056,529,529,,,,529,,529,529',
'529,529,529,529,529,,,,,,529,529,529,529,529,529,529,,,529,,,,,,,529',
',,529,529,529,529,529,529,529,529,,529,529,529,,529,529,,,529,,,,,,',
',,,,,,,,,,,,,529,,,529,,,529,529,,,529,,,,,,,,,,,,,,,,,,,,529,529,529',
'529,,529,529,529,529,,,,,529,529,,,,521,521,521,529,521,529,529,529',
'521,521,,,,521,,521,521,521,521,521,521,521,,,,,,521,521,521,521,521',
'521,521,,,521,,,,,,,521,,,521,521,521,521,521,521,521,521,,521,521,521',
',521,521,,,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521,,,,,,,,',
',,,,,,,,,,,521,521,521,521,,521,521,521,521,,,,,521,521,,,,984,984,984',
'521,984,521,521,521,984,984,,,,984,,984,984,984,984,984,984,984,,,,',
',984,984,984,984,984,984,984,,,984,,,,,,,984,,,984,984,984,984,984,984',
'984,984,,984,984,984,,984,984,,,984,,,,,,,,,,,,,,,,,,,,984,,,984,,,984',
'984,,,984,,,,,,,,,,,,,,,,,,,,984,984,984,984,,984,984,984,984,,,,,984',
'984,,,,975,975,975,984,975,984,984,984,975,975,,,,975,,975,975,975,975',
'975,975,975,,,,,,975,975,975,975,975,975,975,,,975,,,,,,,975,,,975,975',
'975,975,975,975,975,975,,975,975,975,,975,975,,,975,,,,,,,,,,,,,,,,',
',,,975,,,975,,,975,975,,,975,,,,,,,,,,,,,,,,,,,,975,975,975,975,,975',
'975,975,975,,,,,975,975,,,,,,,975,,975,975,975,407,407,407,407,407,407',
'407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407',
'407,,,,407,407,407,407,407,407,407,407,407,407,,,,,,407,407,407,407',
'407,407,407,407,407,,,407,,,,,,,,407,407,,407,407,407,407,407,407,407',
',,407,407,,,,407,407,407,407,,,,,,,,,,,,,,407,407,,407,407,407,407,407',
'407,407,407,407,407,407,407,,,407,407,,,,,,,,,,,,,,407,634,634,634,634',
'634,634,634,634,634,634,634,634,634,634,634,634,634,634,634,634,634',
'634,634,634,,,,634,634,634,634,634,634,634,634,634,634,,,,,,634,634',
'634,634,634,634,634,634,634,,,634,,,,,,,,634,634,,634,634,634,634,634',
'634,634,,,634,634,,,,634,634,634,634,,,,,,,,,,,,,,634,634,,634,634,634',
'634,634,634,634,634,634,634,634,634,,,634,634,,,,,,,,,,,,,,634,9,9,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,',
',,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,',
',,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,8,8,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,',
',,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8',
',,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,1092,1092,1092,1092',
',,,,,,,,,8,,,1092,1092,1092,1092,,,1138,1092,1138,1138,1138,1138,1138',
'1092,1092,,,1092,,,,1138,,,,,,,,,,,,,,,,1092,,,1092,,,1138,1092,,,1092',
',,,,1138,1138,1138,1138,,,,1138,,,,1092,,,,1092,1092,1092,1092,,1092',
'1092,1092,1092,,,,,1092,1092,1083,1083,1083,1083,,,1092,,1092,1092,1092',
',,1092,1092,,1083,1083,1083,1083,,,991,1083,991,991,991,991,991,1083',
'1083,,,1083,,,,991,,,,,,,,,,,,,,,,1083,,,1083,,,991,1083,,,1083,,1083',
',,991,991,991,991,,,,991,,,,1083,,,,1083,1083,1083,1083,,1083,1083,1083',
'1083,,,,,1083,1083,1091,1091,1091,1091,,,1083,,1083,1083,1083,,,1083',
'1083,,1091,1091,1091,1091,,,552,1091,552,552,552,552,552,1091,1091,',
',1091,,,,552,,,,,,,,,,,,,,,,1091,,,1091,,,552,1091,,,1091,,,,,552,552',
'552,552,,,,552,,,,1091,,,,1091,1091,1091,1091,,1091,1091,1091,1091,',
',,,1091,1091,835,835,835,835,,,1091,,1091,1091,1091,,,1091,1091,,835',
'835,835,835,,,1121,835,1121,1121,1121,1121,1121,835,835,,,835,,,,1121',
',,,,,,,,,,,,,,,835,,,835,,,1121,835,,,835,,,,,,,1121,1121,,,,1121,,',
',835,,,,835,835,835,835,,835,835,835,835,,,,,835,835,,,,,,,835,,835',
'835,835,,,835,835,791,791,791,791,791,791,791,791,791,791,791,791,791',
'791,791,791,791,791,791,791,791,791,791,791,,,,791,791,791,791,791,791',
'791,791,791,791,,,,,,791,791,791,791,791,791,791,791,791,,,791,,,,,',
',,791,791,,791,791,791,791,791,791,791,,,791,791,,,,791,791,791,791',
',,,,,,,,,,,,,791,791,,791,791,791,791,791,791,791,791,791,791,791,791',
',,791,910,910,910,910,,,997,,997,997,997,997,997,,,,910,910,910,910',
',997,,910,910,,,,,910,910,,,910,910,,,,,,,,,997,,,,,,,,,,910,997,997',
'910,,,997,910,,,910,,910,,,,,,,910,,,,,,,910,,,,910,910,910,910,,910',
'910,910,910,,,,,910,910,464,464,464,464,,,910,,910,910,910,,,910,910',
',464,464,464,464,,,1050,464,1050,1050,1050,1050,1050,464,464,,,464,',
',,1050,,,,,,,,,,,,,,,,464,,,464,,,1050,464,,,464,,,,,1050,1050,1050',
'1050,,,,1050,,,,464,,,,464,464,464,464,,464,464,464,464,,,,,464,464',
',,,,,,464,,464,464,464,,,464,464,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,74,,,,74,74,74,74,74,74,74,74,74,74',
',,,,,74,74,74,74,74,74,74,74,74,74,74,74,,74,,,,,,74,74,,74,74,74,74',
'74,74,74,,,74,74,,,,74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74',
'74,74,74,74,74,74,74,,,74,1133,1133,1133,1133,,,1052,,1052,1052,1052',
'1052,1052,,,,1133,1133,1133,1133,,1052,,1133,,,,,,1133,1133,,,1133,',
',,,,,,,,1052,,,,,,,,,,1133,1052,1052,1133,,,1052,1133,,,1133,,,,,,,',
',,,,,,,,1133,,,,1133,1133,1133,1133,,1133,1133,1133,1133,,,,,1133,1133',
'1136,1136,1136,1136,,,1133,,1133,1133,1133,,,1133,1133,,1136,1136,1136',
'1136,,,790,1136,790,790,790,790,790,1136,1136,,,1136,,,,790,,,,,,,,',
',,,,,,,1136,,,1136,,,790,1136,,,1136,,,,,790,790,790,790,,,,790,,,,1136',
',,,1136,1136,1136,1136,,1136,1136,1136,1136,,,,,1136,1136,948,948,948',
'948,,,1136,,1136,1136,1136,,,1136,1136,,948,948,948,948,,,1171,948,1171',
'1171,1171,1171,1171,948,948,,,948,,,,1171,,,,,,,,,,,,,,,,948,,,948,',
',1171,948,,,948,,,,,,,1171,1171,,,,1171,,,,948,,,,948,948,948,948,,948',
'948,948,948,,,,,948,948,940,940,940,940,,,948,,948,948,948,,,948,948',
',940,940,940,940,,,1144,940,1144,1144,1144,1144,1144,940,940,,,940,',
',,1144,,,,,,,,,,,,,,,,940,,,940,,,1144,940,,,940,,940,,,,,1144,1144',
',,,1144,,,,940,,,,940,940,940,940,,940,940,940,940,,,,,940,940,838,838',
'838,838,,,940,,940,940,940,,,940,940,,838,838,838,838,,,,838,838,,,',
',838,838,,,838,838,,,,,,,,,,,,,,,,,,,838,,,838,,,,838,,,838,,838,,,',
',,,838,,,,,,,838,,,,838,838,838,838,,838,838,838,838,,,,,838,838,839',
'839,839,839,,,838,,838,838,838,,,838,838,,839,839,839,839,,,,839,839',
',,,,839,839,,,839,839,,,,,,,,,,,,,,,,,,,839,,,839,,,,839,,,839,,839',
',,,,,,839,,,,,,,839,,,,839,839,839,839,,839,839,839,839,,,,,839,839',
'1031,1031,1031,1031,,,839,,839,839,839,,,839,839,,1031,1031,1031,1031',
',,742,1031,742,742,742,742,742,1031,1031,,,1031,,,,742,,,,,,,,,,,,,',
',,1031,,,1031,,,742,1031,,,1031,,,,,742,742,742,742,,,,742,,,,1031,',
',,1031,1031,1031,1031,,1031,1031,1031,1031,,,,,1031,1031,841,841,841',
'841,,,1031,,1031,1031,1031,,,1031,1031,,841,841,841,841,,,993,841,993',
'993,993,993,993,841,841,,,841,,,,993,,,,,,,,,,,,,,,,841,,,841,,,993',
'841,,,841,,841,,,,,993,993,,,,993,,,,841,,,,841,841,841,841,,841,841',
'841,841,,,,,841,841,845,845,845,845,,,841,,841,841,841,,,841,841,,845',
'845,845,845,,,,845,,,,,,845,845,,,845,,,,,,,,847,847,847,847,,,,,,,',
',845,,,845,847,847,847,845,,,845,,,,,,,847,847,,,847,,,,,845,,,,845',
'845,845,845,,845,845,845,845,,,,,845,845,,,,,,,845,,845,845,845,,,845',
'845,,,,,,,,,,,,847,847,847,847,,847,847,847,847,,,,,847,847,677,677',
'677,677,,,847,,847,847,847,,,,,,677,677,677,457,457,,,457,,,,,,677,677',
'457,457,677,457,457,457,457,457,457,457,,,457,457,,,,457,457,457,457',
',,,,,457,,,,,,,,457,457,,457,457,457,457,457,457,457,457,457,457,457',
'457,,,457,677,677,677,677,,677,677,677,677,,,,,677,677,524,524,,,524',
',677,,677,677,677,,524,524,,524,524,524,524,524,524,524,,,524,524,,',
',524,524,524,524,,,,,,524,,,,,,,,524,524,,524,524,524,524,524,524,524',
'524,524,524,524,524,525,525,524,,525,,,,,,,,525,525,,525,525,525,525',
'525,525,525,,,525,525,,,,525,525,525,525,,,,,,525,,,,,,,,525,525,,525',
'525,525,525,525,525,525,525,525,525,525,525,218,218,525,,218,,,,,,,',
'218,218,,218,218,218,218,218,218,218,,,218,218,,,,218,218,218,218,,',
',,,218,,,,,,,,218,218,,218,218,218,218,218,218,218,218,218,218,218,218',
'642,642,218,,642,,,,,,,,642,642,,642,642,642,642,642,642,642,,,642,642',
',,,642,642,642,642,,,,,,642,,,,,,,,642,642,,642,642,642,642,642,642',
'642,642,642,642,642,642,267,267,642,,267,,,,,,,,267,267,,267,267,267',
'267,267,267,267,,,267,267,,,,267,267,267,267,,,,,,,,,,,,,,267,267,,267',
'267,267,267,267,267,267,267,267,267,267,267,1110,1110,267,,1110,,,,',
',,,1110,1110,,1110,1110,1110,1110,1110,1110,1110,,,1110,1110,,,,1110',
'1110,1110,1110,,,,,,1110,,,,,,,,1110,1110,,1110,1110,1110,1110,1110',
'1110,1110,1110,1110,1110,1110,1110,1114,1114,1110,,1114,,,,,,,,1114',
'1114,,1114,1114,1114,1114,1114,1114,1114,,,1114,1114,,,,1114,1114,1114',
'1114,,,,,,1114,,,,,,,,1114,1114,,1114,1114,1114,1114,1114,1114,1114',
'1114,1114,1114,1114,1114,533,533,1114,,533,,,,,,,,533,533,,533,533,533',
'533,533,533,533,,,533,533,,,,533,533,533,533,,,,,,533,,,,,,,,533,533',
',533,533,533,533,533,533,533,533,533,533,533,533,534,534,533,,534,,',
',,,,,534,534,,534,534,534,534,534,534,534,,,534,534,,,,534,534,534,534',
',,,,,534,,,,,,,,534,534,,534,534,534,534,534,534,534,534,534,534,534',
'534,597,597,534,,597,,,,,,,,597,597,,597,597,597,597,597,597,597,,,597',
'597,,,,597,597,597,597,,,,,,597,,,,,,,,597,597,,597,597,597,597,597',
'597,597,597,597,597,597,597,641,641,597,,641,,,,,,,,641,641,,641,641',
'641,641,641,641,641,,,641,641,,,,641,641,641,641,,,,,,641,,,,,,,,641',
'641,,641,641,641,641,641,641,641,641,641,641,641,641,603,603,641,,603',
',,,,,,,603,603,,603,603,603,603,603,603,603,,,603,603,,,,603,603,603',
'603,,,,,,603,,,,,,,,603,603,,603,603,603,603,603,603,603,603,603,603',
'603,603,217,217,603,,217,,,,,,,,217,217,,217,217,217,217,217,217,217',
',,217,217,,,,217,217,217,217,,,,,,217,,,,,,,,217,217,,217,217,217,217',
'217,217,217,217,217,217,217,217,596,596,217,,596,,,,,,,,596,596,,596',
'596,596,596,596,596,596,,,596,596,,,,596,596,596,596,,,,,,596,,,,,,',
',596,596,,596,596,596,596,596,596,596,596,596,596,596,596,604,604,596',
',604,,,,,,,,604,604,,604,604,604,604,604,604,604,,,604,604,,,,604,604',
'604,604,,,,,,604,,,,,,,,604,604,,604,604,604,604,604,604,604,604,604',
'604,604,604,1115,1115,604,,1115,,,,,,,,1115,1115,,1115,1115,1115,1115',
'1115,1115,1115,,,1115,1115,,,,1115,1115,1115,1115,,,,,,1115,,,,,,,,1115',
'1115,,1115,1115,1115,1115,1115,1115,1115,1115,1115,1115,1115,1115,458',
'458,1115,,458,,,,,,,,458,458,,458,458,458,458,458,458,458,,,458,458',
',,,458,458,458,458,,,,,,458,,,,,,,,458,458,,458,458,458,458,458,458',
'458,458,458,458,458,458,,347,458,347,347,347,347,347,,744,,744,744,744',
'744,744,347,,,,,,,,744,,,,,,,,,,,,,,347,347,,,,,,,744,347,347,347,347',
',,,347,744,744,744,744,,,,744' ]
        racc_action_check = arr = ::Array.new(27126, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  3972,  1322,   nil,   406,   nil, 19401,  1653,  1152, 24045, 23917,
  1151,   nil,  1117,  1116,   465,  1159,   931,   549,   nil,   -72,
 18087,  1236,  1217,   nil,   281,   nil,   301, 18752, 18862, 18996,
 19127, 19258,   nil,  2964, 22196, 22327,   nil,  1110,   501,   447,
  1179, 19925, 20056,   241, 20318, 20449,   714, 20735,  1096,   705,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 21007,
   nil, 21148, 21279, 21410,   -13,   nil, 21541, 21672,   nil,   nil,
  5111, 22466, 22597, 22728, 24890,   nil,   nil,   nil,   nil,   nil,
   922,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   110,   nil,   nil,   664,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1222,   nil,  5790,   nil,   nil,   nil,
   nil,  5933,  6064,  6195,  6326,  6469,   nil,  2100,   nil,   616,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1085,   nil,
  2676,  6600,  6731,  6862,  6993,  7124,  7255, 26707, 26097,   nil,
   nil,  7648,  7779,  7910,   nil,   nil,   814,   438,   387,  1161,
   301,  1066,  1120,   nil,  8434,  1668,  1115,   nil,  8696,  8827,
  8958,  9089,  9220,  9351,  9482,  9613,  9744,  9875, 10006, 10137,
 16886, 10399, 10530, 10661, 10792, 10923, 11054, 11185, 11316, 11447,
   nil,   nil,   nil,   nil, 11578,   nil,   nil, 26219,   nil,   nil,
  1107, 11971, 12102,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 12233,   nil,  1812,   nil,  1046,  1042,   nil, 12626,  1084, 12757,
   nil,   nil, 12888, 13019,   nil,   nil,   -76,   nil, 13293,  1797,
  1058,  1021,  4260,  1034,  1073,   996, 22859,  4980,   937,   964,
  1081,  1064,  1236,   nil,  1029,   987,   249,   nil,   nil,   nil,
  1027,   249,   971, 21803,   nil,   333,  1422,  2532,  4404,  1035,
   nil,  1033, 15969,   nil, 16100,  3108,  1509,   950,   nil,   594,
   360,   984,   961,   264,   975,   nil,   nil, 27013,   771,   -10,
   109, 17410,  4548,  4836,    72,  1038,   911,    39,   -18,  1380,
   989,    40,  1018,   nil,   nil,   939,   672,   564,   nil,  1085,
   nil,   930, 10268,   nil,   nil,   nil,   818,   815,   -55,   716,
   639,   638,   637,   602,   340,   nil,   308,   nil, 13150,   nil,
   373,   382,   434,   485,   488,   -45,   -34,   440,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   922, 23661,   nil,   nil,
   nil,   nil,   918,   nil,   986,   887,  5647,   886,   nil,   nil,
   828,   nil,   941,   -56,   929,   nil,   nil,  1380,   nil,   nil,
   nil,   nil,   nil,  1524,   831,   nil,   807,   802,   251,   174,
 17822,   nil,   nil,   nil,   332,   803,   839,   nil,   nil, 15701,
 14089,   nil,   nil,   nil,   191,   nil,   827, 25896, 26951, 19532,
   -85, 18349, 15298, 17681, 24747,  2820,  4116,   924,   987,   824,
   822,   818,   801,  4836,  4692,  4548,  3684,  3540,  3252,  3108,
  2964,  2676,  2651,  2560,  3828,  3972,  1668,  4260,   nil, 17551,
   nil,   nil,   nil,   nil, 18218,   725,   719,   nil,   nil,   nil,
   718,   nil,   nil, 19663,   nil, 19794,   nil, 20187,   nil,   585,
   nil,   nil,   nil, 20592,  1365,   nil,   703,   698,   nil,   nil,
   693, 23260,   694,  8041, 25975, 26036,  1075,   636,   nil, 23129,
   579,   nil, 12495, 26402, 26463, 13948,  3396,  2100, 14893,   676,
   661,   528,   563,   nil, 15838,   nil,   nil, 16362,   nil,   nil,
   nil,   nil, 24328,   nil,   510,   485,   470,   nil,   465,   455,
   410,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   364,
  2403,   nil,   nil, 17279,   nil,   nil,   nil,    -5,   nil,   nil,
   nil,   404,   nil,   nil,   377,  1236,   400,   nil,  1092,    90,
   377,   368,   175,   342, 16624, 16493, 26768, 26524,    31,   nil,
   nil,   636,   nil, 26646, 26829, 16231,   nil,   nil,    60,  2532,
   253,   nil,   217,   nil,   nil,   nil,  1219,   nil,   nil,   nil,
   148,   nil,   nil,   302,   nil,   371,   nil,   nil,   122,   nil,
    71,   nil,   nil,   nil, 23789,   nil, 15036,    42, 14762, 14631,
 14500, 26585, 26158, 14369, 14226,   439,    66, 13817, 13686, 12364,
 11840,   -40,   nil,   nil,  8565,  8172,   -69,   nil,   nil,   nil,
   309,   334,   444,   222,  1336,  1374,   nil,  1351,   nil,   nil,
   609,   220,  1327,   nil,   674,   nil,   nil, 25896, 21007,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1371,   262,   nil,  1287,  1408,   nil,  1389,   173,   nil,   nil,
   nil,  1283,  1285,  1384,   nil,  1256,   nil,  1274, 18611,   nil,
   nil, 18480,   nil,   -80, 22065,  1227,   nil,  1220,   246,   233,
  1260,   358,   699,  1259,  1207, 21934,   nil,  1264,   -26,  1309,
  5516,   nil,   nil,   nil,   331,     3,  1202,   757,   nil,   nil,
   618,   nil, 25564,   nil, 27021,   nil, 22374,   nil, 17956,   nil,
  2433,   nil,  1230,  1233,  1143,  1240,   nil,   nil,   nil,   nil,
   nil,   791,   nil,  1363,   nil,   nil,   nil,   nil,   nil,  1378,
  1379,   nil,   nil,    26,  1262,   -19,     8,    -1,    -4,  3684,
  1083,   741,   nil,  1291,  3828,  7517,   nil,  1427,  4692,   551,
 25074, 24566,   nil,   nil,   nil,   nil,   nil,   nil,   948,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -100, 11709,   -50,
   284,   248,   554,     0,   nil,  2244, 15429,   nil,   151,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 15560,
 16755, 17017, 17148,   -51,   370, 24423,   121,   139, 25365, 25463,
   518, 25659,   nil,   871,   nil, 25757,   803, 25798,   nil,   nil,
   nil,   nil,   nil,   nil, 15167,   nil,   557,   nil,   nil,   555,
   nil,   nil, 17515,  1524,   nil,   nil,   nil,   nil,   575,   359,
   nil,   nil,   711,   nil,  2820,   595,   658,   nil,   nil,   nil,
   nil,   nil,   nil,   620,   669,   630,   nil,   717,   nil,   nil,
   641,   654,   nil,   657,   669,   nil,   682,   nil,   nil,   690,
  2374,  2756,   nil,   nil,   820,   nil,  7386,   823,   nil,   nil,
 24649, 20866,  3540,    10,   841,   nil,   845,   -78,  3396,   nil,
   850,   730,   732,   nil,   152,   nil,   736,   733,   -83,   nil,
   nil,  5385,  5254,   nil,   nil,   nil,   nil,   -83,   764,   770,
 25267,   nil,   789,   -32,   796,   nil,   nil,   nil, 25169,   nil,
   nil,   235,   814,   816,   nil,   817,   842,   nil,   -69,   nil,
   nil,  1956,  1380,   nil,   841,   843,   851,   nil,   852,   855,
   856,   nil,   882,   874,   872, 23522,   nil,   nil,   nil,   nil,
  2244,   nil,   nil,    36, 23391,   nil,  2388,  1956,  1654,   nil,
   nil, 24230,   nil, 25662,   nil, 17551,   nil, 24636,   nil,   nil,
   nil,   nil,   914,   919,   nil,   145,   nil,   146,   602,   -38,
   nil,   nil,   nil,   210,   nil,   nil,   nil,  1046,   nil,   nil,
   nil,   nil,   967,   nil,   nil,   nil,   972,   928,   150,   nil,
   934, 25561,  1016,   988,   475,   nil,   nil,   nil,   nil,   nil,
   nil,   219,   nil,   nil,  1269,   nil,   nil,   nil, 17570,   nil,
 24750,   nil, 24960,   nil,   nil,   991, 22998,  1278,  1050,   nil,
  1812,     9,    32,  1108,  1073,    33,   nil,  1018,  1124,   452,
   nil,   nil,   nil,  1001,  1002,  1015,  1028,  2413,  2900,  4116,
   nil, 13555, 13424, 24227,   nil,   nil,   nil,   nil,  3252,   nil,
  1040, 24325, 24129,  1048,   nil,   nil,   nil,   nil,   nil,  1049,
   nil,   nil,  1053,  1055,  1057,  1058,   nil,  1066,   nil,   820,
 26280,   nil,  1198,  8303, 26341, 26890,    35,   nil,   nil,   nil,
  1798, 24426,   nil,   nil,   nil,   nil,  1086,   462,  4404,   nil,
   nil,   nil,  1215, 24973,  1096,  1100, 25071,   nil, 24132,   nil,
 22906,   nil, 17544,   nil, 25270,   nil,   nil,  1159,  1160,   nil,
  1122,   136,   142,   143,    39,   nil,  1142,   nil,   515,   nil,
  1146,   nil,  1159,  1163,  1183,  1184,    79,   nil,   nil,   nil,
   nil, 25172,   nil,   nil,   nil,   nil,  1193,   nil ]

racc_action_default = [
    -3,  -706,    -1,  -692,    -4,  -706,    -7,  -706,  -706,  -706,
  -706,   -30,  -706,  -706,   -35,  -706,  -706,  -293,   -47,  -694,
  -706,   -54,   -58,   -59,   -60,   -64,  -270,  -270,  -270,  -306,
  -336,  -337,   -76,   -12,   -80,   -88,   -90,  -706,  -592,  -593,
  -706,  -706,  -706,  -706,  -706,  -706,  -228,  -706,  -694,  -242,
  -284,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -680,
  -295,  -299,  -705,  -670,  -314,  -396,  -706,  -706,   -56,   -56,
  -692,  -706,  -706,  -706,  -706,  -338,  -339,  -341,  -532,  -533,
  -534,  -535,  -556,  -538,  -539,  -558,  -560,  -543,  -548,  -552,
  -554,  -570,  -571,  -572,  -556,  -574,  -576,  -577,  -578,  -579,
  -678,  -581,  -582,  -679,  -584,  -585,  -586,  -587,  -588,  -589,
  -590,  -591,  -596,  -597,  -706,    -2,  -693,  -701,  -702,  -703,
    -6,  -706,  -706,  -706,  -706,  -706,    -8,    -3,   -18,  -706,
  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -129,  -130,  -131,
  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,
  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,
  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,
  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,
  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,
  -192,  -193,  -194,  -195,  -196,  -197,  -198,  -199,   -23,  -126,
   -12,  -706,  -706,  -706,  -706,  -706,  -260,  -706,  -706,  -690,
  -691,  -706,  -706,  -694,  -695,   -51,  -706,  -592,  -593,  -706,
  -293,  -706,  -706,  -234,  -706,   -12,  -706,   -52,  -211,  -212,
  -706,  -706,  -706,  -706,  -706,  -706,  -706,  -706,  -706,  -706,
  -706,  -706,  -706,  -706,  -706,  -706,  -706,  -706,  -706,  -706,
  -243,  -244,  -245,  -246,  -706,  -405,  -407,  -706,  -688,  -689,
   -65,  -260,  -706,  -313,  -411,  -420,  -422,   -71,  -417,   -72,
  -694,   -73,  -249,  -265,  -274,  -274,  -269,  -706,  -275,  -706,
  -556,  -672,  -706,  -706,   -74,   -75,  -692,   -13,  -706,   -16,
  -706,   -78,   -12,  -694,  -706,   -81,   -84,   -12,   -96,   -97,
  -706,  -706,  -104,  -306,  -309,  -694,  -706,  -336,  -337,  -340,
  -418,  -706,   -86,  -706,   -92,  -303,  -706,  -213,  -214,  -575,
  -222,  -223,  -706,  -235,  -706,   -12,  -297,  -694,  -250,  -698,
  -698,  -706,  -706,  -698,  -706,  -315,  -316,  -626,   -55,  -706,
  -706,  -706,   -12,   -12,  -692,  -706,  -693,  -592,  -593,  -706,
  -706,  -293,  -706,  -351,  -352,  -114,  -115,  -706,  -117,  -706,
  -293,  -600,  -706,  -592,  -593,  -329,  -119,  -120,  -159,  -160,
  -161,  -177,  -182,  -189,  -192,  -331,  -706,  -668,  -706,  -536,
  -706,  -706,  -706,  -706,  -706,  -706,  -706,  -706,  1178,    -5,
  -704,   -24,   -25,   -26,   -27,   -28,  -706,  -706,   -20,   -21,
   -22,  -127,  -706,   -31,   -34,  -280,  -706,  -706,  -279,   -32,
  -706,   -36,  -706,  -293,   -44,   -46,  -200,  -254,  -275,   -48,
   -49,   -37,  -201,  -254,  -694,  -261,  -274,  -274,  -681,  -682,
  -270,  -415,  -683,  -684,  -682,  -681,  -270,  -414,  -416,  -683,
  -684,   -43,  -208,   -50,  -694,  -312,  -706,  -706,  -706,  -260,
  -303,  -706,  -706,  -706,  -706,  -209,  -210,  -215,  -216,  -217,
  -218,  -219,  -220,  -224,  -225,  -226,  -227,  -229,  -230,  -231,
  -232,  -233,  -236,  -237,  -238,  -239,  -694,  -247,  -426,  -270,
  -681,  -682,   -62,   -66,  -627,  -694,  -694,  -271,  -424,  -426,
  -694,  -308,  -266,  -706,  -267,  -706,  -272,  -706,  -276,  -706,
  -675,  -677,   -11,  -693,   -15,   -17,  -694,   -77,  -301,   -93,
   -82,  -706,  -694,  -260,  -706,  -706,  -103,  -706,  -575,  -706,
   -89,   -94,  -706,  -706,  -706,  -706,  -248,  -240,  -706,  -524,
  -706,  -694,  -706,  -251,  -700,  -699,  -253,  -700,  -304,  -305,
  -671,  -397,  -626,  -400,  -667,  -667,  -667,  -609,  -611,  -611,
  -611,  -625,  -628,  -629,  -630,  -631,  -632,  -633,  -634,  -635,
  -706,  -637,  -639,  -641,  -646,  -648,  -649,  -652,  -657,  -659,
  -660,  -662,  -663,  -664,  -706,   -12,  -342,  -343,   -12,  -706,
  -706,  -706,  -706,  -706,  -706,  -260,  -706,  -706,  -303,   -56,
  -114,  -115,  -116,  -706,  -706,  -260,  -325,  -598,  -706,   -12,
  -603,  -333,  -694,  -537,  -557,  -562,  -706,  -564,  -540,  -559,
  -706,  -561,  -542,  -706,  -545,  -706,  -547,  -550,  -706,  -551,
  -706,  -573,    -9,   -19,  -706,   -29,  -706,  -283,  -706,  -706,
  -260,  -706,  -706,  -706,  -706,  -419,  -706,  -262,  -264,  -706,
  -706,   -67,  -259,  -412,  -706,  -706,   -69,  -413,  -311,  -696,
  -681,  -682,  -681,  -682,  -694,   -53,  -445,  -447,  -449,  -452,
  -505,  -459,  -462,  -465,  -498,  -503,  -504,  -706,  -706,  -508,
  -509,  -510,  -511,  -512,  -513,  -514,  -515,  -516,  -396,  -518,
  -706,  -706,  -522,  -706,  -706,  -427,   -61,  -408,  -424,  -256,
  -257,  -706,  -386,  -706,  -307,  -274,  -273,  -277,  -706,  -673,
  -674,  -706,   -14,   -79,  -706,   -85,   -91,  -694,  -681,  -682,
  -258,  -685,  -102,  -706,   -87,  -706,  -207,  -221,  -694,  -705,
  -705,  -296,  -298,  -300,  -698,  -706,  -694,  -706,  -606,  -607,
  -706,  -608,  -706,  -618,  -706,  -621,  -706,  -623,  -706,  -353,
  -706,  -355,  -357,  -360,  -363,  -694,  -640,  -650,  -651,  -661,
  -665,  -705,  -344,  -705,   -57,  -345,  -346,  -319,  -320,  -706,
  -706,  -432,  -322,  -706,  -694,  -681,  -682,  -685,  -302,   -12,
  -114,  -115,  -118,  -694,   -12,  -706,  -327,  -706,   -12,  -626,
  -626,  -706,  -669,  -563,  -566,  -567,  -568,  -569,   -12,  -541,
  -544,  -546,  -549,  -553,  -555,  -128,   -33,  -281,  -706,  -694,
  -681,  -682,  -682,  -681,   -45,  -255,  -706,  -697,  -274,   -39,
  -203,   -40,  -204,   -68,   -41,  -206,   -42,  -205,   -70,  -706,
  -706,  -706,  -706,  -419,  -706,  -706,  -450,  -451,  -706,  -706,
  -706,  -706,  -461,  -706,  -464,  -706,  -501,  -502,  -506,  -507,
  -517,  -519,  -115,  -520,  -706,  -406,  -386,  -410,  -409,  -706,
  -421,  -387,  -694,   -12,  -423,  -268,  -278,  -676,   -83,  -419,
   -95,  -310,  -705,  -349,   -12,  -525,  -705,  -526,  -527,  -252,
  -398,  -401,  -403,  -390,  -706,  -667,  -647,  -652,  -666,  -610,
  -611,  -611,  -638,  -611,  -611,  -658,  -611,  -635,  -653,  -694,
  -706,  -706,  -362,  -636,  -706,  -347,  -706,  -706,  -321,  -323,
  -706,  -706,   -12,  -419,  -706,  -419,  -706,  -706,   -12,  -330,
  -706,  -694,  -694,  -627,  -706,  -334,  -706,  -282,  -419,   -38,
  -202,  -263,  -706,  -446,  -448,  -455,  -458,  -467,  -694,  -694,
  -468,  -474,  -706,  -479,  -485,  -486,  -488,  -489,  -492,  -493,
  -556,  -496,  -694,  -694,  -521,  -694,  -706,  -556,  -694,  -499,
  -500,  -241,   -12,   -63,  -667,  -667,  -667,  -368,  -370,  -370,
  -370,  -385,  -706,  -694,  -635,  -643,  -644,  -655,  -425,   -10,
   -12,  -531,  -350,  -706,  -706,  -529,   -12,   -12,  -706,  -399,
  -605,  -706,  -614,  -706,  -616,  -706,  -619,  -706,  -622,  -624,
  -354,  -356,  -358,  -361,  -317,  -706,  -318,  -706,  -437,  -440,
  -443,  -444,  -277,  -705,  -324,  -326,  -599,  -706,  -332,  -601,
  -602,  -604,  -603,  -565,  -453,  -454,  -483,  -469,  -472,  -475,
  -477,  -706,  -706,  -491,  -706,  -495,  -497,  -456,  -457,  -460,
  -463,  -706,  -466,  -428,  -706,  -365,  -366,  -367,  -376,  -378,
  -706,  -381,  -706,  -383,  -388,  -706,  -706,  -642,  -706,  -530,
   -12,  -592,  -593,  -706,  -706,  -293,  -528,  -706,  -706,  -694,
  -392,  -394,  -395,  -611,  -611,  -611,  -611,  -706,  -706,   -12,
  -433,  -706,  -706,  -441,  -429,  -430,  -431,  -328,   -12,  -476,
  -470,  -706,  -706,  -480,  -481,  -484,  -487,  -490,  -494,  -667,
  -645,  -369,  -370,  -370,  -370,  -370,  -656,  -370,  -389,  -654,
  -706,  -303,  -524,  -260,  -706,  -706,  -303,  -402,  -404,  -391,
  -706,  -706,  -612,  -615,  -617,  -620,  -359,  -705,   -12,  -438,
  -439,  -442,  -706,  -706,  -473,  -478,  -706,  -364,  -706,  -373,
  -706,  -375,  -706,  -379,  -706,  -382,  -384,  -302,  -685,  -523,
  -694,  -681,  -682,  -685,  -302,  -393,  -611,  -348,  -705,  -335,
  -471,  -482,  -370,  -370,  -370,  -370,  -419,  -613,  -434,  -435,
  -436,  -706,  -371,  -374,  -377,  -380,  -370,  -372 ]

clist = [
'39,222,283,283,283,39,338,390,345,434,385,119,346,133,133,38,217,593',
'266,397,38,540,729,770,268,305,225,504,352,353,334,136,136,39,309,309',
'128,209,418,419,709,569,788,349,350,585,588,354,38,308,308,274,278,432',
'602,319,319,6,496,452,304,39,6,553,495,738,739,741,904,665,892,358,374',
'374,374,561,38,267,119,133,126,872,709,270,277,279,357,373,373,373,530',
'329,319,319,319,706,1027,706,401,402,403,404,115,285,285,285,322,440',
'446,348,348,895,116,348,969,907,39,1003,336,938,952,493,955,303,701',
'39,1070,39,755,543,546,38,431,550,301,884,340,343,451,1072,38,1093,38',
'2,120,1106,623,625,284,284,284,863,891,983,893,371,375,489,1001,281',
'294,295,979,694,348,348,348,348,712,355,208,364,414,6,703,407,645,464',
'764,504,698,339,405,709,6,634,332,1094,341,283,697,387,619,621,624,624',
'342,362,606,386,335,1134,1135,749,541,848,849,939,953,337,39,784,956',
'918,609,509,610,413,424,791,1022,424,1002,450,971,38,457,424,973,1069',
'551,887,880,1106,735,39,986,412,987,706,706,488,441,1160,283,283,569',
'1094,1094,498,38,499,664,283,769,399,429,430,1155,856,1084,972,304,1007',
'1168,453,454,910,736,1128,406,1072,970,1008,1010,933,934,838,839,1011',
'561,841,843,845,1095,1096,1097,876,715,1094,782,1,1161,1126,389,787',
'724,527,39,452,1102,432,39,391,119,962,309,39,899,392,524,393,394,38',
'531,395,717,38,396,542,793,308,38,309,859,892,533,319,589,304,417,417',
'951,951,304,39,1001,951,308,798,425,274,785,425,319,278,285,440,446',
'425,38,890,39,39,285,514,886,1100,895,596,,,119,,1131,1085,,38,38,528',
'726,,1055,515,959,960,892,520,853,590,591,,,749,17,,268,902,774,17,',
'284,516,,348,512,990,522,783,284,,1073,497,301,951,513,833,,301,,500',
',133,842,720,608,646,17,312,312,,,641,720,801,,801,,,,136,612,283,809',
'1157,633,569,,569,611,,,,937,937,17,937,865,,,958,,966,592,1088,361',
'370,370,1103,869,1104,,,450,687,652,709,,693,912,916,657,892,,920,1045',
'1046,1047,,,,868,441,569,569,,720,820,822,,,,825,827,720,,283,651,,',
'17,,823,656,,921,924,828,,17,1169,17,531,39,652,1009,913,561,561,,531',
'309,,706,879,915,951,954,38,309,450,440,446,749,749,,308,,887,450,,',
'319,,308,,696,,1162,441,319,928,,1033,,,974,877,441,779,865,,,,,,819',
'821,283,,,824,826,,,,922,705,283,936,,728,,,,39,,,39,1170,,,,,17,1149',
'423,765,,423,38,,450,38,1017,423,,,450,39,1137,,761,283,,763,786,,734',
'17,,441,975,,38,,,,,441,,,,,,850,39,,966,133,966,858,966,39,,424,646',
'450,1043,,,38,,646,930,424,424,136,38,,424,424,805,,,,441,820,822,827',
'825,,,1068,878,1086,,687,687,1060,,,17,,,569,17,,937,,312,17,857,806',
'1037,1038,,1039,,646,814,1079,,1080,,531,,312,,,749,749,,773,309,,870',
',883,17,,818,,,,309,,925,966,308,966,,966,929,966,319,17,17,,,308,,974',
',974,652,319,,657,,,,,,,,646,,,,,966,917,,,646,,425,,,930,,,,1132,,',
'425,425,39,,,425,425,39,,,,39,,,646,,,38,,133,,39,38,,,,38,975,,914',
',975,,975,,975,38,,,981,344,,646,985,,424,,,926,,,348,,,,974,,,687,',
',687,687,,687,,885,883,687,687,687,,417,,,,,,,,,,,,,,39,,,,,,,,,,,39',
'1034,,,38,743,745,747,1041,1005,,,,,,38,978,679,1166,894,,896,,17,975',
',975,982,975,455,975,312,1150,,,,687,,39,312,,,,,39,,,,,,,1016,,38,',
',,975,1021,38,646,646,,646,,1013,687,,,,425,,,,687,348,,,,,,883,,,,',
'501,,39,,,415,428,,965,17,,,17,,,374,,38,,,39,,,517,1062,,39,39,,,373',
',,17,,38,319,,,1061,797,38,38,,720,319,,1059,,,,968,,1067,,,,,,,17,',
',423,,,,17,,,,687,,423,423,,,,423,423,,506,,508,,,510,511,,,,1119,,',
',,374,,1129,1130,39,,,1114,,,,,,,,373,,,,38,,319,,39,,,,687,,,283,1112',
'39,,,687,687,,38,,,,312,,,,,38,679,679,1127,,888,312,,888,680,,,450',
',,16,,450,,,16,348,348,,,39,,,,646,687,658,,687,,226,441,1074,,1075',
'38,1076,,,226,226,226,1099,16,310,310,965,1158,965,,965,,,,,17,,,681',
',17,,637,,17,,,699,700,,,16,704,,17,,226,226,,,226,359,369,369,,,,,713',
',,1105,423,1107,716,,,,,,,,,992,994,,996,998,,999,,,,732,15,,,,,15,',
',,,684,967,16,,,,,226,226,226,226,16,965,16,965,17,965,,965,,,,,15,',
'707,17,344,,710,679,,,679,679,,679,,1156,,679,679,679,,,965,,,,,,15',
',,685,1163,,1164,,1165,792,,,,17,,707,,,344,17,,,,,,,,,,,,,,,,,682,1176',
',,,,680,680,756,16,226,422,226,226,422,226,,,679,15,422,226,226,,,,',
'17,15,428,15,,,,16,,,,,,370,,,,,17,,,679,1065,,17,17,,,,679,,,,681,681',
',,,,,,,,226,226,,807,,1122,1123,1124,1125,226,,,707,344,,,,,,871,,,',
',,,888,16,,,967,16,967,,967,310,16,,,,,,,15,,15,903,,15,,,370,310,,15',
'17,684,684,,,,,,,16,,,,15,679,,,,866,17,,867,,,,226,16,16,17,,,,,1167',
',,,,,680,875,,680,680,,680,226,,,680,680,680,,,,685,685,,898,,,,226',
',,967,679,967,17,967,,967,935,,679,679,15,,,,15,,,,,15,,,682,682,,,',
'681,,,681,681,967,681,,,,681,681,681,,,1049,1051,1053,,,15,680,,679',
',927,679,,,,,,,,,,,15,15,,226,,1000,,,,,,,,,680,,,,,,,,680,,,,,1019',
'1020,684,,,684,684,,684,,,681,684,684,684,,,1024,1025,,,,,,,,,,,,16',
',,,,,,1042,310,,226,681,,,,,310,,,681,,,,,,226,685,,,685,685,,685,,1012',
',685,685,685,,,,,,,,,684,680,,,,,,344,1139,1141,1143,1145,682,1146,',
'682,682,,682,,,,682,682,682,16,,,16,,684,,,,,226,,,684,,,,,,,226,,,',
'16,,,,680,685,681,,15,,,,680,680,,,,,,1172,1173,1174,1175,,,,,16,,,422',
'226,,1177,16,685,,,682,,422,422,,685,,422,422,,,,,,,,680,,,680,681,',
',,,,,,681,681,682,,,,684,,,,682,,,,15,,,15,,,,,,,,,,,,,,,,,,,13,,15',
'310,,13,681,,,681,,,,,310,,,,,,,,684,,685,,,,,15,684,684,15,13,,,15',
',,,,683,15,15,,,,15,15,,,,,,,,,682,,,,13,,,,,,,16,,,363,684,16,226,684',
'685,16,,,,,,,685,685,,16,,,,,,,,,,,,,,,,26,,422,,,26,682,,,,,,,13,682',
'682,,,,,26,,13,685,13,,685,,,26,26,26,,26,,,,,,,,,,,,,,,,16,,,,,,,682',
',,682,16,26,,,,,26,26,,15,26,,,,15,,,,15,,,,,,,,,,15,,,,226,,,,,686',
'16,,,,,,16,,15,13,,420,,,420,,,,26,,420,,,26,26,26,26,26,,26,,,,,13',
',,,,,,,,,,,,,,,16,,,683,683,15,,,,,,,,1057,,,15,,16,,,,1063,,16,16,',
',,,,,,,,,,,,,,,,,,,,13,,,,13,,,15,,13,,,,15,,26,26,26,26,26,26,26,,',
',,26,26,26,,,,,,,,,13,,,26,,,,,,,1109,,,,16,,,13,13,,15,,,,,,,,,,,,',
'16,,226,226,,15,26,26,,16,,15,15,,,26,,,,,,,,,,,,,,,,,,26,226,,,26,',
',,,26,,683,686,686,683,683,16,683,,,,683,683,683,,,,,,,,,,,,,,26,,,',
',,,,,,,,,,,15,26,26,26,,,,,,,,,,,,,,,,15,,,26,,,,,,15,,,,,,683,,,,26',
',,,,,,,,,,,,,,29,,,,,29,,13,,,,683,,,,15,,,,683,29,,,,,,,,,29,29,29',
',29,,,,,,,,,,,,,,,,,,,,,,,26,,,,,29,,,,686,29,29,686,686,29,686,,,,686',
'686,686,,13,,,13,,,,,,,,,,,,,,,,,,,,683,13,,,,,,,26,,,,,,29,,,,26,29',
'29,29,29,29,,29,,,13,,,420,,26,,13,,,686,,,420,420,,,,420,420,,,,,683',
',,,,,,,683,683,,,,,,,686,,,,,,,,686,,,,26,,,26,,,,,,,26,,,,,,,,,,26',
',683,,26,683,,,29,29,29,29,29,29,29,,,,,29,29,29,,,,,,,,,,26,,29,26',
'26,,,26,,,,,,26,26,,,,26,26,,,,,,,,,686,,,,,,,,,,29,29,13,,,,,13,,29',
',13,,,,,,,,,,13,,,,,,29,,,,29,,,,,29,,,420,,,686,,,,,,,,686,686,,,,',
',,,,,,,,29,,,,,,,,,,,,,,,,29,29,29,,,,13,,,,,,686,,,686,,13,,,,29,,',
',26,,,,,26,26,,,26,,,29,,,,,,,26,,,,,,,,,,,13,,,,,,13,26,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,13,,,29,26,,,,,,,,,,,26,,,13,,,,1066',
',13,13,,,,,,,,,,,,,,,,,,,,,,26,,,,,,26,,,,29,,26,,,,,,,,29,,,,,,,,,',
',,,,,29,,,,,,,,,,,,,,,,13,,,,,26,,,,,,,,,,,,,,13,,,,26,,,,,13,26,26',
'29,,,29,,,,,,,29,,,,,,,,,,29,,,,29,,,,,,,,,,,,,13,,,,,,,,,,,,,,29,,',
'29,29,,,29,,,,,,29,29,,,,29,29,,26,,233,,,,,,,,,282,282,282,,,,,,26',
',26,26,327,328,,330,331,26,333,,,,,,,,,,,,,,,282,282,,,,,,,,26,,,,,',
',,,,,,,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29',
',,,,29,29,,,29,,,,,,,,,,29,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,282,427,,,433,282,,,,,433,,,29,,,,,,,,,,233,29,,,465,466',
'467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483',
'484,485,486,,,,,487,,,29,,,,282,282,29,,,,,,29,282,,,,,,,282,,282,,',
'282,282,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,536,,537,,,,,,,29,,',
',,,29,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,282,,,,,29,,,,,,,,,,,,,,,,,,,29,,29,29,,,,,,29,,,,,,,,,,282',
',433,433,433,,,,,,,,,,,29,,,,,,,,,,,,,,,29,,,,,328,,,,,,,,,282,,282',
',282,,,,,,,,,,,,,,,,282,,,,,,,,,433,,,727,,,,,,,,,282,,,282,,,,,,,,',
',,,,,,,,,,,,,,,,,282,,,,,,,,,,,,,,,,,,,,,282,282,,,,,,,,,,282,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,282,433,282,,,,815,,,282,282,433,433,,,,433',
'433,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,282,,,282,,',
',,,,,,,,,,,,,,,,282,,,,,,,,,,,,,,,,,,282,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,282,,,,,,,,433,,,,,,,,,,,,,433,433,433',
'433,,,,,,,,,,,,,,,,,,,,,,961,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,282,,,,,,,,,,,,,,,,,,,,282,433,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,282' ]
        racc_goto_table = arr = ::Array.new(4088, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'62,34,41,41,41,62,77,184,97,30,65,106,99,66,66,61,32,102,145,184,61',
'9,11,103,32,58,21,84,38,38,34,68,68,62,62,62,16,16,23,23,220,211,107',
'18,18,100,100,18,61,61,61,81,81,70,63,73,73,7,82,70,10,62,7,144,30,126',
'126,126,101,36,212,62,62,62,62,206,61,44,106,66,8,12,220,46,46,46,61',
'61,61,61,60,71,73,73,73,85,177,85,18,18,18,18,4,80,80,80,59,45,45,25',
'25,216,6,25,132,12,62,121,7,162,162,47,162,55,48,62,138,62,120,79,79',
'61,27,79,54,136,80,80,27,139,61,178,61,2,5,217,196,196,78,78,78,134',
'133,189,133,64,64,45,118,53,53,53,13,148,25,25,25,25,15,4,17,20,24,7',
'148,26,31,37,39,84,50,78,7,220,7,69,74,177,76,41,83,95,197,197,197,197',
'96,104,105,108,109,178,178,119,110,186,186,164,164,111,62,112,164,113',
'114,184,115,21,21,116,117,21,122,66,123,61,32,21,130,137,140,185,141',
'217,143,62,146,10,147,85,85,149,81,178,41,41,211,177,177,151,61,152',
'30,41,102,5,25,25,138,155,156,136,10,157,158,25,25,159,144,160,2,139',
'133,161,163,166,168,169,170,164,206,173,174,175,180,181,182,188,60,177',
'63,1,177,121,192,9,60,34,62,70,132,70,62,193,106,134,62,62,120,194,32',
'195,198,61,58,199,30,61,200,34,201,61,61,62,48,212,32,73,18,10,78,78',
'185,185,10,62,118,185,61,202,19,81,205,19,73,81,80,45,45,19,61,210,62',
'62,80,7,214,215,216,32,,,106,,162,12,,61,61,71,70,,136,8,186,186,212',
'59,63,10,10,,,119,33,,32,119,30,33,,78,55,,25,4,126,55,30,78,,133,53',
'54,185,6,31,,54,,53,,66,31,45,25,34,33,33,33,,,32,45,197,,197,,,,68',
'25,41,30,101,16,211,,211,44,,,,36,36,33,36,84,,,36,,127,4,107,33,33',
'33,133,31,133,,,66,62,81,220,,34,100,9,81,212,,9,126,126,126,,,,60,81',
'211,211,,45,70,70,,,,70,70,45,,41,46,,,33,,47,46,,144,144,47,,33,12',
'33,58,62,81,36,31,206,206,,58,62,,85,79,31,185,63,61,62,66,45,45,119',
'119,,61,,185,66,,,73,,61,,46,,133,81,73,31,,36,,,211,23,81,38,84,,,',
',,27,27,41,,,27,27,,,,82,80,41,31,,25,,,,62,,,62,103,,,,,33,11,33,106',
',33,61,,66,61,9,33,,,66,62,126,,10,41,,10,106,,80,33,,81,213,,61,,,',
',81,,,,,,99,62,,127,66,127,97,127,62,,21,34,66,9,,,61,,34,70,21,21,68',
'61,,21,21,16,,,,81,70,70,70,70,,,9,77,102,,62,62,100,,,33,,,211,33,',
'36,,33,33,145,7,31,31,,31,,34,7,100,,100,,58,,33,,,119,119,,78,62,,58',
',34,33,,80,,,,62,,65,127,61,127,,127,27,127,73,33,33,,,61,,211,,211',
'81,73,,81,,,,,,,,34,,,,,127,18,,,34,,19,,,70,,,,9,,,19,19,62,,,19,19',
'62,,,,62,,,34,,,61,,66,,62,61,,,,61,213,,10,,213,,213,,213,61,,,77,75',
',34,77,,21,,,10,,,25,,,,211,,,62,,,62,62,,62,,125,34,62,62,62,,78,,',
',,,,,,,,,,,62,,,,,,,,,,,62,184,,,61,209,209,209,184,18,,,,,,61,10,87',
'31,131,,131,,33,213,,213,10,213,56,213,33,30,,,,62,,62,33,,,,,62,,,',
',,,106,,61,,,,213,106,61,34,34,,34,,10,62,,,,19,,,,62,25,,,,,,34,,,',
',56,,62,,,75,75,,125,33,,,33,,,62,,61,,,62,,,56,62,,62,62,,,61,,,33',
',61,73,,,61,33,61,61,,45,73,,10,,,,131,,10,,,,,,,33,,,33,,,,33,,,,62',
',33,33,,,,33,33,,75,,75,,,75,75,,,,34,,,,,62,,18,18,62,,,32,,,,,,,,61',
',,,61,,73,,62,,,,62,,,41,10,62,,,62,62,,61,,,,33,,,,,61,87,87,10,,128',
'33,,128,88,,,66,,,29,,66,,,29,25,25,,,62,,,,34,62,56,,62,,29,81,131',
',131,61,131,,,29,29,29,125,29,29,29,125,10,125,,125,,,,,33,,,89,,33',
',75,,33,,,56,56,,,29,56,,33,,29,29,,,29,29,29,29,,,,,56,,,131,33,131',
'56,,,,,,,,,209,209,,209,209,,209,,,,56,28,,,,,28,,,,,92,128,29,,,,,29',
'29,29,29,29,125,29,125,33,125,,125,,,,,28,,75,33,75,,75,87,,,87,87,',
'87,,131,,87,87,87,,,125,,,,,,28,,,93,131,,131,,131,56,,,,33,,75,,,75',
'33,,,,,,,,,,,,,,,,,90,131,,,,,88,88,75,29,29,29,29,29,29,29,,,87,28',
'29,29,29,,,,,33,28,75,28,,,,29,,,,,,33,,,,,33,,,87,33,,33,33,,,,87,',
',,89,89,,,,,,,,,29,29,,75,,209,209,209,209,29,,,75,75,,,,,,56,,,,,,',
'128,29,,,128,29,128,,128,29,29,,,,,,,28,,28,56,,28,,,33,29,,28,33,92',
'92,,,,,,,29,,,,28,87,,,,75,33,,75,,,,29,29,29,33,,,,,209,,,,,,88,75',
',88,88,,88,29,,,88,88,88,,,,93,93,,75,,,,29,,,128,87,128,33,128,,128',
'56,,87,87,28,,,,28,,,,,28,,,90,90,,,,89,,,89,89,128,89,,,,89,89,89,',
',129,129,129,,,28,88,,87,,75,87,,,,,,,,,,,28,28,,29,,56,,,,,,,,,88,',
',,,,,,88,,,,,56,56,92,,,92,92,,92,,,89,92,92,92,,,56,56,,,,,,,,,,,,29',
',,,,,,56,29,,29,89,,,,,29,,,89,,,,,,29,93,,,93,93,,93,,75,,93,93,93',
',,,,,,,,92,88,,,,,,75,129,129,129,129,90,129,,90,90,,90,,,,90,90,90',
'29,,,29,,92,,,,,29,,,92,,,,,,,29,,,,29,,,,88,93,89,,28,,,,88,88,,,,',
',129,129,129,129,,,,,29,,,29,29,,129,29,93,,,90,,29,29,,93,,29,29,,',
',,,,,88,,,88,89,,,,,,,,89,89,90,,,,92,,,,90,,,,28,,,28,,,,,,,,,,,,,',
',,,,,22,,28,29,,22,89,,,89,,,,,29,,,,,,,,92,,93,,,,,28,92,92,28,22,',
',28,,,,,91,28,28,,,,28,28,,,,,,,,,90,,,,22,,,,,,,29,,,22,92,29,29,92',
'93,29,,,,,,,93,93,,29,,,,,,,,,,,,,,,,49,,29,,,49,90,,,,,,,22,90,90,',
',,,49,,22,93,22,,93,,,49,49,49,,49,,,,,,,,,,,,,,,,29,,,,,,,90,,,90,29',
'49,,,,,49,49,,28,49,,,,28,,,,28,,,,,,,,,,28,,,,29,,,,,94,29,,,,,,29',
',28,22,,22,,,22,,,,49,,22,,,49,49,49,49,49,,49,,,,,22,,,,,,,,,,,,,,',
',29,,,91,91,28,,,,,,,,29,,,28,,29,,,,29,,29,29,,,,,,,,,,,,,,,,,,,,,',
'22,,,,22,,,28,,22,,,,28,,49,49,49,49,49,49,49,,,,,49,49,49,,,,,,,,,22',
',,49,,,,,,,29,,,,29,,,22,22,,28,,,,,,,,,,,,,29,,29,29,,28,49,49,,29',
',28,28,,,49,,,,,,,,,,,,,,,,,,49,29,,,49,,,,,49,,91,94,94,91,91,29,91',
',,,91,91,91,,,,,,,,,,,,,,49,,,,,,,,,,,,,,,28,49,49,49,,,,,,,,,,,,,,',
',28,,,49,,,,,,28,,,,,,91,,,,49,,,,,,,,,,,,,,,52,,,,,52,,22,,,,91,,,',
'28,,,,91,52,,,,,,,,,52,52,52,,52,,,,,,,,,,,,,,,,,,,,,,,49,,,,,52,,,',
'94,52,52,94,94,52,94,,,,94,94,94,,22,,,22,,,,,,,,,,,,,,,,,,,,91,22,',
',,,,,49,,,,,,52,,,,49,52,52,52,52,52,,52,,,22,,,22,,49,,22,,,94,,,22',
'22,,,,22,22,,,,,91,,,,,,,,91,91,,,,,,,94,,,,,,,,94,,,,49,,,49,,,,,,',
'49,,,,,,,,,,49,,91,,49,91,,,52,52,52,52,52,52,52,,,,,52,52,52,,,,,,',
',,,49,,52,49,49,,,49,,,,,,49,49,,,,49,49,,,,,,,,,94,,,,,,,,,,52,52,22',
',,,,22,,52,,22,,,,,,,,,,22,,,,,,52,,,,52,,,,,52,,,22,,,94,,,,,,,,94',
'94,,,,,,,,,,,,,52,,,,,,,,,,,,,,,,52,52,52,,,,22,,,,,,94,,,94,,22,,,',
'52,,,,49,,,,,49,49,,,49,,,52,,,,,,,49,,,,,,,,,,,22,,,,,,22,49,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,52,49,,,,,,,,,,,49,,,22,,,',
'22,,22,22,,,,,,,,,,,,,,,,,,,,,,49,,,,,,49,,,,52,,49,,,,,,,,52,,,,,,',
',,,,,,,,52,,,,,,,,,,,,,,,,22,,,,,49,,,,,,,,,,,,,,22,,,,49,,,,,22,49',
'49,52,,,52,,,,,,,52,,,,,,,,,,52,,,,52,,,,,,,,,,,,,22,,,,,,,,,,,,,,52',
',,52,52,,,52,,,,,,52,52,,,,52,52,,49,,35,,,,,,,,,35,35,35,,,,,,49,,49',
'49,35,35,,35,35,49,35,,,,,,,,,,,,,,,35,35,,,,,,,,49,,,,,,,,,,,,,,,49',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,52,,,,,52,52,,',
'52,,,,,,,,,,52,,,,,,,,,,,,,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'35,35,,,35,35,,,,,35,,,52,,,,,,,,,,35,52,,,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,,,,,35,,,52,,,,35,35,52,,,,,',
'52,35,,,,,,,35,,35,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,52,,,,,,,,,35',
',35,,,,,,,52,,,,,,52,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,35,,,,,52,,,,,,,,,,,,,,,,,,,52,,52,52,,,,,,52',
',,,,,,,,,35,,35,35,35,,,,,,,,,,,52,,,,,,,,,,,,,,,52,,,,,35,,,,,,,,,35',
',35,,35,,,,,,,,,,,,,,,,35,,,,,,,,,35,,,35,,,,,,,,,35,,,35,,,,,,,,,,',
',,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,35,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,35,35,35,,,,35,,,35,35,35,35,,,,35,35,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,',
'35,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,35,,,,,,,,35,,,,,,,,,,,,,35,35,35,35,,,,,,,,,,,,,,,,,',
',,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,',
',,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(4088, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   291,   143,   nil,    99,   139,   109,    57,    73,  -314,
    27,  -517,  -648,  -710,   nil,  -345,    28,   161,   -23,   128,
   100,     6,  1829,  -173,   -39,    43,    47,   -83,  1222,  1118,
  -207,  -258,     0,   384,   -18,  2974,  -395,   -60,   -40,  -411,
   nil,   -27,   nil,   nil,    53,  -110,    57,  -149,  -374,  1932,
  -312,   nil,  2335,   130,   101,    90,   680,   nil,    -9,    71,
  -233,    15,     0,  -313,    83,   -64,     5,   nil,    23,  -226,
  -162,    48,   nil,    21,   140,   754,   126,   -56,   119,  -210,
    74,    25,  -213,  -299,  -258,  -408,   nil,   427,   648,   702,
   855,  1406,   768,   822,  1565,   117,   133,   -56,   nil,   -53,
  -304,  -693,  -338,  -569,   126,  -173,     8,  -568,   125,   140,
  -132,   148,  -395,  -573,  -161,  -169,  -392,  -705,  -742,  -367,
  -442,  -784,  -678,  -638,   nil,   106,  -489,  -410,   371,   584,
  -634,   149,  -748,  -590,  -551,   nil,  -601,  -759,  -862,  -849,
  -117,  -503,   nil,  -317,  -284,    -4,  -645,  -644,  -325,   -24,
   nil,   -26,   -25,   nil,   nil,  -436,  -753,  -647,  -894,  -504,
  -811,  -637,  -719,  -636,  -631,   nil,  -559,   nil,  -559,  -393,
  -392,   nil,   nil,  -390,  -390,  -390,   nil,  -844,  -890,   nil,
  -748,  -747,  -746,   nil,   -75,  -506,  -472,   nil,  -443,  -723,
   nil,   nil,   214,   218,   223,   224,  -247,  -199,   224,   226,
   228,  -296,  -278,   nil,   nil,  -265,  -272,   nil,   nil,   321,
  -391,  -306,  -672,  -240,  -381,  -687,  -633,  -905,   nil,   nil,
  -465 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   356,   299,   nil,   nil,
   539,   nil,   905,   nil,   296,   297,   nil,   nil,   nil,    11,
    12,    18,   231,   nil,   nil,    14,   nil,   421,   232,   326,
   nil,   nil,   604,   230,   456,    21,  1026,   nil,   nil,   nil,
   351,    22,    23,    24,   nil,   723,   nil,   nil,   nil,   316,
   nil,    25,   313,   435,    32,   nil,   nil,    34,    37,    36,
   nil,   227,   228,   368,   nil,   135,   443,   134,    79,   nil,
   426,    95,    46,    49,   264,   288,   nil,   873,   436,   nil,
   437,   448,   nil,   653,   502,   286,   272,    50,    51,    52,
    53,    54,    55,    56,    57,    58,   nil,   273,    64,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   586,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   751,   568,
   nil,   752,   753,  1101,   964,   555,   nil,   556,   557,   nil,
   nil,   558,   nil,   560,   nil,   861,   nil,   nil,   nil,   566,
   nil,   nil,   347,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   447,   nil,   nil,   702,   695,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   941,   nil,   666,   675,   667,   668,   nil,
   nil,   669,   670,   nil,   nil,   nil,   940,   942,   nil,   944,
   945,   946,   947,   948,   nil,   577,   674,   676,   nil,   nil,
    78,    80,    81,   nil,   nil,   nil,   nil,   614,   nil,   nil,
   nil,   nil,   nil,    91,    92,   nil,   889,   790,   554,   nil,
   559,   897,   571,   573,   574,   976,   578,   977,   581,   584,
   291 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 148, :_reduce_none,
  2, 149, :_reduce_2,
  0, 150, :_reduce_3,
  1, 150, :_reduce_4,
  3, 150, :_reduce_5,
  2, 150, :_reduce_6,
  1, 152, :_reduce_none,
  2, 152, :_reduce_8,
  3, 155, :_reduce_9,
  4, 156, :_reduce_10,
  2, 157, :_reduce_11,
  0, 161, :_reduce_12,
  1, 161, :_reduce_13,
  3, 161, :_reduce_14,
  2, 161, :_reduce_15,
  1, 162, :_reduce_none,
  2, 162, :_reduce_17,
  0, 173, :_reduce_18,
  4, 154, :_reduce_19,
  3, 154, :_reduce_20,
  3, 154, :_reduce_21,
  3, 154, :_reduce_22,
  2, 154, :_reduce_23,
  3, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  3, 154, :_reduce_28,
  4, 154, :_reduce_29,
  1, 154, :_reduce_none,
  3, 154, :_reduce_31,
  3, 154, :_reduce_32,
  5, 154, :_reduce_33,
  3, 154, :_reduce_34,
  1, 154, :_reduce_none,
  3, 166, :_reduce_36,
  3, 166, :_reduce_37,
  6, 166, :_reduce_38,
  5, 166, :_reduce_39,
  5, 166, :_reduce_40,
  5, 166, :_reduce_41,
  5, 166, :_reduce_42,
  3, 166, :_reduce_43,
  1, 174, :_reduce_none,
  3, 174, :_reduce_45,
  1, 174, :_reduce_none,
  1, 172, :_reduce_none,
  3, 172, :_reduce_48,
  3, 172, :_reduce_49,
  3, 172, :_reduce_50,
  2, 172, :_reduce_51,
  0, 184, :_reduce_52,
  4, 172, :_reduce_53,
  1, 172, :_reduce_none,
  1, 165, :_reduce_none,
  0, 187, :_reduce_56,
  3, 185, :_reduce_57,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 189, :_reduce_none,
  4, 189, :_reduce_61,
  0, 197, :_reduce_62,
  4, 194, :_reduce_63,
  1, 196, :_reduce_none,
  2, 188, :_reduce_65,
  3, 188, :_reduce_66,
  4, 188, :_reduce_67,
  5, 188, :_reduce_68,
  4, 188, :_reduce_69,
  5, 188, :_reduce_70,
  2, 188, :_reduce_71,
  2, 188, :_reduce_72,
  2, 188, :_reduce_73,
  2, 188, :_reduce_74,
  2, 188, :_reduce_75,
  1, 167, :_reduce_76,
  3, 167, :_reduce_77,
  1, 202, :_reduce_78,
  3, 202, :_reduce_79,
  1, 201, :_reduce_none,
  2, 201, :_reduce_81,
  3, 201, :_reduce_82,
  5, 201, :_reduce_83,
  2, 201, :_reduce_84,
  4, 201, :_reduce_85,
  2, 201, :_reduce_86,
  4, 201, :_reduce_87,
  1, 201, :_reduce_88,
  3, 201, :_reduce_89,
  1, 205, :_reduce_none,
  3, 205, :_reduce_91,
  2, 204, :_reduce_92,
  3, 204, :_reduce_93,
  1, 207, :_reduce_94,
  3, 207, :_reduce_95,
  1, 206, :_reduce_96,
  1, 206, :_reduce_97,
  4, 206, :_reduce_98,
  3, 206, :_reduce_99,
  3, 206, :_reduce_100,
  3, 206, :_reduce_101,
  3, 206, :_reduce_102,
  2, 206, :_reduce_103,
  1, 206, :_reduce_104,
  1, 169, :_reduce_105,
  1, 169, :_reduce_106,
  4, 169, :_reduce_107,
  3, 169, :_reduce_108,
  3, 169, :_reduce_109,
  3, 169, :_reduce_110,
  3, 169, :_reduce_111,
  2, 169, :_reduce_112,
  1, 169, :_reduce_113,
  1, 210, :_reduce_114,
  1, 210, :_reduce_none,
  2, 211, :_reduce_116,
  1, 211, :_reduce_117,
  3, 211, :_reduce_118,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 163, :_reduce_124,
  1, 163, :_reduce_none,
  1, 164, :_reduce_126,
  0, 216, :_reduce_127,
  4, 164, :_reduce_128,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  3, 182, :_reduce_200,
  3, 182, :_reduce_201,
  6, 182, :_reduce_202,
  5, 182, :_reduce_203,
  5, 182, :_reduce_204,
  5, 182, :_reduce_205,
  5, 182, :_reduce_206,
  4, 182, :_reduce_207,
  3, 182, :_reduce_208,
  3, 182, :_reduce_209,
  3, 182, :_reduce_210,
  2, 182, :_reduce_211,
  2, 182, :_reduce_212,
  2, 182, :_reduce_213,
  2, 182, :_reduce_214,
  3, 182, :_reduce_215,
  3, 182, :_reduce_216,
  3, 182, :_reduce_217,
  3, 182, :_reduce_218,
  3, 182, :_reduce_219,
  3, 182, :_reduce_220,
  4, 182, :_reduce_221,
  2, 182, :_reduce_222,
  2, 182, :_reduce_223,
  3, 182, :_reduce_224,
  3, 182, :_reduce_225,
  3, 182, :_reduce_226,
  3, 182, :_reduce_227,
  1, 182, :_reduce_none,
  3, 182, :_reduce_229,
  3, 182, :_reduce_230,
  3, 182, :_reduce_231,
  3, 182, :_reduce_232,
  3, 182, :_reduce_233,
  2, 182, :_reduce_234,
  2, 182, :_reduce_235,
  3, 182, :_reduce_236,
  3, 182, :_reduce_237,
  3, 182, :_reduce_238,
  3, 182, :_reduce_239,
  3, 182, :_reduce_240,
  6, 182, :_reduce_241,
  1, 182, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  3, 219, :_reduce_247,
  3, 219, :_reduce_248,
  1, 222, :_reduce_none,
  1, 223, :_reduce_none,
  2, 223, :_reduce_none,
  4, 223, :_reduce_252,
  2, 223, :_reduce_253,
  1, 217, :_reduce_none,
  3, 217, :_reduce_255,
  3, 228, :_reduce_256,
  3, 228, :_reduce_257,
  0, 230, :_reduce_258,
  1, 230, :_reduce_none,
  0, 177, :_reduce_260,
  1, 177, :_reduce_none,
  2, 177, :_reduce_none,
  4, 177, :_reduce_263,
  2, 177, :_reduce_264,
  1, 200, :_reduce_265,
  2, 200, :_reduce_266,
  2, 200, :_reduce_267,
  4, 200, :_reduce_268,
  1, 200, :_reduce_269,
  0, 233, :_reduce_270,
  2, 193, :_reduce_271,
  2, 232, :_reduce_272,
  2, 231, :_reduce_273,
  0, 231, :_reduce_274,
  1, 225, :_reduce_275,
  2, 225, :_reduce_276,
  3, 225, :_reduce_277,
  4, 225, :_reduce_278,
  1, 171, :_reduce_279,
  1, 171, :_reduce_none,
  3, 170, :_reduce_281,
  4, 170, :_reduce_282,
  2, 170, :_reduce_283,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_294,
  0, 256, :_reduce_295,
  4, 220, :_reduce_296,
  0, 257, :_reduce_297,
  4, 220, :_reduce_298,
  0, 258, :_reduce_299,
  4, 220, :_reduce_300,
  3, 220, :_reduce_301,
  3, 220, :_reduce_302,
  2, 220, :_reduce_303,
  3, 220, :_reduce_304,
  3, 220, :_reduce_305,
  1, 220, :_reduce_306,
  4, 220, :_reduce_307,
  3, 220, :_reduce_308,
  1, 220, :_reduce_309,
  5, 220, :_reduce_310,
  4, 220, :_reduce_311,
  3, 220, :_reduce_312,
  2, 220, :_reduce_313,
  1, 220, :_reduce_none,
  2, 220, :_reduce_315,
  2, 220, :_reduce_316,
  6, 220, :_reduce_317,
  6, 220, :_reduce_318,
  4, 220, :_reduce_319,
  4, 220, :_reduce_320,
  5, 220, :_reduce_321,
  4, 220, :_reduce_322,
  5, 220, :_reduce_323,
  6, 220, :_reduce_324,
  0, 259, :_reduce_325,
  6, 220, :_reduce_326,
  0, 260, :_reduce_327,
  7, 220, :_reduce_328,
  0, 261, :_reduce_329,
  5, 220, :_reduce_330,
  0, 262, :_reduce_331,
  6, 220, :_reduce_332,
  0, 263, :_reduce_333,
  0, 264, :_reduce_334,
  9, 220, :_reduce_335,
  1, 220, :_reduce_336,
  1, 220, :_reduce_337,
  1, 220, :_reduce_338,
  1, 220, :_reduce_339,
  1, 176, :_reduce_none,
  1, 199, :_reduce_341,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  2, 247, :_reduce_344,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 248, :_reduce_none,
  5, 248, :_reduce_348,
  1, 159, :_reduce_none,
  2, 159, :_reduce_350,
  1, 251, :_reduce_none,
  1, 251, :_reduce_none,
  1, 265, :_reduce_353,
  3, 265, :_reduce_354,
  1, 268, :_reduce_355,
  3, 268, :_reduce_356,
  1, 267, :_reduce_none,
  3, 267, :_reduce_358,
  5, 267, :_reduce_359,
  1, 267, :_reduce_360,
  3, 267, :_reduce_361,
  2, 269, :_reduce_362,
  1, 269, :_reduce_363,
  4, 270, :_reduce_364,
  2, 270, :_reduce_365,
  2, 270, :_reduce_366,
  2, 270, :_reduce_367,
  1, 270, :_reduce_368,
  2, 276, :_reduce_369,
  0, 276, :_reduce_370,
  6, 277, :_reduce_371,
  8, 277, :_reduce_372,
  4, 277, :_reduce_373,
  6, 277, :_reduce_374,
  4, 277, :_reduce_375,
  2, 277, :_reduce_none,
  6, 277, :_reduce_377,
  2, 277, :_reduce_378,
  4, 277, :_reduce_379,
  6, 277, :_reduce_380,
  2, 277, :_reduce_381,
  4, 277, :_reduce_382,
  2, 277, :_reduce_383,
  4, 277, :_reduce_384,
  1, 277, :_reduce_none,
  0, 281, :_reduce_386,
  1, 281, :_reduce_387,
  3, 282, :_reduce_388,
  4, 282, :_reduce_389,
  1, 283, :_reduce_390,
  4, 283, :_reduce_391,
  1, 284, :_reduce_392,
  3, 284, :_reduce_393,
  1, 285, :_reduce_394,
  1, 285, :_reduce_none,
  0, 289, :_reduce_396,
  0, 290, :_reduce_397,
  4, 246, :_reduce_398,
  4, 287, :_reduce_399,
  1, 287, :_reduce_400,
  0, 293, :_reduce_401,
  4, 288, :_reduce_402,
  0, 294, :_reduce_403,
  4, 288, :_reduce_404,
  0, 296, :_reduce_405,
  4, 292, :_reduce_406,
  2, 190, :_reduce_407,
  4, 190, :_reduce_408,
  5, 190, :_reduce_409,
  5, 190, :_reduce_410,
  2, 245, :_reduce_411,
  4, 245, :_reduce_412,
  4, 245, :_reduce_413,
  3, 245, :_reduce_414,
  3, 245, :_reduce_415,
  3, 245, :_reduce_416,
  2, 245, :_reduce_417,
  1, 245, :_reduce_418,
  4, 245, :_reduce_419,
  0, 298, :_reduce_420,
  4, 244, :_reduce_421,
  0, 299, :_reduce_422,
  4, 244, :_reduce_423,
  0, 300, :_reduce_424,
  3, 195, :_reduce_425,
  0, 301, :_reduce_426,
  0, 302, :_reduce_427,
  4, 295, :_reduce_428,
  5, 249, :_reduce_429,
  1, 303, :_reduce_430,
  1, 303, :_reduce_none,
  0, 306, :_reduce_432,
  0, 307, :_reduce_433,
  7, 250, :_reduce_434,
  1, 305, :_reduce_435,
  1, 305, :_reduce_none,
  1, 304, :_reduce_437,
  3, 304, :_reduce_438,
  3, 304, :_reduce_439,
  1, 308, :_reduce_none,
  2, 308, :_reduce_441,
  3, 308, :_reduce_442,
  1, 308, :_reduce_443,
  1, 308, :_reduce_444,
  1, 183, :_reduce_none,
  3, 312, :_reduce_446,
  1, 312, :_reduce_none,
  3, 314, :_reduce_448,
  1, 314, :_reduce_none,
  1, 316, :_reduce_450,
  1, 317, :_reduce_451,
  1, 315, :_reduce_none,
  4, 315, :_reduce_453,
  4, 315, :_reduce_454,
  3, 315, :_reduce_455,
  4, 315, :_reduce_456,
  4, 315, :_reduce_457,
  3, 315, :_reduce_458,
  0, 320, :_reduce_459,
  4, 315, :_reduce_460,
  2, 315, :_reduce_461,
  0, 321, :_reduce_462,
  4, 315, :_reduce_463,
  2, 315, :_reduce_464,
  0, 322, :_reduce_465,
  4, 315, :_reduce_466,
  1, 309, :_reduce_467,
  1, 309, :_reduce_468,
  2, 309, :_reduce_469,
  3, 309, :_reduce_470,
  5, 309, :_reduce_471,
  2, 309, :_reduce_472,
  4, 309, :_reduce_473,
  1, 309, :_reduce_none,
  2, 323, :_reduce_475,
  3, 323, :_reduce_476,
  2, 310, :_reduce_477,
  4, 310, :_reduce_478,
  1, 310, :_reduce_479,
  3, 310, :_reduce_480,
  1, 325, :_reduce_481,
  3, 325, :_reduce_482,
  1, 324, :_reduce_none,
  3, 311, :_reduce_484,
  1, 311, :_reduce_485,
  1, 311, :_reduce_486,
  3, 311, :_reduce_487,
  1, 311, :_reduce_488,
  1, 326, :_reduce_489,
  3, 326, :_reduce_490,
  2, 329, :_reduce_491,
  1, 329, :_reduce_492,
  1, 330, :_reduce_493,
  3, 330, :_reduce_494,
  2, 327, :_reduce_495,
  1, 327, :_reduce_496,
  2, 328, :_reduce_497,
  1, 318, :_reduce_none,
  3, 318, :_reduce_499,
  3, 318, :_reduce_500,
  2, 318, :_reduce_501,
  2, 318, :_reduce_502,
  1, 318, :_reduce_none,
  1, 318, :_reduce_none,
  1, 318, :_reduce_none,
  2, 318, :_reduce_506,
  2, 318, :_reduce_507,
  1, 333, :_reduce_none,
  1, 333, :_reduce_none,
  1, 333, :_reduce_none,
  1, 333, :_reduce_none,
  1, 333, :_reduce_none,
  1, 333, :_reduce_none,
  1, 333, :_reduce_none,
  1, 333, :_reduce_none,
  1, 333, :_reduce_516,
  2, 333, :_reduce_517,
  1, 313, :_reduce_518,
  2, 334, :_reduce_519,
  2, 319, :_reduce_520,
  3, 319, :_reduce_521,
  1, 319, :_reduce_522,
  6, 158, :_reduce_523,
  0, 158, :_reduce_524,
  1, 335, :_reduce_525,
  1, 335, :_reduce_none,
  1, 335, :_reduce_none,
  2, 336, :_reduce_528,
  1, 336, :_reduce_none,
  2, 160, :_reduce_530,
  1, 160, :_reduce_none,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 235, :_reduce_534,
  1, 338, :_reduce_535,
  2, 338, :_reduce_536,
  3, 339, :_reduce_537,
  1, 339, :_reduce_538,
  1, 339, :_reduce_539,
  3, 236, :_reduce_540,
  4, 237, :_reduce_541,
  3, 238, :_reduce_542,
  0, 342, :_reduce_543,
  3, 342, :_reduce_544,
  1, 343, :_reduce_545,
  2, 343, :_reduce_546,
  3, 240, :_reduce_547,
  0, 345, :_reduce_548,
  3, 345, :_reduce_549,
  3, 239, :_reduce_550,
  3, 241, :_reduce_551,
  0, 346, :_reduce_552,
  3, 346, :_reduce_553,
  0, 347, :_reduce_554,
  3, 347, :_reduce_555,
  0, 331, :_reduce_556,
  2, 331, :_reduce_557,
  0, 340, :_reduce_558,
  2, 340, :_reduce_559,
  0, 341, :_reduce_560,
  2, 341, :_reduce_561,
  1, 344, :_reduce_562,
  2, 344, :_reduce_563,
  0, 349, :_reduce_564,
  4, 344, :_reduce_565,
  1, 348, :_reduce_566,
  1, 348, :_reduce_567,
  1, 348, :_reduce_568,
  1, 348, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 350, :_reduce_572,
  3, 351, :_reduce_573,
  1, 337, :_reduce_574,
  2, 337, :_reduce_575,
  1, 218, :_reduce_576,
  1, 218, :_reduce_577,
  1, 218, :_reduce_578,
  1, 218, :_reduce_579,
  1, 208, :_reduce_580,
  1, 208, :_reduce_581,
  1, 208, :_reduce_582,
  1, 208, :_reduce_583,
  1, 208, :_reduce_584,
  1, 209, :_reduce_585,
  1, 209, :_reduce_586,
  1, 209, :_reduce_587,
  1, 209, :_reduce_588,
  1, 209, :_reduce_589,
  1, 209, :_reduce_590,
  1, 209, :_reduce_591,
  1, 242, :_reduce_592,
  1, 242, :_reduce_593,
  1, 175, :_reduce_594,
  1, 175, :_reduce_595,
  1, 180, :_reduce_596,
  1, 180, :_reduce_597,
  0, 352, :_reduce_598,
  4, 252, :_reduce_599,
  0, 252, :_reduce_600,
  3, 254, :_reduce_601,
  3, 254, :_reduce_602,
  0, 354, :_reduce_603,
  3, 254, :_reduce_604,
  4, 353, :_reduce_605,
  2, 353, :_reduce_606,
  2, 353, :_reduce_607,
  2, 353, :_reduce_608,
  1, 353, :_reduce_609,
  2, 356, :_reduce_610,
  0, 356, :_reduce_611,
  6, 291, :_reduce_612,
  8, 291, :_reduce_613,
  4, 291, :_reduce_614,
  6, 291, :_reduce_615,
  4, 291, :_reduce_616,
  6, 291, :_reduce_617,
  2, 291, :_reduce_618,
  4, 291, :_reduce_619,
  6, 291, :_reduce_620,
  2, 291, :_reduce_621,
  4, 291, :_reduce_622,
  2, 291, :_reduce_623,
  4, 291, :_reduce_624,
  1, 291, :_reduce_625,
  0, 291, :_reduce_626,
  1, 229, :_reduce_627,
  1, 286, :_reduce_628,
  1, 286, :_reduce_629,
  1, 286, :_reduce_630,
  1, 286, :_reduce_631,
  1, 266, :_reduce_none,
  1, 266, :_reduce_633,
  1, 358, :_reduce_634,
  1, 359, :_reduce_635,
  3, 359, :_reduce_636,
  1, 278, :_reduce_637,
  3, 278, :_reduce_638,
  1, 360, :_reduce_639,
  2, 361, :_reduce_640,
  1, 361, :_reduce_641,
  2, 362, :_reduce_642,
  1, 362, :_reduce_643,
  1, 271, :_reduce_644,
  3, 271, :_reduce_645,
  1, 355, :_reduce_646,
  3, 355, :_reduce_647,
  1, 332, :_reduce_none,
  1, 332, :_reduce_none,
  2, 274, :_reduce_650,
  2, 272, :_reduce_651,
  1, 272, :_reduce_652,
  3, 363, :_reduce_653,
  3, 364, :_reduce_654,
  1, 279, :_reduce_655,
  3, 279, :_reduce_656,
  1, 357, :_reduce_657,
  3, 357, :_reduce_658,
  1, 365, :_reduce_none,
  1, 365, :_reduce_none,
  2, 280, :_reduce_661,
  1, 280, :_reduce_662,
  1, 366, :_reduce_none,
  1, 366, :_reduce_none,
  2, 275, :_reduce_665,
  2, 273, :_reduce_666,
  0, 273, :_reduce_667,
  1, 255, :_reduce_none,
  3, 255, :_reduce_669,
  0, 243, :_reduce_670,
  2, 243, :_reduce_none,
  1, 227, :_reduce_672,
  3, 227, :_reduce_673,
  3, 367, :_reduce_674,
  2, 367, :_reduce_675,
  4, 367, :_reduce_676,
  2, 367, :_reduce_677,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 297, :_reduce_none,
  1, 297, :_reduce_none,
  1, 297, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 179, :_reduce_690,
  1, 179, :_reduce_691,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 203, :_reduce_696,
  2, 178, :_reduce_697,
  0, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 253, :_reduce_701,
  1, 253, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_none,
  0, 224, :_reduce_705 ]

racc_reduce_n = 706

racc_shift_n = 1178

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tBDOT2 => 143,
  :tBDOT3 => 144,
  :tEQL => 145,
  :tLOWEST => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tBDOT2",
  "tBDOT3",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "p_expr",
  "@2",
  "expr_value_do",
  "do",
  "@3",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@4",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@5",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "args_forward",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@6",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "p_case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_no_kwarg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@16",
  "@17",
  "f_args",
  "do_block",
  "@18",
  "@19",
  "do_body",
  "@20",
  "operation3",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "cases",
  "p_top_expr",
  "p_cases",
  "@26",
  "@27",
  "p_top_expr_body",
  "p_args",
  "p_args_tail",
  "p_kwargs",
  "p_as",
  "p_variable",
  "p_alt",
  "p_expr_basic",
  "p_lparen",
  "p_lbracket",
  "p_value",
  "p_const",
  "@28",
  "@29",
  "@30",
  "p_args_head",
  "p_arg",
  "p_args_post",
  "p_kwarg",
  "p_kwrest",
  "p_kwnorest",
  "p_kw",
  "p_kw_label",
  "string_contents",
  "kwrest_mark",
  "p_primitive",
  "p_var_ref",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@31",
  "ssym",
  "dsym",
  "@32",
  "args_tail",
  "@33",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = val
                    
    result
end

def _reduce_10(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_12(val, _values, result)
                      result = []
                    
    result
end

def _reduce_13(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_18(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 30 omitted

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_33(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                                         nil, nil, nil,
                                                         nil, val[4])
                      begin_body = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.multi_assign(val[0], val[1], begin_body)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_43(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 46 omitted

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_49(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_51(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_52(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      pattern_variables.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_53(val, _values, result)
                      @lexer.in_kwarg = val[2]
                      result = @builder.in_match(val[0], val[1], val[3])
                    
    result
end

# reduce 54 omitted

# reduce 55 omitted

def _reduce_56(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_57(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

def _reduce_61(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_62(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_63(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 64 omitted

def _reduce_65(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_74(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 80 omitted

def _reduce_81(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_85(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 90 omitted

def _reduce_91(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_94(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_95(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_99(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_101(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_112(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_113(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_114(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_117(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_118(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

def _reduce_124(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 125 omitted

def _reduce_126(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_127(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_128(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

def _reduce_200(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_206(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_207(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 228 omitted

def _reduce_229(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_241(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_248(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

def _reduce_252(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 254 omitted

def _reduce_255(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_256(val, _values, result)
                      result = val
                    
    result
end

def _reduce_257(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[1]
                      end

                      result = [val[0], [@builder.forwarded_args(val[1])], val[2]]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 259 omitted

def _reduce_260(val, _values, result)
                      result = []
                    
    result
end

# reduce 261 omitted

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_264(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_268(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_270(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_271(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_273(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_274(val, _values, result)
                      result = []
                    
    result
end

def _reduce_275(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_276(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_277(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_278(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

def _reduce_294(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_295(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_296(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_302(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_304(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_305(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_307(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_310(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_311(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_313(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 314 omitted

def _reduce_315(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_316(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_317(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_318(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_319(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_321(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_322(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_323(val, _values, result)
                      *in_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case_match(val[0], val[1],
                                             in_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_325(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_326(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_327(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_329(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_330(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                    
    result
end

def _reduce_331(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:def)
                      @current_arg_stack.push(nil)
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_333(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_334(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:defs)
                      @current_arg_stack.push(nil)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_336(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_337(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_338(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_339(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 342 omitted

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

def _reduce_348(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 349 omitted

def _reduce_350(val, _values, result)
                      result = val
                    
    result
end

# reduce 351 omitted

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_355(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 357 omitted

def _reduce_358(val, _values, result)
                      result = val[0].
                                  push(val[2])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].
                                  push(val[2]).
                                  concat(val[4])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_361(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = @builder.restarg(val[0], val[1])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = @builder.restarg(val[0])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_370(val, _values, result)
                      result = []
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_378(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_379(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_380(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_381(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 385 omitted

def _reduce_386(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_387(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_388(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_389(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_390(val, _values, result)
                      result = []
                    
    result
end

def _reduce_391(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_392(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_393(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_394(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 395 omitted

def _reduce_396(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                      @context.push(:lambda)
                    
    result
end

def _reduce_397(val, _values, result)
                      @context.pop
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_398(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_399(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_400(val, _values, result)
                      if val[0].any?
                        @max_numparam_stack.has_ordinary_params!
                      end
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_401(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_402(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_403(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_404(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_405(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_406(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_407(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_413(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_415(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_416(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_417(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_418(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_419(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_420(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_421(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_422(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_423(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_424(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_425(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[2] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                    
    result
end

def _reduce_426(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_427(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_428(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_429(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 431 omitted

def _reduce_432(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push
                      @pattern_hash_keys.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_433(val, _values, result)
                      @lexer.in_kwarg = val[1]
                    
    result
end

def _reduce_434(val, _values, result)
                      result = [ @builder.in_pattern(val[0], *val[2], val[3], val[5]),
                                 *val[6] ]
                    
    result
end

def _reduce_435(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 436 omitted

def _reduce_437(val, _values, result)
                      result = [ val[0], nil ]
                    
    result
end

def _reduce_438(val, _values, result)
                      result = [ val[0], @builder.if_guard(val[1], val[2]) ]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = [ val[0], @builder.unless_guard(val[1], val[2]) ]
                    
    result
end

# reduce 440 omitted

def _reduce_441(val, _values, result)
                      # array patterns that end with comma
                      # like 1, 2,
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0])
                      result = @builder.array_pattern(nil, [ item ], nil)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = @builder.array_pattern(nil, [val[0]].concat(val[2]), nil)
                    
    result
end

def _reduce_443(val, _values, result)
                      result = @builder.array_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_444(val, _values, result)
                      result = @builder.hash_pattern(nil, val[0], nil)
                    
    result
end

# reduce 445 omitted

def _reduce_446(val, _values, result)
                      result = @builder.match_as(val[0], val[1], val[2])
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      result = @builder.match_alt(val[0], val[1], val[2])
                    
    result
end

# reduce 449 omitted

def _reduce_450(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_451(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

# reduce 452 omitted

def _reduce_453(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_454(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = @builder.const_pattern(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_456(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_457(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = @builder.const_pattern(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_459(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_460(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.array_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = @builder.array_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_462(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_463(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.hash_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = @builder.hash_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_465(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_466(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_469(val, _values, result)
                      result = [ *val[0], val[1] ]
                    
    result
end

def _reduce_470(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest ]
                    
    result
end

def _reduce_471(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest, *val[4] ]
                    
    result
end

def _reduce_472(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]) ]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]), *val[3] ]
                    
    result
end

# reduce 474 omitted

def _reduce_475(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0])
                      result = [ item ]
                    
    result
end

def _reduce_476(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      last_item = @builder.match_with_trailing_comma(val[1])
                      result = [ *val[0], last_item ]
                    
    result
end

def _reduce_477(val, _values, result)
                      match_rest = @builder.match_rest(val[0], val[1])
                      result = [ match_rest ]
                    
    result
end

def _reduce_478(val, _values, result)
                      match_rest = @builder.match_rest(val[0], val[1])
                      result = [ match_rest, *val[3] ]
                    
    result
end

def _reduce_479(val, _values, result)
                      match_rest = @builder.match_rest(val[0])
                      result = [ match_rest ]
                    
    result
end

def _reduce_480(val, _values, result)
                      match_rest = @builder.match_rest(val[0])
                      result = [ match_rest, *val[2] ]
                    
    result
end

def _reduce_481(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_482(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

# reduce 483 omitted

def _reduce_484(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_485(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_487(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_488(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_489(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_490(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.match_pair(*val[0], val[1])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.match_label(*val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                    check_kwarg_name(val[0])
                    result = [:label, val[0]]
                  
    result
end

def _reduce_494(val, _values, result)
                    result = [:quoted, [val[0], val[1], val[2]]]
                  
    result
end

def _reduce_495(val, _values, result)
                      result = [ @builder.match_rest(val[0], val[1]) ]
                    
    result
end

def _reduce_496(val, _values, result)
                      result = [ @builder.match_rest(val[0], nil) ]
                    
    result
end

def _reduce_497(val, _values, result)
                      result = [ @builder.match_nil_pattern(val[0], val[1]) ]
                    
    result
end

# reduce 498 omitted

def _reduce_499(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_502(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

def _reduce_506(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_507(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

# reduce 508 omitted

# reduce 509 omitted

# reduce 510 omitted

# reduce 511 omitted

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_517(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_518(val, _values, result)
                      result = @builder.match_var(val[0])
                    
    result
end

def _reduce_519(val, _values, result)
                      lvar = @builder.accessible(@builder.ident(val[1]))
                      result = @builder.pin(val[0], lvar)
                    
    result
end

def _reduce_520(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = @builder.const(val[0])
                   
    result
end

def _reduce_523(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_524(val, _values, result)
                      result = []
                    
    result
end

def _reduce_525(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 526 omitted

# reduce 527 omitted

def _reduce_528(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 529 omitted

def _reduce_530(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

def _reduce_534(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_535(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_536(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_537(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_538(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_539(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_540(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_541(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_542(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_543(val, _values, result)
                      result = []
                    
    result
end

def _reduce_544(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_545(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_546(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_547(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_548(val, _values, result)
                      result = []
                    
    result
end

def _reduce_549(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_550(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_551(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_552(val, _values, result)
                      result = []
                    
    result
end

def _reduce_553(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_554(val, _values, result)
                      result = []
                    
    result
end

def _reduce_555(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_556(val, _values, result)
                      result = []
                    
    result
end

def _reduce_557(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_558(val, _values, result)
                      result = []
                    
    result
end

def _reduce_559(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_560(val, _values, result)
                      result = []
                    
    result
end

def _reduce_561(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_562(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_563(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_564(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_565(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_566(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_567(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_568(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

def _reduce_572(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_573(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_575(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_576(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_577(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_578(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_579(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_580(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_581(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_582(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_583(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_584(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_585(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_586(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_587(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_588(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_589(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_590(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_591(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_592(val, _values, result)
                      if (node = val[0]) && node.type == :ident
                        name = node.children[0]

                        if name =~ /\A_[1-9]\z/ && !static_env.declared?(name) && context.in_dynamic_block?
                          # definitely an implicit param
                          location = node.loc.expression

                          if max_numparam_stack.has_ordinary_params?
                            diagnostic :error, :ordinary_param_defined, nil, [nil, location]
                          end

                          raw_context = context.stack.dup
                          raw_max_numparam_stack = max_numparam_stack.stack.dup

                          # ignore current block scope
                          raw_context.pop
                          raw_max_numparam_stack.pop

                          raw_context.reverse_each do |outer_scope|
                            if outer_scope == :block || outer_scope == :lambda
                              outer_scope_has_numparams = raw_max_numparam_stack.pop > 0

                              if outer_scope_has_numparams
                                diagnostic :error, :numparam_used_in_outer_scope, nil, [nil, location]
                              else
                                # for now it's ok, but an outer scope can also be a block
                                # with numparams, so we need to continue
                              end
                            else
                              # found an outer scope that can't have numparams
                              # like def/class/etc
                              break
                            end
                          end

                          static_env.declare(name)
                          max_numparam_stack.register(name[1].to_i)
                        end
                      end

                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_593(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_595(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_598(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_599(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_600(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_601(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_602(val, _values, result)
                      result = @builder.forward_args(val[0], val[1], val[2])
                      @static_env.declare_forward_args

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_603(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_604(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_605(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_606(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_607(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_608(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_609(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_610(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_611(val, _values, result)
                      result = []
                    
    result
end

def _reduce_612(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_613(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_614(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_615(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_616(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_617(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_618(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_619(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_620(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_621(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_622(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_623(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_624(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_625(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_626(val, _values, result)
                      result = []
                    
    result
end

def _reduce_627(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_628(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_629(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_630(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_631(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 632 omitted

def _reduce_633(val, _values, result)
                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      result = val[0]
                    
    result
end

def _reduce_634(val, _values, result)
                      @current_arg_stack.set(val[0][0])
                      result = val[0]
                    
    result
end

def _reduce_635(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_636(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_637(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_638(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_639(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      @current_arg_stack.set(val[0][0])

                      result = val[0]
                    
    result
end

def _reduce_640(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_641(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_642(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_643(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_644(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_645(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_646(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_647(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 648 omitted

# reduce 649 omitted

def _reduce_650(val, _values, result)
                      result = [ @builder.kwnilarg(val[0], val[1]) ]
                    
    result
end

def _reduce_651(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_652(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_653(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_654(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_655(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_656(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_657(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_658(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 659 omitted

# reduce 660 omitted

def _reduce_661(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_662(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 663 omitted

# reduce 664 omitted

def _reduce_665(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_666(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_667(val, _values, result)
                      result = []
                    
    result
end

# reduce 668 omitted

def _reduce_669(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_670(val, _values, result)
                      result = []
                    
    result
end

# reduce 671 omitted

def _reduce_672(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_673(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_674(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_675(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_676(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_677(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 678 omitted

# reduce 679 omitted

# reduce 680 omitted

# reduce 681 omitted

# reduce 682 omitted

# reduce 683 omitted

# reduce 684 omitted

# reduce 685 omitted

# reduce 686 omitted

# reduce 687 omitted

# reduce 688 omitted

# reduce 689 omitted

def _reduce_690(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_691(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 692 omitted

# reduce 693 omitted

# reduce 694 omitted

# reduce 695 omitted

def _reduce_696(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_697(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 698 omitted

# reduce 699 omitted

# reduce 700 omitted

def _reduce_701(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 702 omitted

# reduce 703 omitted

# reduce 704 omitted

def _reduce_705(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby27
  end   # module Parser
