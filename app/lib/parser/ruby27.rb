# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby27 < Parser::Base


  def version
    27
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-488,580,-102,-108,220,-103,-109,-488,-488,-488,274,-106,-488,-488,-488',
'593,-488,274,-105,594,211,212,243,222,-488,959,-488,-488,-488,1026,-109',
'-103,580,621,-88,623,-488,-488,580,-488,-488,-488,-488,-488,580,-74',
'580,-107,-110,-102,-104,-108,116,-496,240,211,212,115,242,241,-496,1004',
'-110,820,223,1004,-488,-488,-488,-488,-488,-488,-488,-488,-488,-488',
'-488,-488,-488,-488,-583,726,-488,-488,-488,-104,-488,-488,-582,-105',
'-488,-107,-106,-488,-488,274,-488,273,-488,620,-488,622,-488,-488,273',
'-488,-488,-488,-488,-488,-110,-488,274,-488,223,-100,-583,-95,-496,116',
'-102,-108,846,-103,115,-102,-108,-488,-103,-106,-488,-488,-488,-488',
'-106,-488,-105,-488,-586,1004,-94,-105,-488,-488,-488,-586,-586,-586',
'-109,223,116,-586,-586,-109,-586,115,116,-582,-93,269,-99,115,116,-586',
'116,-107,-110,115,-104,115,-107,-110,819,-104,-586,-586,269,-586,-586',
'-586,-586,-586,273,-95,773,116,-98,-96,94,95,115,112,800,-97,-95,-492',
'94,95,-96,273,-98,-97,-492,635,-586,-586,-586,-586,-586,-586,-586,-586',
'-586,-586,-586,-586,-586,-586,-490,-101,-586,-586,-586,-95,647,-490',
'-95,799,-586,116,539,-586,1004,541,115,800,-586,-95,-586,608,-586,-586',
'-104,-586,-586,-586,-586,-586,-296,-586,-586,-586,-98,-96,-499,-296',
'-296,-296,-582,-97,-492,-296,-296,223,-296,-586,96,97,-586,-586,799',
'-586,-491,-586,96,97,-580,211,212,-491,-586,-586,-106,-490,-296,-296',
'80,-296,-296,-296,-296,-296,-98,-96,641,-98,-96,639,81,-97,608,-93,-97',
'610,609,613,-98,-96,82,640,211,212,-102,-97,-296,-296,-296,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,-296,-488,631,-296,-296,-296',
'223,646,-488,987,-491,-296,269,-580,-296,-297,812,-488,587,-296,526',
'-296,-297,-296,-296,-105,-296,-296,-296,-296,-296,-297,-296,-586,-296',
'630,-580,610,609,624,-586,-586,-586,-269,223,-586,-586,-586,-296,-586',
'539,-296,-296,541,-296,642,-296,116,-586,-586,-586,-586,115,-296,-296',
'-108,-488,-488,539,-586,-586,538,-586,-586,-586,-586,-586,116,-109,116',
'-297,-297,115,608,115,560,608,557,556,555,560,558,557,556,555,628,558',
'460,-500,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586',
'-586,-586,-107,651,-586,-586,-586,608,788,-586,625,539,-586,608,541',
'-586,-586,243,-586,-485,-586,243,-586,-579,-586,-586,-485,-586,-586',
'-586,-586,-586,243,-586,-586,-586,610,609,116,610,609,611,608,115,-110',
'-103,758,608,243,-586,843,812,-586,-586,-586,-586,957,-586,608,-586',
'-586,839,-499,786,-586,-586,-106,-586,-586,-586,223,610,609,-586,-586',
'-485,-586,610,609,606,223,760,-485,218,-485,-586,-495,-579,211,212,267',
'-485,223,-495,674,-88,-586,-586,677,-586,-586,-586,-586,-586,211,212',
'610,609,606,218,-579,610,609,615,843,812,529,223,260,261,-102,-105,610',
'609,619,458,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586',
'-586,-586,-485,-485,-586,-586,-586,532,647,641,219,-488,-586,-495,-494',
'-586,259,258,-488,218,-586,-494,-586,688,-586,-586,267,-586,-586,-586',
'-586,-586,-296,-586,-586,-586,219,217,773,-296,-296,-296,576,575,693',
'-296,-296,-334,-296,-586,694,223,-586,-586,-334,-97,-96,-586,696,700',
'703,704,787,-334,-586,-586,-106,-105,-296,-296,642,-296,-296,-296,-296',
'-296,-488,706,865,-494,708,-296,710,-493,219,-95,220,718,-296,404,-493',
'719,720,-583,406,405,-104,-296,-296,-296,-296,-296,-296,-296,-296,-296',
'-296,-296,-296,-296,-296,-296,-334,-334,-296,-296,-296,-98,646,526,-107',
'722,-296,600,727,-296,728,587,-107,730,-296,592,-296,-101,-296,-296',
'-104,-296,-296,-296,-296,-296,-296,-296,-110,-296,-296,-296,-493,-296',
'-296,-296,591,396,-296,-296,-296,218,-296,-296,587,747,-296,-296,596',
'-99,-100,-296,-296,-296,-296,757,761,598,-296,-296,-108,-109,-296,-296',
'762,-296,-296,-296,-296,-296,950,-270,557,556,555,-296,558,560,-500',
'557,556,555,-296,558,752,753,501,-583,754,110,111,-296,-296,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,219,217,-296',
'-296,-296,543,789,-296,712,542,-296,774,223,-296,-296,488,-296,715,-296',
'-94,-296,243,-296,-296,488,-296,-296,-296,-296,-296,-103,-296,-485,-296',
'-296,-296,527,223,791,-485,-485,-485,792,263,-485,-485,-485,-296,-485',
'797,-296,-296,-296,-296,802,-296,-485,-296,-485,-485,-485,499,-296,-296',
'-108,501,523,269,-485,-485,688,-485,-485,-485,-485,-485,560,223,557',
'556,555,218,558,560,223,557,556,555,216,558,560,269,557,556,555,278',
'558,214,-485,-485,-485,-485,-485,-485,-485,-485,-485,-485,-485,-485',
'-485,-485,243,712,-485,-485,-485,269,-485,-485,712,688,-485,243,243',
'-485,-485,712,-485,715,-485,520,-485,812,-485,-485,906,-485,-485,-485',
'-485,-485,223,-485,240,-485,219,217,242,241,218,238,239,837,223,812',
'240,982,845,-485,242,241,-485,-485,-485,-485,980,-485,513,-485,-588',
'223,512,223,-485,-485,-485,-588,-588,-588,565,-73,-588,-588,-588,218',
'-588,125,223,501,568,499,977,243,854,-588,-588,-588,-588,497,488,598',
'-271,223,222,462,-588,-588,461,-588,-588,-588,-588,-588,864,219,217',
'459,868,218,688,884,-269,576,575,240,634,888,569,242,241,892,238,239',
'893,632,-588,-588,-588,-588,-588,-588,-588,-588,-588,-588,-588,-588',
'-588,-588,219,217,-588,-588,-588,703,895,-588,897,899,-588,901,901,-588',
'-588,223,-588,907,-588,909,-588,407,-588,-588,911,-588,-588,-588,-588',
'-588,394,-588,-588,-588,219,217,914,915,-497,918,560,223,557,556,555',
'-497,558,-588,922,-272,-588,-588,-588,-588,-497,-588,223,-588,-414,924',
'703,927,-588,-588,929,-414,-414,-414,565,931,-414,-414,-414,218,-414',
'933,223,712,568,935,457,323,322,-414,-414,-414,959,964,747,458,975,263',
'978,983,-414,-414,984,-414,-414,-414,-414,-414,985,-497,-497,988,901',
'-297,901,901,993,576,575,959,-297,950,569,557,556,555,213,558,703,-297',
'-414,-414,-414,-414,-414,-414,-414,-414,-414,-414,-414,-414,-414,-414',
'219,217,-414,-414,-414,998,1000,-414,1002,269,-414,1004,1004,-414,-414',
'693,-414,210,-414,209,-414,959,-414,-414,1019,-414,-414,-414,-414,-414',
'-288,-414,-414,-414,-297,-297,-583,-288,-288,-288,-582,223,-288,-288',
'-288,-498,-288,-414,243,208,-414,-414,-498,-414,125,-414,-288,-288,-288',
'901,,-498,-414,-414,253,254,-288,-288,,-288,-288,-288,-288,-288,119',
'120,121,122,123,218,240,,246,,242,241,519,238,239,,,244,,245,,517,-288',
'-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-498',
'-498,-288,-288,-288,,,-288,,,-288,,,-288,-288,,-288,,-288,,-288,,-288',
'-288,,-288,-288,-288,-288,-288,,-288,,-288,219,217,,,218,,560,,557,556',
'555,590,558,-288,,,-288,-288,-288,-288,588,-288,,-288,-587,,,,-288,-288',
',-587,-587,-587,,,-587,-587,-587,-287,-587,,243,712,,,-287,,,-587,-587',
'-587,-587,,,-287,,,253,254,-587,-587,,-587,-587,-587,-587,-587,,219',
'217,,,218,240,,246,,242,241,977,238,239,,,244,,245,,598,-587,-587,-587',
'-587,-587,-587,-587,-587,-587,-587,-587,-587,-587,-587,-287,-287,-587',
'-587,-587,,,-587,,,-587,,,-587,-587,,-587,,-587,,-587,,-587,-587,,-587',
'-587,-587,-587,-587,,-587,-587,-587,219,217,,,,560,,557,556,555,565',
'558,,-587,,,-587,-587,-587,-587,568,-587,,-587,-303,,,,-587,-587,,-303',
'-303,-303,,,-303,-303,-303,243,-303,,563,560,,557,556,555,,558,-303',
'-303,,576,575,253,254,,569,,-303,-303,,-303,-303,-303,-303,-303,,,,240',
',,,242,241,,238,239,712,,560,,557,556,555,,558,,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,,,-303,-303,-303,',
',-303,,278,-303,,,-303,-303,712,-303,,-303,,-303,,-303,-303,,-303,-303',
'-303,-303,-303,,-303,-252,-303,119,120,121,122,123,-252,-252,-252,,',
'-252,-252,-252,-303,-252,,-303,-303,,-303,,-303,,-252,-252,-252,,,-303',
'-303,,-586,,,-252,-252,,-252,-252,-252,-252,-252,119,120,121,122,123',
'119,120,121,122,123,,,,,,,,,,,,,-252,-252,-252,-252,-252,-252,-252,-252',
'-252,-252,-252,-252,-252,-252,,,-252,-252,-252,-586,,-252,,269,-252',
',-586,-252,-252,,-252,-582,-252,,-252,-586,-252,-252,,-252,-252,-252',
'-252,-252,,-252,-252,-252,,,,,,,-586,,,,,,,-252,,,-252,-252,-252,-252',
',-252,,,,-252,-252,-252,-252,-252,-252,-252,-252,,-252,,-586,-586,,',
',,,-252,-252,,,,,,,,,,-252,-252,,-252,-252,-252,-252,-252,,560,,557',
'556,555,565,558,,,,,,,,,568,,,243,247,248,249,250,260,261,255,256,251',
'252,,236,237,-252,,253,254,,563,,-252,,,,,269,-252,573,572,576,575,240',
',246,569,242,241,,238,239,259,258,244,,245,,,,-252,-252,,,,,,,,,,,223',
',,-252,257,,-252,,,,,-252,296,70,71,72,9,58,-252,,,64,65,,,,68,,66,67',
'69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,636,8,46,298,10',
'108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,243,247,248',
'249,250,260,261,255,256,251,252,,236,237,,,253,254,,40,,,33,,,59,60',
',,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,92,80,83',
'84,,85,87,86,88,,,,,81,91,,257,,-244,,,63,,82,96,97,296,70,71,72,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,',
',19,,,,,636,8,46,298,10,108,107,109,98,57,100,99,101,,102,110,111,,94',
'95,42,43,41,243,247,248,249,250,260,261,255,256,251,252,,236,237,,,253',
'254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244',
'20,245,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,257,,,,,63,,82,96,97,296',
'70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104',
'103,105,106,,,19,,,,,,8,46,298,10,108,107,109,98,57,100,99,101,,102',
'110,111,,94,95,42,43,41,243,247,248,249,250,260,261,255,256,251,252',
',236,237,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238',
'239,259,258,244,20,245,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,257,,',
',,63,,82,96,97,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74',
',,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,298,10,108,107,109,98,57',
'100,99,101,,102,110,111,,94,95,42,43,41,243,247,248,249,250,260,261',
'255,256,251,252,,236,237,,,253,254,,40,,,300,,,59,60,,,61,,35,240,,246',
'45,242,241,,238,239,259,258,244,20,245,,,,92,80,83,84,,85,87,86,88,',
',,,81,91,,257,,,,,63,,82,96,97,296,70,71,72,9,58,,,,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,298,10',
'108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,243,247,248',
'249,250,260,261,255,256,251,252,,236,237,,,253,254,,40,,,33,,,59,60',
',,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,92,80,83',
'84,,85,87,86,88,,,,,81,91,,257,,,,,63,,82,96,97,296,70,71,72,9,58,,',
',64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19',
',,,,,8,46,298,10,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42',
'43,41,243,247,248,249,250,260,261,255,256,251,252,,236,237,,,253,254',
',40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244,20',
'245,,,,92,80,83,84,,85,87,86,88,,,,,81,91,223,257,,,,,63,,82,96,97,296',
'70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104',
'103,105,106,,,19,,,,,,8,46,298,10,108,107,109,98,57,100,99,101,,102',
'110,111,,94,95,42,43,41,243,247,248,249,250,260,261,255,256,251,252',
',236,237,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238',
'239,259,258,244,20,245,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,257,,',
',,63,,82,96,97,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74',
',,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,298,10,108,107,109,98,57',
'100,99,101,,102,110,111,,94,95,42,43,41,243,247,248,249,250,260,261',
'255,,251,252,,,,,,253,254,,40,,,300,,,59,60,,,61,,35,240,,246,45,242',
'241,,238,239,259,258,244,20,245,,,,92,80,83,84,,85,87,86,88,,,,,81,91',
',,,,,,63,,82,96,97,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31',
'73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,298,10,108,107,109',
'98,57,100,99,101,,102,110,111,,94,95,42,43,41,243,247,248,249,250,260',
'261,255,256,251,252,,-607,-607,,,253,254,,40,,,33,,,59,60,,,61,,35,240',
',246,45,242,241,,238,239,259,258,244,20,245,,,,92,80,83,84,,85,87,86',
'88,,,,,81,91,,,,,,,63,,82,96,97,296,70,71,72,9,58,,,,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,298,10',
'108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,243,-607,-607',
'-607,-607,260,261,,,-607,-607,,,,,,253,254,,40,,,33,,,59,60,,,61,,35',
'240,,246,45,242,241,,238,239,259,258,244,20,245,,,,92,80,83,84,,85,87',
'86,88,,,,,81,91,,,,,,,63,,82,96,97,296,70,71,72,9,58,,,,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,298',
'10,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,243,247',
'248,249,250,260,261,,,251,252,,,,,,253,254,,40,,,33,,,59,60,,,61,,35',
'240,,246,45,242,241,,238,239,259,258,244,20,245,,,,92,80,83,84,,85,87',
'86,88,,,,,81,91,,,,,,,63,,82,96,97,296,70,71,72,9,58,,,,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,298',
'10,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,243,247',
'248,249,250,260,261,255,256,251,252,,-607,-607,,,253,254,,40,,,33,,',
'59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,92',
'80,83,84,,85,87,86,88,,,,,81,91,,,,,,,63,,82,96,97,296,70,71,72,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,',
',19,,,,,,8,46,298,10,108,107,109,98,57,100,99,101,,102,110,111,,94,95',
'42,43,41,243,-607,-607,-607,-607,260,261,,,-607,-607,,,,,,253,254,,40',
',,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245',
',,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,,,,63,,82,96,97,296,70,71,72',
'9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105',
'106,,,19,,,,,,8,46,298,10,108,107,109,98,57,100,99,101,,102,110,111',
',94,95,42,43,41,243,-607,-607,-607,-607,260,261,,,-607,-607,,,,,,253',
'254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244',
'20,245,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,,,,63,,82,96,97,296',
'70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104',
'103,105,106,,,19,,,,,,8,46,298,10,108,107,109,98,57,100,99,101,,102',
'110,111,,94,95,42,43,41,243,-607,-607,-607,-607,260,261,,,-607,-607',
',,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239',
'259,258,244,20,245,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,,,,63,,82',
'96,97,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75',
'28,27,104,103,105,106,,,19,,,,,,8,46,298,10,108,107,109,98,57,100,99',
'101,,102,110,111,,94,95,42,43,41,243,-607,-607,-607,-607,260,261,,,-607',
'-607,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238',
'239,259,258,244,20,245,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,,,,63',
',82,96,97,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,',
',,75,28,27,104,103,105,106,,,19,,,,,,8,46,298,10,108,107,109,98,57,100',
'99,101,,102,110,111,,94,95,42,43,41,243,-607,-607,-607,-607,260,261',
',,-607,-607,,,,,,253,254,,40,,,300,,,59,60,,,61,,35,240,,246,45,242',
'241,,238,239,259,258,244,20,245,,,,92,80,83,84,,85,87,86,88,,,,,81,91',
',,,,,,63,,82,96,97,5,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,7,10,108,107,109,98',
'57,100,99,101,,102,110,111,,94,95,42,43,41,243,,,,,,,,,,,,,,,,253,254',
',40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,,,,20,,,,,92',
'80,83,84,,85,87,86,88,,,,,81,91,,,,,,,63,,82,96,97,296,70,71,72,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,',
',19,,,,,,8,46,298,10,108,107,109,98,57,100,99,101,,102,110,111,,94,95',
'42,43,41,243,,,,,,,,,,,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246',
'45,242,241,,238,239,,,,20,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,',
',,,63,,82,96,97,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,298,10,108,107,109,98',
'57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33',
',,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87,86,88,,,,,81',
'91,,,,,,,63,,82,96,97,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,298,10,108,107',
'109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,',
',40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87,86',
'88,,,,,81,91,,,,,,,63,,82,96,97,5,70,71,72,9,58,,,,64,65,,,,68,,66,67',
'69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,7,10,108',
'107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,',
',,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87',
'86,88,,,,,81,91,,,,,,,63,,82,96,97,296,70,71,72,9,58,,,,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,298',
'10,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,',
',,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,92,80,83,84',
',85,87,86,88,,,,,81,91,,,,,,,63,,82,96,97,296,70,71,72,9,58,,,,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,',
'8,46,298,10,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41',
',,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,92',
'80,83,84,,85,87,86,88,,,,,81,91,,,,,,,63,,82,96,97,296,70,71,72,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,',
',19,,,,,,8,46,298,10,108,107,109,98,57,100,99,101,,102,110,111,,94,95',
'42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20',
',,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,,,,63,,82,96,97,296,70,71',
'72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105',
'106,,,19,,,,,,8,46,298,10,108,107,109,98,57,100,99,101,,102,110,111',
',94,95,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,',
',,,,,,20,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,,,,63,,82,96,97,296',
'70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104',
'103,105,106,,,19,,,,,,8,46,298,10,108,107,109,98,57,100,99,101,,102',
'110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35',
',,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,,,,63,,82',
'96,97,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75',
'28,27,104,103,105,106,,,19,,,,,,8,46,298,10,108,107,109,98,57,100,99',
'101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60',
',,61,,35,,,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,',
'70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101',
',102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70',
'71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312',
'318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102',
'110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,',
',,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72',
'63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104',
'103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111',
',94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,',
',,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82',
'96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105',
'106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95',
'42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235',
',,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92',
'80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,',
'68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46',
',,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,',
',,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84',
',85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108',
'107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,',
',,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85',
'87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69',
'315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107',
'109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,',
',228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86',
'88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316',
'73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98',
'57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,',
'234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,',
',,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73',
'74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57',
'100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81',
'91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,',
',,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100',
'99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,',
',,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101',
',102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70',
'71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312',
'318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102',
'110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,',
',,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72',
'63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104',
'103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111',
',94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,',
',,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82',
'96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105',
'106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95',
'42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235',
',,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92',
'80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,',
',,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,',
',,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80',
'83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,',
'46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,',
',,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83',
'84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,',
',108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,',
',,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84',
',85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108',
'107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,',
',,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85',
'87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69',
'315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107',
'109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,',
',228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86',
'88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316',
'73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98',
'57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,',
'234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,',
',,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73',
'74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57',
'100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81',
'91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,',
',,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100',
'99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,',
',,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101',
',102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70',
'71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312',
'318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102',
'110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,',
',,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72',
'63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104',
'103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111',
',94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,',
',,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82',
'96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105',
'106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95',
'42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235',
',,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92',
'80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,',
',,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,',
',,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80',
'83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,',
'46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,',
',,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83',
'84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46,,,108',
'107,109,98,57,100,99,101,290,102,110,111,,94,95,42,43,41,,,,,,,,,,,',
',,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,92,288',
'83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46,',
',108,107,109,98,57,100,99,101,290,102,110,111,,94,95,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,',
',92,288,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,235,,,,',
',,46,,,108,107,109,98,57,100,99,101,290,102,110,111,,94,95,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233',
',,,,92,288,83,84,,85,87,86,88,,,,,81,91,223,,,70,71,72,63,58,82,96,97',
'64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19',
',,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,92',
'80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,',
',,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,',
',,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80',
'83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,',
'46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,',
',,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83',
'84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,',
',108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,',
',,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84',
',85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108',
'107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,',
',,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85',
'87,86,88,,,,,81,91,,,,,,,63,,82,96,97,70,71,72,9,58,,,,64,65,,,,68,',
'66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,,10',
'108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,',
',,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,92,80,83,84,',
'85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108',
'107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,',
',,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85',
'87,86,88,,,,,81,91,,,,,,,63,,82,96,97,70,71,72,9,58,,,,64,65,,,,68,',
'66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,7',
'10,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,',
',,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,92,80,83,84',
',85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67',
'69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46,,,108,107',
'109,98,57,100,99,101,290,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,',
',,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,92,288,83',
'84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46,,,108',
'107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,',
',,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85',
'87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69',
'315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,313,,,108',
'107,109,98,57,100,99,101,,102,110,111,,94,95,,,319,,,,,,,,,,,,,,,,,',
',,937,,,234,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,92,80,83,84,,85,87,86,88',
',,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57',
'100,99,101,290,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,',
'234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,92,288,83,84,,85,87',
'86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46,,,108,107,109',
'98,57,100,99,101,290,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,',
'228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,92,288,83,84',
',85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67',
'69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46,,,108,107',
'109,98,57,100,99,101,290,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,',
',,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,92,288,83',
'84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,313',
',,108,107,109,98,57,100,99,101,,102,110,111,,94,95,,,319,,,,,,,,,,,',
',,,,,,,,309,,,305,,,59,60,,,61,,304,,,,,,,,,,,,,,,,,,92,80,83,84,,85',
'87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69',
'315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,313,,,108',
'107,109,98,57,100,99,101,,102,110,111,,94,95,,,319,,,,,,,,,,,,,,,,,',
',,309,,,234,,,59,60,,,61,,,560,,557,556,555,565,558,,,,,,,,,568,,92',
'80,83,84,,85,87,86,88,,,,,81,91,,,,321,,563,63,,82,96,97,70,71,72,,58',
'576,575,,64,65,569,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104',
'103,105,106,,,235,,,,,,,313,,,108,107,109,98,57,100,99,101,,102,110',
'111,,94,95,,,319,,,,,,,,,,,,,,,,,,,,943,,,234,,,59,60,,,61,,,,,,,,,',
',,,,,,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96',
'97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106',
',,235,,,,,,,313,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,',
',319,,,,,,,,,,,,,,,,,,,,937,,,234,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,92',
'80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,',
',,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,',
',,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80',
'83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,',
'46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,',
',,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83',
'84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,',
',108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,',
',,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84',
',85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108',
'107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,',
',,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85',
'87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69',
'315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107',
'109,98,57,100,99,101,290,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,',
',,,,228,,,234,,,59,60,,,61,,,,285,,45,,,291,,,,,,233,,,,,92,288,83,84',
',85,87,86,88,,,,,81,91,,,,,,,63,,82,96,97,70,71,72,9,58,,,,64,65,,,',
'68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46',
',10,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,',
',,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,92,80,83',
'84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,',
',108,107,109,98,57,100,99,101,290,102,110,111,,94,95,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,,,45,,,291,,,,,,233,,,,,92',
'288,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,',
',68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,',
',,,,46,,,108,107,109,98,57,100,99,101,290,102,110,111,,94,95,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,291,,,,,,233,,,',
',92,288,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,',
',46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,',
',,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,92,80,83',
'84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,,46,,,108',
'107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,',
',,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87',
'86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,,46,,,108,107,109,98',
'57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,',
'234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87,86,88,,,',
',81,91,116,,,,,115,63,,82,96,97,70,71,72,,58,,,,64,65,,,,68,,66,67,69',
'315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,313,,,108',
'107,109,98,57,100,99,101,,102,110,111,,94,95,,,319,,,,,,,,,,,,,,,,,',
',,356,,,33,,,59,60,,,61,,35,,,,,,,,,,,,,,,,,,92,80,83,84,,85,87,86,88',
',,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73',
'74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,313,,,108,107,109,361',
'57,100,99,362,,102,110,111,,94,95,,,319,,,,,,,,,,,,,,,,,368,,,363,,',
'234,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,92,80,83,84,,85,87,86,88,,,,,81',
'91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,',
',,,75,312,318,104,103,105,106,,,235,,,,,,,313,,,108,107,109,361,57,100',
'99,362,,102,110,111,,94,95,,,319,,,,,,,,,,,,,,,,,,,,363,,,234,,,59,60',
',,61,,,560,,557,556,555,565,558,,,,,,,,,568,,92,80,83,84,,85,87,86,88',
',,,,81,91,,,,,,563,63,,82,96,97,70,71,72,9,58,576,575,,64,65,569,,,68',
',66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,7',
'10,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,',
',,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,92,80,83,84',
',85,87,86,88,,,,,81,91,,,,,,396,63,,82,96,97,70,71,72,,58,,,,64,65,',
',,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,',
'46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,',
',,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,92,80,83',
'84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,,46,,,108',
'107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,',
',,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87',
'86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,,46,,,108,107,109,98',
'57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,',
'234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87,86,88,,,',
',81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,30,31,73,74',
',,,,,75,28,27,104,103,105,106,,,19,,,,,,,46,,,108,107,109,98,57,100',
'99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,',
',,,,63,,82,96,97,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74',
',,,,,75,28,27,104,103,105,106,,,19,,,,,,8,46,,10,108,107,109,98,57,100',
'99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59',
'60,,,61,,35,,,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87,86,88,,,,,81,91',
',,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,',
'75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100,99',
'101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60',
',,61,,671,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,',
',,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75',
'28,27,104,103,105,106,,,19,,,,,,,46,,,108,107,109,98,57,100,99,101,',
'102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61',
',,,,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72',
'63,58,82,96,97,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103',
'105,106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,',
'94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,412,,,,45',
',,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58',
'82,96,97,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105',
'106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95',
'42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,412,,,,45,,,,,,',
',,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96',
'97,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,',
',19,,,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43',
'41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,',
'92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,',
',46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,',
',,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,92,80,83',
'84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46,,,108',
'107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,',
',,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85',
'87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69',
'30,31,73,74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46,,,108,107,109',
'98,57,100,99,101,290,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,',
'228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,92,288,83,84',
',85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67',
'69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46,,,108,107',
'109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,',
',228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86',
'88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,30,31',
'73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,,,46,,,108,107,109,98,57',
'100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87,86,88,,,,,81',
'91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,30,31,73,74,,,,',
',75,28,27,104,103,105,106,,,19,,,,,,,46,,,108,107,109,98,57,100,99,101',
',102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,223,,,70',
'71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312',
'318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102',
'110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,412',
',,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72',
'63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104',
'103,105,106,,,235,,,,,,,313,,,108,107,109,98,57,100,99,101,,102,110',
'111,,94,95,,,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61,,,,,,,,,',
',,,,,,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96',
'97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106',
',,235,,,,,,,313,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,',
',319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,92',
'80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,',
',,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,',
',,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80',
'83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,',
'46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,',
',,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83',
'84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,313',
',,108,107,109,98,57,100,99,101,,102,110,111,,94,95,,,319,,,,,,,,,,,',
',,,,,,,,309,,,305,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,92,80,83,84,,85,87',
'86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46,,,108,107,109',
'98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88',
',,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57',
'100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81',
'91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,',
',,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100',
'99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,',
',,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101',
',102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,532,,59,60',
',,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70',
'71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27',
'104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102,110',
'111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45',
',,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58',
'82,96,97,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105',
'106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95',
'42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235',
',,,,,,46,,,108,107,109,98,57,100,99,101,290,102,110,111,,94,95,42,43',
'41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,285,,45,,,291,,,,,,233',
',,,,92,288,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235',
',,,,,,46,,,108,107,109,98,57,100,99,101,290,102,110,111,,94,95,42,43',
'41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,671,,285,,45,,,291,,,',
',,233,,,,,92,288,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96',
'97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106',
',,235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42',
'43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,,,,63,,82,96,97,70,71,72,9',
'58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106',
',,19,,,,,,8,46,,10,108,107,109,98,57,100,99,101,,102,110,111,,94,95',
'42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20',
',,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,235,',
',,,,,46,,,108,107,109,98,57,100,99,101,290,102,110,111,,94,95,42,43',
'41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,',
',,233,,,,,92,288,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96',
'97,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,',
',235,,,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42',
'43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235',
',,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,765,,,,45,,,,,,,,,233,,,',
',92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,',
',46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,',
',,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,92,80,83',
'84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46,,,108',
'107,109,98,57,100,99,101,290,102,110,111,,94,95,42,43,41,,,,,,,,,,,',
',,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,92,288',
'83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46,',
',108,107,109,98,57,100,99,101,290,102,110,111,,94,95,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,',
',92,288,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65',
',,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235',
',,,,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,,,45,,,,,,,,,233,,,',
',92,80,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,,,,',
',46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,',
',,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,92,80,83',
'84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,',
',108,107,109,98,57,100,99,101,290,102,110,111,,94,95,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,291,,,,,,233,,,,,92,288',
'83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,',
'46,,,108,107,109,98,57,100,99,101,290,102,110,111,,94,95,42,43,41,,',
',,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,671,,,,45,,,291,,,,,,233,,',
',,92,288,83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,104,103,105,106,,,19,,',
',,,,46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,',
',,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,92,80',
'83,84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,',
'46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,',
',,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83',
'84,,85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,',
',108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,',
',,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84',
',85,87,86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,313,,,108',
'107,109,98,57,100,99,101,,102,110,111,,94,95,,,319,,,,,,,,,,,,,,,,,',
',,309,,,305,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,92,80,83,84,,85,87,86,88',
',,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,75,28,27,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57',
'100,99,101,290,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,',
'234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,92,288,83,84,,85,87',
'86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315',
'316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,313,,,108,107',
'109,98,57,100,99,101,,102,110,111,,94,95,,,319,,,,,,,,,,,,,,,,,,,,309',
',,305,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,92,80,83,84,,85,87,86,88,,,,,81',
'91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,30,31,73,74,,,,',
',75,28,27,104,103,105,106,,,19,,,,,,,46,,,108,107,109,98,57,100,99,101',
',102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,,,,,63',
',82,96,97,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75',
'28,27,104,103,105,106,,,19,,,,,,8,46,298,10,108,107,109,98,57,100,99',
'101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60',
',,61,,35,,,,45,,,,,,,,,20,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,,,',
',,396,63,,82,96,97,70,71,72,,58,,,,64,65,,,,68,,66,67,69,315,316,73',
'74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57',
'100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81',
'91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,',
',,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100',
'99,101,290,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,285,,45,,,291,,,,,,233,,,,,92,288,83,84,,85,87,86,88',
',,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73',
'74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57',
'100,99,101,290,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,',
'234,,,59,60,,,61,,671,,285,,45,,,291,,,,,,233,,,,,92,288,83,84,,85,87',
'86,88,,,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315',
'316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109',
'98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88',
',,,,81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73',
'74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57',
'100,99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81',
'91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,',
',,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100',
'99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,',
',,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75',
'28,27,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100,99,101',
'290,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60',
',,61,,287,,285,,45,,,291,,,,,,233,,,,,92,288,83,84,,85,87,86,88,,,,',
'81,91,,,,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74',
',,,,,75,312,318,104,103,105,106,,,235,,,,,,,46,,,108,107,109,98,57,100',
'99,101,,102,110,111,,94,95,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83,84,,85,87,86,88,,,,,81,91,',
',,70,71,72,63,58,82,96,97,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,104,103,105,106,,,235,,,,,,,313,,,108,107,109,98,57,100,99,101',
',102,110,111,,94,95,,,319,,,,,,,,,,,,,,,,,,,,309,,,234,,,59,60,,,61',
',,560,,557,556,555,565,558,,,,,,,,,568,,92,80,83,84,,85,87,86,88,,,',
',81,91,,,,515,,563,63,,82,96,97,70,71,72,,58,576,575,,64,65,569,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,104,103,105,106,,,235,,,,,,',
'46,,,108,107,109,98,57,100,99,101,,102,110,111,,94,95,42,43,41,,,,,',
',,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,92,80,83',
'84,,85,87,86,88,,,,,81,91,,,,,,,63,,82,96,97,175,186,176,199,172,192',
'182,181,202,203,197,180,179,174,200,204,205,184,173,187,191,193,185',
'178,,,,194,201,196,195,188,198,183,171,190,189,,,,,,170,177,168,169',
'165,166,167,128,130,,,129,,,,,,,,159,160,,156,138,139,140,147,144,146',
',,141,142,,,,161,162,148,149,,,,,,,,,,,,,,153,152,,137,158,155,154,163',
'150,151,145,143,135,157,136,,,164,92,,,,,,,,,,,,,,91,175,186,176,199',
'172,192,182,181,202,203,197,180,179,174,200,204,205,184,173,187,191',
'193,185,178,,,,194,201,196,195,188,198,183,171,190,189,,,,,,170,177',
'168,169,165,166,167,128,130,,,129,,,,,,,,159,160,,156,138,139,140,147',
'144,146,,,141,142,,,,161,162,148,149,,,,,,,,,,,,,,153,152,,137,158,155',
'154,163,150,151,145,143,135,157,136,,,164,92,,,,,,,,,,,,,,91,175,186',
'176,199,172,192,182,181,202,203,197,180,179,174,200,204,205,184,173',
'187,191,193,185,178,,,,194,201,196,195,188,198,183,171,190,189,,,,,',
'170,177,168,169,165,166,167,128,130,,,129,,,,,,,,159,160,,156,138,139',
'140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,,,,,,,,,153,152,,137',
'158,155,154,163,150,151,145,143,135,157,136,,,164,92,,,,,,,,,,,,,,91',
'175,186,176,199,172,192,182,181,202,203,197,180,179,174,200,204,205',
'184,173,187,191,193,185,178,,,,194,201,196,195,188,198,183,171,190,189',
',,,,,170,177,168,169,165,166,167,128,130,127,,129,,,,,,,,159,160,,156',
'138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,,,,,,,,,153',
'152,,137,158,155,154,163,150,151,145,143,135,157,136,,,164,92,,,,,,',
',,,,,,,91,175,186,176,199,172,192,182,181,202,203,197,180,179,174,200',
'204,205,184,173,187,191,193,185,178,,,,194,201,196,195,188,198,183,171',
'190,189,,,,,,170,177,168,169,165,166,167,128,130,,,129,,,,,,,,159,160',
',156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,,,,,',
',,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136,,,164,175',
'186,176,199,172,192,182,181,202,203,197,180,179,174,200,204,205,184',
'173,187,191,193,185,178,,,,194,201,196,379,378,380,377,171,190,189,',
',,,,170,177,168,169,374,375,376,372,130,100,99,373,,102,,,,,,159,160',
',156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,384,',
',,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136,654,445',
'164,,655,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161',
'162,148,149,,,,,,269,,,,,,,,153,152,,137,158,155,154,163,150,151,145',
'143,135,157,136,448,438,164,,449,,,,,,,,159,160,,156,138,139,140,147',
'144,146,,,141,142,,,,161,162,148,149,,,,,,,,,,,,,,153,152,,137,158,155',
'154,163,150,151,145,143,135,157,136,733,438,164,,734,,,,,,,,159,160',
',156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,269,',
',,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136,735,445',
'164,,736,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161',
'162,148,149,,,,,,269,,,,,,,,153,152,,137,158,155,154,163,150,151,145',
'143,135,157,136,448,438,164,,449,,,,,,,,159,160,,156,138,139,140,147',
'144,146,,,141,142,,,,161,162,148,149,,,,,,,,,,,,,,153,152,,137,158,155',
'154,163,150,151,145,143,135,157,136,738,445,164,,739,,,,,,,,159,160',
',156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,269,',
',,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136,441,445',
'164,,440,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161',
'162,148,149,,,,,,269,,,,,,,,153,152,,137,158,155,154,163,150,151,145',
'143,135,157,136,448,438,164,,449,,,,,,,,159,160,,156,138,139,140,147',
'144,146,,,141,142,,,,161,162,148,149,,,,,,269,,,,,,,,153,152,,137,158',
'155,154,163,150,151,145,143,135,157,136,434,438,164,,435,,,,,,,,159',
'160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,269',
',,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136,652',
'438,164,,653,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,',
',,161,162,148,149,,,,,,269,,,,,,,,153,152,,137,158,155,154,163,150,151',
'145,143,135,157,136,654,445,164,,655,,,,,,,,159,160,,156,138,139,140',
'147,144,146,,,141,142,,,,161,162,148,149,,,,,,269,,,,,,,,153,152,,137',
'158,155,154,163,150,151,145,143,135,157,136,767,438,164,,768,,,,,,,',
'159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,',
',,,269,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136',
'770,445,164,,769,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142',
',,,161,162,148,149,,,,,,269,,,,,,,,153,152,,137,158,155,154,163,150',
'151,145,143,135,157,136,681,438,164,,682,,,,,,,,159,160,,156,138,139',
'140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,269,,,,,,,,153,152',
',137,158,155,154,163,150,151,145,143,135,157,136,684,445,164,,685,,',
',,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149',
',,,,,269,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157',
'136,652,438,164,,653,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141',
'142,,,,161,162,148,149,,,,,,269,,,,,,,,153,152,,137,158,155,154,163',
'150,151,145,143,135,157,136,1008,445,164,,1007,,,,,,,,159,160,,156,138',
'139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,269,,,,,,,,153',
'152,,137,158,155,154,163,150,151,145,143,135,157,136,1011,438,164,,1012',
',,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148',
'149,,,,,,269,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135',
'157,136,1013,445,164,,1014,,,,,,,,159,160,,156,138,139,140,147,144,146',
',,141,142,,,,161,162,148,149,,,,,,269,,,,,,,,153,152,,137,158,155,154',
'163,150,151,145,143,135,157,136,,560,164,557,556,555,565,558,,560,,557',
'556,555,565,558,568,,,,,,,,568,,560,,557,556,555,565,558,,,,,,563,546',
',568,,,,,563,573,572,576,575,,,,569,573,572,576,575,,,,569,563,,560',
',557,556,555,565,558,573,572,576,575,,,,569,568,,560,,557,556,555,565',
'558,560,,557,556,555,565,558,,568,,,,,563,,568,,,,,,,573,572,576,575',
',,,569,563,,,,,,,563,,573,572,576,575,,,,569,,576,575,,,560,569,557',
'556,555,565,558,,560,,557,556,555,565,558,568,,,,,,,,568,,560,,557,556',
'555,565,558,,,,,,563,,,568,,,,,563,573,572,576,575,,,,569,573,572,576',
'575,,,,569,563,,560,,557,556,555,565,558,,,576,575,,,,569,568,,560,',
'557,556,555,565,558,560,,557,556,555,565,558,,568,,,,,563,,568,,560',
',557,556,555,565,558,576,575,,,,569,563,,568,,,,,563,,573,572,576,575',
',,,569,,576,575,,,,569,563,,560,,557,556,555,565,558,,,576,575,,,,569',
'568,,560,,557,556,555,565,558,,560,,557,556,555,565,558,568,,,,,563',
',,568,,,,,,,,576,575,,,,569,563,,,,,,,,563,573,572,576,575,,,,569,573',
'572,576,575,,,,569' ]
        racc_action_table = arr = ::Array.new(24783, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'101,731,940,1014,419,941,591,101,101,101,62,1013,101,101,101,363,101',
'661,1011,363,691,691,465,19,101,1017,101,101,101,1020,983,354,887,391',
'676,392,101,101,910,101,101,101,101,101,346,676,345,1012,944,353,1024',
'736,294,376,465,453,453,294,465,465,376,1021,419,698,19,1022,101,101',
'101,101,101,101,101,101,101,101,101,101,101,101,1014,582,101,101,101',
'848,101,101,1013,733,101,734,735,101,101,314,101,62,101,391,101,392',
'101,101,661,101,101,101,101,101,357,101,26,101,691,591,736,807,376,731',
'940,1014,731,941,731,940,1014,101,941,1013,101,101,101,101,1013,101',
'1011,101,770,1023,354,1011,101,101,101,770,770,770,983,453,887,770,770',
'983,770,887,910,735,353,314,736,910,346,770,345,1012,944,346,1024,345',
'1012,944,698,1024,770,770,26,770,770,770,770,770,314,807,861,582,682',
'681,41,41,582,1,793,684,848,380,319,319,733,26,734,735,380,420,770,770',
'770,770,770,770,770,770,770,770,770,770,770,770,378,357,770,770,770',
'807,770,378,807,793,770,3,339,770,1031,339,3,665,770,807,770,388,770',
'770,861,770,770,770,770,770,769,770,770,770,682,681,38,769,769,769,684',
'684,380,769,769,430,769,770,41,41,770,770,665,770,379,770,319,319,362',
'605,605,379,770,770,770,378,769,769,78,769,769,769,769,769,682,681,767',
'682,681,432,78,684,393,38,684,388,388,388,682,681,78,433,601,601,38',
'684,769,769,769,769,769,769,769,769,769,769,769,769,769,769,362,416',
'769,769,769,948,769,362,948,379,769,442,362,769,520,913,362,913,769',
'459,769,520,769,769,767,769,769,769,769,769,520,769,654,769,413,362',
'393,393,393,654,654,654,411,605,654,654,654,769,654,697,769,769,697',
'769,768,769,852,654,654,654,654,852,769,769,769,362,362,335,654,654',
'335,654,654,654,654,654,601,459,857,520,520,601,616,857,906,387,906',
'906,906,715,906,715,715,715,408,715,229,227,654,654,654,654,654,654',
'654,654,654,654,654,654,654,654,768,455,654,654,654,618,654,654,402',
'336,654,503,336,654,654,467,654,372,654,468,654,361,654,654,372,654',
'654,654,654,654,469,654,654,654,616,616,350,387,387,387,386,350,229',
'227,616,389,470,654,995,995,654,654,654,654,906,654,390,654,441,715',
'226,652,654,654,654,441,441,441,490,618,618,441,441,361,441,503,503',
'503,494,618,361,382,372,441,374,361,14,14,382,361,510,374,503,511,441',
'441,514,441,441,441,441,441,344,344,386,386,386,325,361,389,389,389',
'721,721,325,516,44,44,226,652,390,390,390,325,441,441,441,441,441,441',
'441,441,441,441,441,441,441,441,361,361,441,441,441,521,441,434,382',
'373,441,374,375,441,44,44,373,24,441,375,441,524,441,441,24,441,441',
'441,441,441,440,441,441,441,325,325,637,440,440,440,703,703,533,440',
'440,47,440,441,534,535,441,441,47,441,434,441,536,548,549,551,653,47',
'441,441,441,434,440,440,435,440,440,440,440,440,373,552,790,375,553',
'685,562,377,24,637,17,570,685,127,377,574,577,685,127,127,637,685,440',
'440,440,440,440,440,440,440,440,440,440,440,440,440,47,47,440,440,440',
'435,440,323,653,579,440,367,583,440,584,585,435,586,440,358,440,17,440',
'440,790,440,440,440,440,440,655,440,17,440,685,685,377,655,655,655,356',
'352,655,655,655,365,655,440,351,603,440,440,365,440,323,440,655,655',
'655,613,621,365,440,440,440,323,655,655,623,655,655,655,655,655,892',
'629,892,892,892,739,892,712,39,712,712,712,739,712,609,609,340,739,609',
'609,609,739,655,655,655,655,655,655,655,655,655,655,655,655,655,655',
'365,365,655,655,655,338,655,655,712,337,655,638,333,655,655,643,655',
'712,655,39,655,327,655,655,648,655,655,655,655,655,39,655,98,655,739',
'739,324,656,657,98,98,98,658,660,98,98,98,655,98,664,655,655,655,655',
'666,655,98,655,98,98,98,668,655,655,655,670,320,318,98,98,678,98,98',
'98,98,98,839,680,839,839,839,16,839,563,313,563,563,563,16,563,837,683',
'837,837,837,312,837,16,98,98,98,98,98,98,98,98,98,98,98,98,98,98,480',
'839,98,98,98,686,98,98,563,687,98,690,466,98,98,837,98,563,98,309,98',
'692,98,98,837,98,98,98,98,98,699,98,480,98,16,16,480,480,942,480,480',
'714,716,723,466,942,729,98,466,466,98,98,98,98,942,98,303,98,446,732',
'302,301,98,98,98,446,446,446,700,299,446,446,446,936,446,298,741,286',
'700,283,936,481,745,446,446,446,446,282,268,936,764,766,235,231,446',
'446,230,446,446,446,446,446,775,942,942,228,796,418,806,810,813,700',
'700,481,418,814,700,481,481,821,481,481,822,418,446,446,446,446,446',
'446,446,446,446,446,446,446,446,446,936,936,446,446,446,823,827,446',
'828,830,446,831,833,446,446,836,446,838,446,841,446,206,446,446,844',
'446,446,446,446,446,112,446,446,446,418,418,849,851,306,855,957,856',
'957,957,957,306,957,446,859,860,446,446,446,446,306,446,46,446,27,869',
'870,872,446,446,873,27,27,27,924,874,27,27,27,225,27,876,877,957,924',
'878,225,40,37,27,27,27,908,917,921,225,934,22,937,943,27,27,946,27,27',
'27,27,27,947,306,306,952,953,594,954,955,956,924,924,958,594,987,924',
'987,987,987,15,987,966,594,27,27,27,27,27,27,27,27,27,27,27,27,27,27',
'225,225,27,27,27,969,970,27,971,27,27,972,974,27,27,979,27,13,27,12',
'27,994,27,27,996,27,27,27,27,27,57,27,27,27,594,594,1007,57,57,57,1008',
'1010,57,57,57,307,57,27,485,10,27,27,307,27,7,27,57,57,57,1016,,307',
'27,27,485,485,57,57,,57,57,57,57,57,297,297,297,297,297,308,485,,485',
',485,485,308,485,485,,,485,,485,,308,57,57,57,57,57,57,57,57,57,57,57',
'57,57,57,307,307,57,57,57,,,57,,,57,,,57,57,,57,,57,,57,,57,57,,57,57',
'57,57,57,,57,,57,308,308,,,355,,959,,959,959,959,355,959,57,,,57,57',
'57,57,355,57,,57,445,,,,57,57,,445,445,445,,,445,445,445,310,445,,530',
'959,,,310,,,445,445,445,445,,,310,,,530,530,445,445,,445,445,445,445',
'445,,355,355,,,976,530,,530,,530,530,976,530,530,,,530,,530,,976,445',
'445,445,445,445,445,445,445,445,445,445,445,445,445,310,310,445,445',
'445,,,445,,,445,,,445,445,,445,,445,,445,,445,445,,445,445,445,445,445',
',445,445,445,976,976,,,,901,,901,901,901,901,901,,445,,,445,445,445',
'445,901,445,,445,28,,,,445,445,,28,28,28,,,28,28,28,473,28,,901,993',
',993,993,993,,993,28,28,,901,901,473,473,,901,,28,28,,28,28,28,28,28',
',,,473,,,,473,473,,473,473,993,,907,,907,907,907,,907,,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,,,28,28,28,,,28,,28,28,,,28,28,907,28,,28',
',28,,28,28,,28,28,28,28,28,,28,436,28,332,332,332,332,332,436,436,436',
',,436,436,436,28,436,,28,28,,28,,28,,436,436,436,,,28,28,,738,,,436',
'436,,436,436,436,436,436,6,6,6,6,6,508,508,508,508,508,,,,,,,,,,,,,436',
'436,436,436,436,436,436,436,436,436,436,436,436,436,,,436,436,436,738',
',436,,436,436,,738,436,436,,436,738,436,,436,738,436,436,,436,436,436',
'436,436,,436,436,436,,,,,,,738,,,,,,,436,,,436,436,487,436,,436,,,,487',
'487,487,436,436,487,487,487,,487,,738,738,,,,,,487,487,,,,,,,,,,487',
'487,,487,487,487,487,487,,799,,799,799,799,799,799,,,,,,,,,799,,,21',
'21,21,21,21,21,21,21,21,21,21,,21,21,487,,21,21,,799,,487,,,,,487,487',
'799,799,799,799,21,,21,799,21,21,,21,21,21,21,21,,21,,,,487,487,,,,',
',,,,,,799,,,487,21,,487,,,,,487,602,602,602,602,602,602,487,,,602,602',
',,,602,,602,602,602,602,602,602,602,,,,,,602,602,602,602,602,602,602',
',,602,,,,,423,602,602,602,602,602,602,602,602,602,602,602,602,,602,602',
'602,,602,602,602,602,602,423,423,423,423,423,423,423,423,423,423,423',
',423,423,,,423,423,,602,,,602,,,602,602,,,602,,602,423,,423,602,423',
'423,,423,423,423,423,423,602,423,,,,602,602,602,602,,602,602,602,602',
',,,,602,602,,423,,423,,,602,,602,602,602,349,349,349,349,349,349,,,',
'349,349,,,,349,,349,349,349,349,349,349,349,,,,,,349,349,349,349,349',
'349,349,,,349,,,,,429,349,349,349,349,349,349,349,349,349,349,349,349',
',349,349,349,,349,349,349,349,349,429,429,429,429,429,429,429,429,429',
'429,429,,429,429,,,429,429,,349,,,349,,,349,349,,,349,,349,429,,429',
'349,429,429,,429,429,429,429,429,349,429,,,,349,349,349,349,,349,349',
'349,349,,,,,349,349,,429,,,,,349,,349,349,349,812,812,812,812,812,812',
',,,812,812,,,,812,,812,812,812,812,812,812,812,,,,,,812,812,812,812',
'812,812,812,,,812,,,,,,812,812,812,812,812,812,812,812,812,812,812,812',
',812,812,812,,812,812,812,812,812,280,280,280,280,280,280,280,280,280',
'280,280,,280,280,,,280,280,,812,,,812,,,812,812,,,812,,812,280,,280',
'812,280,280,,280,280,280,280,280,812,280,,,,812,812,812,812,,812,812',
'812,812,,,,,812,812,,280,,,,,812,,812,812,812,305,305,305,305,305,305',
',,,305,305,,,,305,,305,305,305,305,305,305,305,,,,,,305,305,305,305',
'305,305,305,,,305,,,,,,305,305,305,305,305,305,305,305,305,305,305,305',
',305,305,305,,305,305,305,305,305,866,866,866,866,866,866,866,866,866',
'866,866,,866,866,,,866,866,,305,,,305,,,305,305,,,305,,305,866,,866',
'305,866,866,,866,866,866,866,866,305,866,,,,305,305,305,305,,305,305',
'305,305,,,,,305,305,,866,,,,,305,,305,305,305,756,756,756,756,756,756',
',,,756,756,,,,756,,756,756,756,756,756,756,756,,,,,,756,756,756,756',
'756,756,756,,,756,,,,,,756,756,756,756,756,756,756,756,756,756,756,756',
',756,756,756,,756,756,756,756,756,772,772,772,772,772,772,772,772,772',
'772,772,,772,772,,,772,772,,756,,,756,,,756,756,,,756,,756,772,,772',
'756,772,772,,772,772,772,772,772,756,772,,,,756,756,756,756,,756,756',
'756,756,,,,,756,756,,772,,,,,756,,756,756,756,801,801,801,801,801,801',
',,,801,801,,,,801,,801,801,801,801,801,801,801,,,,,,801,801,801,801',
'801,801,801,,,801,,,,,,801,801,801,801,801,801,801,801,801,801,801,801',
',801,801,801,,801,801,801,801,801,484,484,484,484,484,484,484,484,484',
'484,484,,484,484,,,484,484,,801,,,801,,,801,801,,,801,,801,484,,484',
'801,484,484,,484,484,484,484,484,801,484,,,,801,801,801,801,,801,801',
'801,801,,,,,801,801,484,484,,,,,801,,801,801,801,939,939,939,939,939',
'939,,,,939,939,,,,939,,939,939,939,939,939,939,939,,,,,,939,939,939',
'939,939,939,939,,,939,,,,,,939,939,939,939,939,939,939,939,939,939,939',
'939,,939,939,939,,939,939,939,939,939,531,531,531,531,531,531,531,531',
'531,531,531,,531,531,,,531,531,,939,,,939,,,939,939,,,939,,939,531,',
'531,939,531,531,,531,531,531,531,531,939,531,,,,939,939,939,939,,939',
'939,939,939,,,,,939,939,,531,,,,,939,,939,939,939,300,300,300,300,300',
'300,,,,300,300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300,300',
'300,300,300,300,,,300,,,,,,300,300,300,300,300,300,300,300,300,300,300',
'300,,300,300,300,,300,300,300,300,300,483,483,483,483,483,483,483,483',
',483,483,,,,,,483,483,,300,,,300,,,300,300,,,300,,300,483,,483,300,483',
'483,,483,483,483,483,483,300,483,,,,300,300,300,300,,300,300,300,300',
',,,,300,300,,,,,,,300,,300,300,300,746,746,746,746,746,746,,,,746,746',
',,,746,,746,746,746,746,746,746,746,,,,,,746,746,746,746,746,746,746',
',,746,,,,,,746,746,746,746,746,746,746,746,746,746,746,746,,746,746',
'746,,746,746,746,746,746,464,464,464,464,464,464,464,464,464,464,464',
',464,464,,,464,464,,746,,,746,,,746,746,,,746,,746,464,,464,746,464',
'464,,464,464,464,464,464,746,464,,,,746,746,746,746,,746,746,746,746',
',,,,746,746,,,,,,,746,,746,746,746,348,348,348,348,348,348,,,,348,348',
',,,348,,348,348,348,348,348,348,348,,,,,,348,348,348,348,348,348,348',
',,348,,,,,,348,348,348,348,348,348,348,348,348,348,348,348,,348,348',
'348,,348,348,348,348,348,476,476,476,476,476,476,476,,,476,476,,,,,',
'476,476,,348,,,348,,,348,348,,,348,,348,476,,476,348,476,476,,476,476',
'476,476,476,348,476,,,,348,348,348,348,,348,348,348,348,,,,,348,348',
',,,,,,348,,348,348,348,853,853,853,853,853,853,,,,853,853,,,,853,,853',
'853,853,853,853,853,853,,,,,,853,853,853,853,853,853,853,,,853,,,,,',
'853,853,853,853,853,853,853,853,853,853,853,853,,853,853,853,,853,853',
'853,853,853,482,482,482,482,482,482,482,,,482,482,,,,,,482,482,,853',
',,853,,,853,853,,,853,,853,482,,482,853,482,482,,482,482,482,482,482',
'853,482,,,,853,853,853,853,,853,853,853,853,,,,,853,853,,,,,,,853,,853',
'853,853,891,891,891,891,891,891,,,,891,891,,,,891,,891,891,891,891,891',
'891,891,,,,,,891,891,891,891,891,891,891,,,891,,,,,,891,891,891,891',
'891,891,891,891,891,891,891,891,,891,891,891,,891,891,891,891,891,463',
'463,463,463,463,463,463,463,463,463,463,,463,463,,,463,463,,891,,,891',
',,891,891,,,891,,891,463,,463,891,463,463,,463,463,463,463,463,891,463',
',,,891,891,891,891,,891,891,891,891,,,,,891,891,,,,,,,891,,891,891,891',
'737,737,737,737,737,737,,,,737,737,,,,737,,737,737,737,737,737,737,737',
',,,,,737,737,737,737,737,737,737,,,737,,,,,,737,737,737,737,737,737',
'737,737,737,737,737,737,,737,737,737,,737,737,737,737,737,474,474,474',
'474,474,474,474,,,474,474,,,,,,474,474,,737,,,737,,,737,737,,,737,,737',
'474,,474,737,474,474,,474,474,474,474,474,737,474,,,,737,737,737,737',
',737,737,737,737,,,,,737,737,,,,,,,737,,737,737,737,742,742,742,742',
'742,742,,,,742,742,,,,742,,742,742,742,742,742,742,742,,,,,,742,742',
'742,742,742,742,742,,,742,,,,,,742,742,742,742,742,742,742,742,742,742',
'742,742,,742,742,742,,742,742,742,742,742,479,479,479,479,479,479,479',
',,479,479,,,,,,479,479,,742,,,742,,,742,742,,,742,,742,479,,479,742',
'479,479,,479,479,479,479,479,742,479,,,,742,742,742,742,,742,742,742',
'742,,,,,742,742,,,,,,,742,,742,742,742,234,234,234,234,234,234,,,,234',
'234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234,234,234',
'234,,,234,,,,,,234,234,234,234,234,234,234,234,234,234,234,234,,234',
'234,234,,234,234,234,234,234,475,475,475,475,475,475,475,,,475,475,',
',,,,475,475,,234,,,234,,,234,234,,,234,,234,475,,475,234,475,475,,475',
'475,475,475,475,234,475,,,,234,234,234,234,,234,234,234,234,,,,,234',
'234,,,,,,,234,,234,234,234,847,847,847,847,847,847,,,,847,847,,,,847',
',847,847,847,847,847,847,847,,,,,,847,847,847,847,847,847,847,,,847',
',,,,,847,847,847,847,847,847,847,847,847,847,847,847,,847,847,847,,847',
'847,847,847,847,478,478,478,478,478,478,478,,,478,478,,,,,,478,478,',
'847,,,847,,,847,847,,,847,,847,478,,478,847,478,478,,478,478,478,478',
'478,847,478,,,,847,847,847,847,,847,847,847,847,,,,,847,847,,,,,,,847',
',847,847,847,33,33,33,33,33,33,,,,33,33,,,,33,,33,33,33,33,33,33,33',
',,,,,33,33,33,33,33,33,33,,,33,,,,,,33,33,33,33,33,33,33,33,33,33,33',
'33,,33,33,33,,33,33,33,33,33,477,477,477,477,477,477,477,,,477,477,',
',,,,477,477,,33,,,33,,,33,33,,,33,,33,477,,477,33,477,477,,477,477,477',
'477,477,33,477,,,,33,33,33,33,,33,33,33,33,,,,,33,33,,,,,,,33,,33,33',
'33,0,0,0,0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,',
',,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,471,,,,,,,,,,,,,,,,471,471',
',0,,,0,,,0,0,,,0,,0,471,,471,0,471,471,,471,471,,,,0,,,,,0,0,0,0,,0',
'0,0,0,,,,,0,0,,,,,,,0,,0,0,0,578,578,578,578,578,578,,,,578,578,,,,578',
',578,578,578,578,578,578,578,,,,,,578,578,578,578,578,578,578,,,578',
',,,,,578,578,578,578,578,578,578,578,578,578,578,578,,578,578,578,,578',
'578,578,578,578,472,,,,,,,,,,,,,,,,472,472,,578,,,578,,,578,578,,,578',
',578,472,,472,578,472,472,,472,472,,,,578,,,,,578,578,578,578,,578,578',
'578,578,,,,,578,578,,,,,,,578,,578,578,578,890,890,890,890,890,890,',
',,890,890,,,,890,,890,890,890,890,890,890,890,,,,,,890,890,890,890,890',
'890,890,,,890,,,,,,890,890,890,890,890,890,890,890,890,890,890,890,',
'890,890,890,,890,890,890,890,890,,,,,,,,,,,,,,,,,,,,890,,,890,,,890',
'890,,,890,,890,,,,890,,,,,,,,,890,,,,,890,890,890,890,,890,890,890,890',
',,,,890,890,,,,,,,890,,890,890,890,331,331,331,331,331,331,,,,331,331',
',,,331,,331,331,331,331,331,331,331,,,,,,331,331,331,331,331,331,331',
',,331,,,,,,331,331,331,331,331,331,331,331,331,331,331,331,,331,331',
'331,,331,331,331,331,331,,,,,,,,,,,,,,,,,,,,331,,,331,,,331,331,,,331',
',331,,,,331,,,,,,,,,331,,,,,331,331,331,331,,331,331,331,331,,,,,331',
'331,,,,,,,331,,331,331,331,125,125,125,125,125,125,,,,125,125,,,,125',
',125,125,125,125,125,125,125,,,,,,125,125,125,125,125,125,125,,,125',
',,,,,125,125,125,125,125,125,125,125,125,125,125,125,,125,125,125,,125',
'125,125,125,125,,,,,,,,,,,,,,,,,,,,125,,,125,,,125,125,,,125,,125,,',
',125,,,,,,,,,125,,,,,125,125,125,125,,125,125,125,125,,,,,125,125,,',
',,,,125,,125,125,125,884,884,884,884,884,884,,,,884,884,,,,884,,884',
'884,884,884,884,884,884,,,,,,884,884,884,884,884,884,884,,,884,,,,,',
'884,884,884,884,884,884,884,884,884,884,884,884,,884,884,884,,884,884',
'884,884,884,,,,,,,,,,,,,,,,,,,,884,,,884,,,884,884,,,884,,884,,,,884',
',,,,,,,,884,,,,,884,884,884,884,,884,884,884,884,,,,,884,884,,,,,,,884',
',884,884,884,965,965,965,965,965,965,,,,965,965,,,,965,,965,965,965',
'965,965,965,965,,,,,,965,965,965,965,965,965,965,,,965,,,,,,965,965',
'965,965,965,965,965,965,965,965,965,965,,965,965,965,,965,965,965,965',
'965,,,,,,,,,,,,,,,,,,,,965,,,965,,,965,965,,,965,,965,,,,965,,,,,,,',
',965,,,,,965,965,965,965,,965,965,965,965,,,,,965,965,,,,,,,965,,965',
'965,965,208,208,208,208,208,208,,,,208,208,,,,208,,208,208,208,208,208',
'208,208,,,,,,208,208,208,208,208,208,208,,,208,,,,,,208,208,208,208',
'208,208,208,208,208,208,208,208,,208,208,208,,208,208,208,208,208,,',
',,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,208,,,,208,,,,,,,,,208,',
',,,208,208,208,208,,208,208,208,208,,,,,208,208,,,,,,,208,,208,208,208',
'960,960,960,960,960,960,,,,960,960,,,,960,,960,960,960,960,960,960,960',
',,,,,960,960,960,960,960,960,960,,,960,,,,,,960,960,960,960,960,960',
'960,960,960,960,960,960,,960,960,960,,960,960,960,960,960,,,,,,,,,,',
',,,,,,,,,960,,,960,,,960,960,,,960,,960,,,,960,,,,,,,,,960,,,,,960,960',
'960,960,,960,960,960,960,,,,,960,960,,,,,,,960,,960,960,960,581,581',
'581,581,581,581,,,,581,581,,,,581,,581,581,581,581,581,581,581,,,,,',
'581,581,581,581,581,581,581,,,581,,,,,,581,581,581,581,581,581,581,581',
'581,581,581,581,,581,581,581,,581,581,581,581,581,,,,,,,,,,,,,,,,,,',
',581,,,581,,,581,581,,,581,,581,,,,581,,,,,,,,,581,,,,,581,581,581,581',
',581,581,581,581,,,,,581,581,,,,,,,581,,581,581,581,867,867,867,867',
'867,867,,,,867,867,,,,867,,867,867,867,867,867,867,867,,,,,,867,867',
'867,867,867,867,867,,,867,,,,,,867,867,867,867,867,867,867,867,867,867',
'867,867,,867,867,867,,867,867,867,867,867,,,,,,,,,,,,,,,,,,,,867,,,867',
',,867,867,,,867,,867,,,,867,,,,,,,,,867,,,,,867,867,867,867,,867,867',
'867,867,,,,,867,867,,,,791,791,791,867,791,867,867,867,791,791,,,,791',
',791,791,791,791,791,791,791,,,,,,791,791,791,791,791,791,791,,,791',
',,,,,,791,,,791,791,791,791,791,791,791,791,,791,791,791,,791,791,791',
'791,791,,,,,,,,,,,,,,,,,,,,791,,,791,,,791,791,,,791,,,,,,791,,,,,,',
',,791,,,,,791,791,791,791,,791,791,791,791,,,,,791,791,,,,789,789,789',
'791,789,791,791,791,789,789,,,,789,,789,789,789,789,789,789,789,,,,',
',789,789,789,789,789,789,789,,,789,,,,,,,789,,,789,789,789,789,789,789',
'789,789,,789,789,789,,789,789,789,789,789,,,,,,,,,,,,,,,,,,,,789,,,789',
',,789,789,,,789,,,,,,789,,,,,,,,,789,,,,,789,789,789,789,,789,789,789',
'789,,,,,789,789,,,,788,788,788,789,788,789,789,789,788,788,,,,788,,788',
'788,788,788,788,788,788,,,,,,788,788,788,788,788,788,788,,,788,,,,,',
',788,,,788,788,788,788,788,788,788,788,,788,788,788,,788,788,788,788',
'788,,,,,,,,,,,,,,,,,,,,788,,,788,,,788,788,,,788,,,,,,788,,,,,,,,,788',
',,,,788,788,788,788,,788,788,788,788,,,,,788,788,,,,787,787,787,788',
'787,788,788,788,787,787,,,,787,,787,787,787,787,787,787,787,,,,,,787',
'787,787,787,787,787,787,,,787,,,,,,,787,,,787,787,787,787,787,787,787',
'787,,787,787,787,,787,787,787,787,787,,,,,,,,,,,,,,,,,,,,787,,,787,',
',787,787,,,787,,,,,,787,,,,,,,,,787,,,,,787,787,787,787,,787,787,787',
'787,,,,,787,787,,,,786,786,786,787,786,787,787,787,786,786,,,,786,,786',
'786,786,786,786,786,786,,,,,,786,786,786,786,786,786,786,,,786,,,,,',
',786,,,786,786,786,786,786,786,786,786,,786,786,786,,786,786,786,786',
'786,,,,,,,,,,,,,,,,,,,,786,,,786,,,786,786,,,786,,,,,,786,,,,,,,,,786',
',,,,786,786,786,786,,786,786,786,786,,,,,786,786,,,,773,773,773,786',
'773,786,786,786,773,773,,,,773,,773,773,773,773,773,773,773,,,,,,773',
'773,773,773,773,773,773,,,773,,,,,,,773,,,773,773,773,773,773,773,773',
'773,,773,773,773,,773,773,773,773,773,,,,,,,,,,,,,,,,,,,,773,,,773,',
',773,773,,,773,,,,,,773,,,,,,,,,773,,,,,773,773,773,773,,773,773,773',
'773,,,,,773,773,,,,233,233,233,773,233,773,773,773,233,233,,,,233,,233',
'233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,',
',233,,,233,233,233,233,233,233,233,233,,233,233,233,,233,233,233,233',
'233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,,233',
',,,,233,233,233,233,,233,233,233,233,,,,,233,233,,,,236,236,236,233',
'236,233,233,233,236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236',
'236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236',
'236,,236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,',
',236,236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236,236,,236,236,236',
'236,,,,,236,236,,,,237,237,237,236,237,236,236,236,237,237,,,,237,,237',
'237,237,237,237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,',
',237,,,237,237,237,237,237,237,237,237,,237,237,237,,237,237,237,237',
'237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,,237',
',,,,237,237,237,237,,237,237,237,237,,,,,237,237,,,,238,238,238,237',
'238,237,237,237,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238',
'238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238',
'238,,238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,',
',238,238,,,238,,,,,,238,,,,,,,,,238,,,,,238,238,238,238,,238,238,238',
'238,,,,,238,238,,,,239,239,239,238,239,238,238,238,239,239,,,,239,,239',
'239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,',
',239,,,239,239,239,239,239,239,239,239,,239,239,239,,239,239,239,239',
'239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,,239',
',,,,239,239,239,239,,239,239,239,239,,,,,239,239,,,,240,240,240,239',
'240,239,239,239,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240',
'240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240',
'240,,240,240,240,,240,240,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,',
',240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240,240,240,240,,240,240,240',
'240,,,,,240,240,,,,241,241,241,240,241,240,240,240,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,241,241',
'241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,,241',
',,,,241,241,241,241,,241,241,241,241,,,,,241,241,,,,242,242,242,241',
'242,241,241,241,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242',
'242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242',
'242,,242,242,242,,242,242,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,',
',242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242,242,242,,242,242,242',
'242,,,,,242,242,,,,243,243,243,242,243,242,242,242,243,243,,,,243,,243',
'243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,',
',243,,,243,243,243,243,243,243,243,243,,243,243,243,,243,243,243,243',
'243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,,243',
',,,,243,243,243,243,,243,243,243,243,,,,,243,243,,,,244,244,244,243',
'244,243,243,243,244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244',
'244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244',
'244,,244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,',
',244,244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244,244,,244,244,244',
'244,,,,,244,244,,,,245,245,245,244,245,244,244,244,245,245,,,,245,,245',
'245,245,245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,',
',245,,,245,245,245,245,245,245,245,245,,245,245,245,,245,245,245,245',
'245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,,245',
',,,,245,245,245,245,,245,245,245,245,,,,,245,245,,,,246,246,246,245',
'246,245,245,245,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246',
'246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246',
'246,,246,246,246,,246,246,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,',
',246,246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246,246,,246,246,246',
'246,,,,,246,246,,,,247,247,247,246,247,246,246,246,247,247,,,,247,,247',
'247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,',
',247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247,247,247',
'247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,,247',
',,,,247,247,247,247,,247,247,247,247,,,,,247,247,,,,248,248,248,247',
'248,247,247,247,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248',
'248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248',
'248,,248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,',
',248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248,248,,248,248,248',
'248,,,,,248,248,,,,249,249,249,248,249,248,248,248,249,249,,,,249,,249',
'249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,',
',249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249,249,249',
'249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,,249',
',,,,249,249,249,249,,249,249,249,249,,,,,249,249,,,,250,250,250,249',
'250,249,249,249,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250',
'250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250',
'250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,',
',250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250,250,250',
'250,,,,,250,250,,,,251,251,251,250,251,250,250,250,251,251,,,,251,,251',
'251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,',
',251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251,251,251',
'251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,,251',
',,,,251,251,251,251,,251,251,251,251,,,,,251,251,,,,252,252,252,251',
'252,251,251,251,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252',
'252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252',
'252,,252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,',
',252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252,252,,252,252,252',
'252,,,,,252,252,,,,253,253,253,252,253,252,252,252,253,253,,,,253,,253',
'253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,',
',253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253,253,253',
'253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,,253',
',,,,253,253,253,253,,253,253,253,253,,,,,253,253,,,,254,254,254,253',
'254,253,253,253,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254',
'254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254',
'254,,254,254,254,,254,254,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,',
',254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254,254,254,,254,254,254',
'254,,,,,254,254,,,,255,255,255,254,255,254,254,254,255,255,,,,255,,255',
'255,255,255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,',
',255,,,255,255,255,255,255,255,255,255,,255,255,255,,255,255,255,255',
'255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,,255',
',,,,255,255,255,255,,255,255,255,255,,,,,255,255,,,,256,256,256,255',
'256,255,255,255,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256',
'256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256',
'256,,256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,',
',256,256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256,256,,256,256,256',
'256,,,,,256,256,,,,257,257,257,256,257,256,256,256,257,257,,,,257,,257',
'257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,',
',257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257,257,257',
'257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,,257',
',,,,257,257,257,257,,257,257,257,257,,,,,257,257,,,,262,262,262,257',
'262,257,257,257,262,262,,,,262,,262,262,262,262,262,262,262,,,,,,262',
'262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262,262',
'262,,262,262,262,,262,262,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,',
',262,262,,,262,,,,,,262,,,,,,,,,262,,,,,262,262,262,262,,262,262,262',
'262,,,,,262,262,,,,765,765,765,262,765,262,262,262,765,765,,,,765,,765',
'765,765,765,765,765,765,,,,,,765,765,765,765,765,765,765,,,765,,,,,',
',765,,,765,765,765,765,765,765,765,765,,765,765,765,,765,765,765,765',
'765,,,,,,,,,,,,,,,,,,,,765,,,765,,,765,765,,,765,,,,,,765,,,,,,,,,765',
',,,,765,765,765,765,,765,765,765,765,,,,,765,765,,,,269,269,269,765',
'269,765,765,765,269,269,,,,269,,269,269,269,269,269,269,269,,,,,,269',
'269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269,269,269,269,269',
'269,269,269,269,269,,269,269,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269',
',,269,269,,,269,,269,,269,,269,,,269,,,,,,269,,,,,269,269,269,269,,269',
'269,269,269,,,,,269,269,,,,270,270,270,269,270,269,269,269,270,270,',
',,270,,270,270,270,270,270,270,270,,,,,,270,270,270,270,270,270,270',
',,270,,,,,,,270,,,270,270,270,270,270,270,270,270,270,270,270,270,,270',
'270,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270,,270,,270',
',270,,,270,,,,,,270,,,,,270,270,270,270,,270,270,270,270,,,,,270,270',
',,,278,278,278,270,278,270,270,270,278,278,,,,278,,278,278,278,278,278',
'278,278,,,,,,278,278,278,278,278,278,278,,,278,,,,,,,278,,,278,278,278',
'278,278,278,278,278,278,278,278,278,,278,278,278,278,278,,,,,,,,,,,',
',,,,,,,,278,,,278,,,278,278,,,278,,278,,278,,278,,,278,,,,,,278,,,,',
'278,278,278,278,,278,278,278,278,,,,,278,278,278,,,743,743,743,278,743',
'278,278,278,743,743,,,,743,,743,743,743,743,743,743,743,,,,,,743,743',
'743,743,743,743,743,,,743,,,,,,,743,,,743,743,743,743,743,743,743,743',
',743,743,743,,743,743,743,743,743,,,,,,,,,,,,,,,,,,,,743,,,743,,,743',
'743,,,743,,,,,,743,,,,,,,,,743,,,,,743,743,743,743,,743,743,743,743',
',,,,743,743,,,,285,285,285,743,285,743,743,743,285,285,,,,285,,285,285',
'285,285,285,285,285,,,,,,285,285,285,285,285,285,285,,,285,,,,,,,285',
',,285,285,285,285,285,285,285,285,,285,285,285,,285,285,285,285,285',
',,,,,,,,,,,,,,,,,,,285,,,285,,,285,285,,,285,,,,,,285,,,,,,,,,285,,',
',,285,285,285,285,,285,285,285,285,,,,,285,285,,,,287,287,287,285,287',
'285,285,285,287,287,,,,287,,287,287,287,287,287,287,287,,,,,,287,287',
'287,287,287,287,287,,,287,,,,,,,287,,,287,287,287,287,287,287,287,287',
',287,287,287,,287,287,287,287,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287',
'287,,,287,,,,,,287,,,,,,,,,287,,,,,287,287,287,287,,287,287,287,287',
',,,,287,287,,,,290,290,290,287,290,287,287,287,290,290,,,,290,,290,290',
'290,290,290,290,290,,,,,,290,290,290,290,290,290,290,,,290,,,,,,,290',
',,290,290,290,290,290,290,290,290,,290,290,290,,290,290,290,290,290',
',,,,,,,,,,,,,,,,,,,290,,,290,,,290,290,,,290,,,,,,290,,,,,,,,,290,,',
',,290,290,290,290,,290,290,290,290,,,,,290,290,,,,291,291,291,290,291',
'290,290,290,291,291,,,,291,,291,291,291,291,291,291,291,,,,,,291,291',
'291,291,291,291,291,,,291,,,,,,,291,,,291,291,291,291,291,291,291,291',
',291,291,291,,291,291,291,291,291,,,,,,,,,,,,,,,,,,,,291,,,291,,,291',
'291,,,291,,,,,,291,,,,,,,,,291,,,,,291,291,291,291,,291,291,291,291',
',,,,291,291,,,,,,,291,,291,291,291,296,296,296,296,296,,,,296,296,,',
',296,,296,296,296,296,296,296,296,,,,,,296,296,296,296,296,296,296,',
',296,,,,,,296,296,,296,296,296,296,296,296,296,296,296,,296,296,296',
',296,296,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296,296,,,296,,296',
',,,296,,,,,,,,,296,,,,,296,296,296,296,,296,296,296,296,,,,,296,296',
',,,566,566,566,296,566,296,296,296,566,566,,,,566,,566,566,566,566,566',
'566,566,,,,,,566,566,566,566,566,566,566,,,566,,,,,,,566,,,566,566,566',
'566,566,566,566,566,,566,566,566,,566,566,566,566,566,,,,,,,,,,,,,,',
',,,,,566,,,566,,,566,566,,,566,,,,,,566,,,,,,,,,566,,,,,566,566,566',
'566,,566,566,566,566,,,,,566,566,,,,,,,566,,566,566,566,5,5,5,5,5,,',
',5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5',
'5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5',
',,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,,,980,980,980,5,980,5,5,5,980',
'980,,,,980,,980,980,980,980,980,980,980,,,,,,980,980,980,980,980,980',
'980,,,980,,,,,,,980,,,980,980,980,980,980,980,980,980,980,980,980,980',
',980,980,980,980,980,,,,,,,,,,,,,,,,,,,,980,,,980,,,980,980,,,980,,980',
',980,,980,,,980,,,,,,980,,,,,980,980,980,980,,980,980,980,980,,,,,980',
'980,,,,20,20,20,980,20,980,980,980,20,20,,,,20,,20,20,20,20,20,20,20',
',,,,,20,20,20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20',
'20,20,,20,20,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20',
',,,,,,,,20,,,,,20,20,20,20,,20,20,20,20,,,,,20,20,,,,935,935,935,20',
'935,20,20,20,935,935,,,,935,,935,935,935,935,935,935,935,,,,,,935,935',
'935,935,935,935,935,,,935,,,,,,,935,,,935,935,935,935,935,935,935,935',
',935,935,935,,935,935,,,935,,,,,,,,,,,,,,,,,,,,935,,,935,,,935,935,',
',935,,,,,,,,,,,,,,,,,,,,935,935,935,935,,935,935,935,935,,,,,935,935',
',,,29,29,29,935,29,935,935,935,29,29,,,,29,,29,29,29,29,29,29,29,,,',
',,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29,29,29,29,29,29,29',
'29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29',
',29,,,29,,,,,,29,,,,,29,29,29,29,,29,29,29,29,,,,,29,29,,,,30,30,30',
'29,30,29,29,29,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30',
'30,30,,,30,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30,30,30,,30,30,30',
'30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,,30,,30,,,30,,,,,',
'30,,,,,30,30,30,30,,30,30,30,30,,,,,30,30,,,,31,31,31,30,31,30,30,30',
'31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,',
',,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,31,31,31,,,,,,,,',
',,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31,31',
'31,,31,31,31,31,,,,,31,31,,,,34,34,34,31,34,31,31,31,34,34,,,,34,,34',
'34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34',
'34,34,34,34,34,,34,34,34,,34,34,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34',
'34,,,34,,34,,,,,,,,,,,,,,,,,,34,34,34,34,,34,34,34,34,,,,,34,34,,,,35',
'35,35,34,35,34,34,34,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35',
'35,35,35,35,,,35,,,,,,,35,,,35,35,35,35,35,35,35,35,,35,35,35,,35,35',
',,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,,897,,897,897,897,897',
'897,,,,,,,,,897,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,35,,897,35,,35',
'35,35,888,888,888,,888,897,897,,888,888,897,,,888,,888,888,888,888,888',
'888,888,,,,,,888,888,888,888,888,888,888,,,888,,,,,,,888,,,888,888,888',
'888,888,888,888,888,,888,888,888,,888,888,,,888,,,,,,,,,,,,,,,,,,,,888',
',,888,,,888,888,,,888,,,,,,,,,,,,,,,,,,,,888,888,888,888,,888,888,888',
'888,,,,,888,888,,,,879,879,879,888,879,888,888,888,879,879,,,,879,,879',
'879,879,879,879,879,879,,,,,,879,879,879,879,879,879,879,,,879,,,,,',
',879,,,879,879,879,879,879,879,879,879,,879,879,879,,879,879,,,879,',
',,,,,,,,,,,,,,,,,,879,,,879,,,879,879,,,879,,,,,,,,,,,,,,,,,,,,879,879',
'879,879,,879,879,879,879,,,,,879,879,,,,42,42,42,879,42,879,879,879',
'42,42,,,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,',
',,,42,,,42,42,42,42,42,42,42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,,',
',,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42',
'42,42,42,,,,,42,42,,,,43,43,43,42,43,42,42,42,43,43,,,,43,,43,43,43',
'43,43,43,43,,,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43,43,43,43,43',
'43,43,43,,43,43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43',
',,43,,,,,,43,,,,,,,,,43,,,,,43,43,43,43,,43,43,43,43,,,,,43,43,,,,45',
'45,45,43,45,43,43,43,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45',
'45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45',
'45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,,45',
',,,,45,45,45,45,,45,45,45,45,,,,,45,45,,,,865,865,865,45,865,45,45,45',
'865,865,,,,865,,865,865,865,865,865,865,865,,,,,,865,865,865,865,865',
'865,865,,,865,,,,,,,865,,,865,865,865,865,865,865,865,865,,865,865,865',
',865,865,865,865,865,,,,,,,,,,,,,,,,,,,,865,,,865,,,865,865,,,865,,',
',,,865,,,,,,,,,865,,,,,865,865,865,865,,865,865,865,865,,,,,865,865',
',,,864,864,864,865,864,865,865,865,864,864,,,,864,,864,864,864,864,864',
'864,864,,,,,,864,864,864,864,864,864,864,,,864,,,,,,,864,,,864,864,864',
'864,864,864,864,864,864,864,864,864,,864,864,864,864,864,,,,,,,,,,,',
',,,,,,,,864,,,864,,,864,864,,,864,,,,864,,864,,,864,,,,,,864,,,,,864',
'864,864,864,,864,864,864,864,,,,,864,864,,,,,,,864,,864,864,864,59,59',
'59,59,59,,,,59,59,,,,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59',
'59,,,59,,,,,,59,59,,59,59,59,59,59,59,59,59,59,,59,59,59,,59,59,59,59',
'59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59,,,,59,,,,,,,,,59,,,,',
'59,59,59,59,,59,59,59,59,,,,,59,59,,,,60,60,60,59,60,59,59,59,60,60',
',,,60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60',
',,60,60,60,60,60,60,60,60,60,60,60,60,,60,60,60,60,60,,,,,,,,,,,,,,',
',,,,,60,,,60,,,60,60,,,60,,60,,,,60,,,60,,,,,,60,,,,,60,60,60,60,,60',
'60,60,60,,,,,60,60,,,,61,61,61,60,61,60,60,60,61,61,,,,61,,61,61,61',
'61,61,61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61',
'61,61,61,61,61,61,61,,61,61,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61',
'61,,,61,,,,,,61,,,61,,,,,,61,,,,,61,61,61,61,,61,61,61,61,,,,,61,61',
',,,64,64,64,61,64,61,61,61,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64',
'64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64',
',64,64,64,64,64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,',
',,,,64,,,,,64,64,64,64,,64,64,64,64,,,,,64,64,,,,65,65,65,64,65,64,64',
'64,65,65,,,,65,,65,65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65,,,65',
',,,,,,65,,,65,65,65,65,65,65,65,65,,65,65,65,,65,65,65,65,65,,,,,,,',
',,,,,,,,,,,,65,,,65,,,65,65,,,65,,,,,,65,,,,,,,,,65,,,,,65,65,65,65',
',65,65,65,65,,,,,65,65,,,,68,68,68,65,68,65,65,65,68,68,,,,68,,68,68',
'68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68',
'68,68,68,68,,68,68,68,,68,68,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68',
'68,,,68,,,,,,68,,,,,,,,,68,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,68',
',,,,68,68,,68,68,68,69,69,69,,69,,,,69,69,,,,69,,69,69,69,69,69,69,69',
',,,,,69,69,69,69,69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69',
'69,69,,69,69,,,69,,,,,,,,,,,,,,,,,,,,69,,,69,,,69,69,,,69,,69,,,,,,',
',,,,,,,,,,,69,69,69,69,,69,69,69,69,,,,,69,69,,,,70,70,70,69,70,69,69',
'69,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70',
',,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,,70,,,,,,,,,,,',
',,,,,70,,,70,,,70,,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,70,70,70,,70,70',
'70,70,,,,,70,70,,,,71,71,71,70,71,70,70,70,71,71,,,,71,,71,71,71,71',
'71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71',
'71,71,,71,71,71,,71,71,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71',
',,899,,899,899,899,899,899,,,,,,,,,899,,71,71,71,71,,71,71,71,71,,,',
',71,71,,,,,,899,71,,71,71,71,114,114,114,114,114,899,899,,114,114,899',
',,114,,114,114,114,114,114,114,114,,,,,,114,114,114,114,114,114,114',
',,114,,,,,,114,114,114,114,114,114,114,114,114,114,114,114,,114,114',
'114,,114,114,114,114,114,,,,,,,,,,,,,,,,,,,,114,,,114,,,114,114,,,114',
',114,,,,114,,,,,,,,,114,,,,,114,114,114,114,,114,114,114,114,,,,,114',
'114,,,,,,114,114,,114,114,114,119,119,119,,119,,,,119,119,,,,119,,119',
'119,119,119,119,119,119,,,,,,119,119,119,119,119,119,119,,,119,,,,,',
',119,,,119,119,119,119,119,119,119,119,,119,119,119,,119,119,119,119',
'119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,,119',
',,,,119,119,119,119,,119,119,119,119,,,,,119,119,,,,120,120,120,119',
'120,119,119,119,120,120,,,,120,,120,120,120,120,120,120,120,,,,,,120',
'120,120,120,120,120,120,,,120,,,,,,,120,,,120,120,120,120,120,120,120',
'120,,120,120,120,,120,120,120,120,120,,,,,,,,,,,,,,,,,,,,120,,,120,',
',120,120,,,120,,,,,,120,,,,,,,,,120,,,,,120,120,120,120,,120,120,120',
'120,,,,,120,120,,,,121,121,121,120,121,120,120,120,121,121,,,,121,,121',
'121,121,121,121,121,121,,,,,,121,121,121,121,121,121,121,,,121,,,,,',
',121,,,121,121,121,121,121,121,121,121,,121,121,121,,121,121,121,121',
'121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,,,,,121,,,,,,,,,121',
',,,,121,121,121,121,,121,121,121,121,,,,,121,121,,,,122,122,122,121',
'122,121,121,121,122,122,,,,122,,122,122,122,122,122,122,122,,,,,,122',
'122,122,122,122,122,122,,,122,,,,,,,122,,,122,122,122,122,122,122,122',
'122,,122,122,122,,122,122,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,',
',122,122,,,122,,,,,,122,,,,,,,,,122,,,,,122,122,122,122,,122,122,122',
'122,,,,,122,122,,,,,,,122,,122,122,122,123,123,123,123,123,,,,123,123',
',,,123,,123,123,123,123,123,123,123,,,,,,123,123,123,123,123,123,123',
',,123,,,,,,123,123,,123,123,123,123,123,123,123,123,123,,123,123,123',
',123,123,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,,123',
',,,123,,,,,,,,,123,,,,,123,123,123,123,,123,123,123,123,,,,,123,123',
',,,846,846,846,123,846,123,123,123,846,846,,,,846,,846,846,846,846,846',
'846,846,,,,,,846,846,846,846,846,846,846,,,846,,,,,,,846,,,846,846,846',
'846,846,846,846,846,,846,846,846,,846,846,846,846,846,,,,,,,,,,,,,,',
',,,,,846,,,846,,,846,846,,,846,,846,,,,846,,,,,,,,,846,,,,,846,846,846',
'846,,846,846,846,846,,,,,846,846,,,,843,843,843,846,843,846,846,846',
'843,843,,,,843,,843,843,843,843,843,843,843,,,,,,843,843,843,843,843',
'843,843,,,843,,,,,,,843,,,843,843,843,843,843,843,843,843,,843,843,843',
',843,843,843,843,843,,,,,,,,,,,,,,,,,,,,843,,,843,,,843,843,,,843,,',
',,,843,,,,,,,,,843,,,,,843,843,843,843,,843,843,843,843,,,,,843,843',
',,,209,209,209,843,209,843,843,843,209,209,,,,209,,209,209,209,209,209',
'209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209',
'209,209,209,209,209,,209,209,209,,209,209,209,209,209,,,,,,,,,,,,,,',
',,,,,209,,,209,,,209,209,,,209,,209,,,,209,,,,,,,,,209,,,,,209,209,209',
'209,,209,209,209,209,,,,,209,209,,,,210,210,210,209,210,209,209,209',
'210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210,210',
'210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210,210',
',210,210,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,210',
',,,210,,,,,,,,,210,,,,,210,210,210,210,,210,210,210,210,,,,,210,210',
',,,211,211,211,210,211,210,210,210,211,211,,,,211,,211,211,211,211,211',
'211,211,,,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211',
'211,211,211,211,211,,211,211,211,,211,211,211,211,211,,,,,,,,,,,,,,',
',,,,,211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,,211,,,,,211,211,211',
'211,,211,211,211,211,,,,,211,211,,,,212,212,212,211,212,211,211,211',
'212,212,,,,212,,212,212,212,212,212,212,212,,,,,,212,212,212,212,212',
'212,212,,,212,,,,,,,212,,,212,212,212,212,212,212,212,212,,212,212,212',
',212,212,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,,',
',,,212,,,,,,,,,212,,,,,212,212,212,212,,212,212,212,212,,,,,212,212',
',,,213,213,213,212,213,212,212,212,213,213,,,,213,,213,213,213,213,213',
'213,213,,,,,,213,213,213,213,213,213,213,,,213,,,,,,,213,,,213,213,213',
'213,213,213,213,213,,213,213,213,,213,213,213,213,213,,,,,,,,,,,,,,',
',,,,,213,,,213,,,213,213,,,213,,,,,,213,,,,,,,,,213,,,,,213,213,213',
'213,,213,213,213,213,,,,,213,213,,,,214,214,214,213,214,213,213,213',
'214,214,,,,214,,214,214,214,214,214,214,214,,,,,,214,214,214,214,214',
'214,214,,,214,,,,,,,214,,,214,214,214,214,214,214,214,214,214,214,214',
'214,,214,214,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214',
',214,,214,,214,,,214,,,,,,214,,,,,214,214,214,214,,214,214,214,214,',
',,,214,214,,,,220,220,220,214,220,214,214,214,220,220,,,,220,,220,220',
'220,220,220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220',
',,220,220,220,220,220,220,220,220,,220,220,220,,220,220,220,220,220',
',,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,,220,,',
',,220,220,220,220,,220,220,220,220,,,,,220,220,,,,221,221,221,220,221',
'220,220,220,221,221,,,,221,,221,221,221,221,221,221,221,,,,,,221,221',
'221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,221',
',221,221,221,,221,221,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221',
'221,,,221,,,,,,221,,,,,,,,,221,,,,,221,221,221,221,,221,221,221,221',
',,,,221,221,,,,222,222,222,221,222,221,221,221,222,222,,,,222,,222,222',
'222,222,222,222,222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,,222',
',,222,222,222,222,222,222,222,222,,222,222,222,,222,222,222,222,222',
',,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,,,,,222,,,,,,,,,222,,',
',,222,222,222,222,,222,222,222,222,,,,,222,222,222,,,693,693,693,222',
'693,222,222,222,693,693,,,,693,,693,693,693,693,693,693,693,,,,,,693',
'693,693,693,693,693,693,,,693,,,,,,,693,,,693,693,693,693,693,693,693',
'693,,693,693,693,,693,693,693,693,693,,,,,,,,,,,,,,,,,,,,693,,,693,',
',693,693,,,693,,693,,,,693,,,,,,,,,693,,,,,693,693,693,693,,693,693',
'693,693,,,,,693,693,,,,688,688,688,693,688,693,693,693,688,688,,,,688',
',688,688,688,688,688,688,688,,,,,,688,688,688,688,688,688,688,,,688',
',,,,,,688,,,688,688,688,688,688,688,688,688,,688,688,688,,688,688,,',
'688,,,,,,,,,,,,,,,,,,,,688,,,688,,,688,688,,,688,,,,,,,,,,,,,,,,,,,',
'688,688,688,688,,688,688,688,688,,,,,688,688,,,,677,677,677,688,677',
'688,688,688,677,677,,,,677,,677,677,677,677,677,677,677,,,,,,677,677',
'677,677,677,677,677,,,677,,,,,,,677,,,677,677,677,677,677,677,677,677',
',677,677,677,,677,677,,,677,,,,,,,,,,,,,,,,,,,,677,,,677,,,677,677,',
',677,,,,,,,,,,,,,,,,,,,,677,677,677,677,,677,677,677,677,,,,,677,677',
',,,674,674,674,677,674,677,677,677,674,674,,,,674,,674,674,674,674,674',
'674,674,,,,,,674,674,674,674,674,674,674,,,674,,,,,,,674,,,674,674,674',
'674,674,674,674,674,,674,674,674,,674,674,674,674,674,,,,,,,,,,,,,,',
',,,,,674,,,674,,,674,674,,,674,,,,,,674,,,,,,,,,674,,,,,674,674,674',
'674,,674,674,674,674,,,,,674,674,,,,671,671,671,674,671,674,674,674',
'671,671,,,,671,,671,671,671,671,671,671,671,,,,,,671,671,671,671,671',
'671,671,,,671,,,,,,,671,,,671,671,671,671,671,671,671,671,,671,671,671',
',671,671,671,671,671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,',
',,,671,,,,,,,,,671,,,,,671,671,671,671,,671,671,671,671,,,,,671,671',
',,,321,321,321,671,321,671,671,671,321,321,,,,321,,321,321,321,321,321',
'321,321,,,,,,321,321,321,321,321,321,321,,,321,,,,,,,321,,,321,321,321',
'321,321,321,321,321,,321,321,321,,321,321,,,321,,,,,,,,,,,,,,,,,,,,321',
',,321,,,321,321,,,321,,,,,,,,,,,,,,,,,,,,321,321,321,321,,321,321,321',
'321,,,,,321,321,,,,647,647,647,321,647,321,321,321,647,647,,,,647,,647',
'647,647,647,647,647,647,,,,,,647,647,647,647,647,647,647,,,647,,,,,',
',647,,,647,647,647,647,647,647,647,647,,647,647,647,,647,647,647,647',
'647,,,,,,,,,,,,,,,,,,,,647,,,647,,,647,647,,,647,,,,,,647,,,,,,,,,647',
',,,,647,647,647,647,,647,647,647,647,,,,,647,647,,,,646,646,646,647',
'646,647,647,647,646,646,,,,646,,646,646,646,646,646,646,646,,,,,,646',
'646,646,646,646,646,646,,,646,,,,,,,646,,,646,646,646,646,646,646,646',
'646,,646,646,646,,646,646,646,646,646,,,,,,,,,,,,,,,,,,,,646,,,646,',
',646,646,,,646,,,,,,646,,,,,,,,,646,,,,,646,646,646,646,,646,646,646',
'646,,,,,646,646,,,,328,328,328,646,328,646,646,646,328,328,,,,328,,328',
'328,328,328,328,328,328,,,,,,328,328,328,328,328,328,328,,,328,,,,,',
',328,,,328,328,328,328,328,328,328,328,,328,328,328,,328,328,328,328',
'328,,,,,,,,,,,,,,,,,,,,328,,,328,,,328,328,,,328,,,,,,328,,,,,,,,,328',
',,,,328,328,328,328,,328,328,328,328,,,,,328,328,,,,330,330,330,328',
'330,328,328,328,330,330,,,,330,,330,330,330,330,330,330,330,,,,,,330',
'330,330,330,330,330,330,,,330,,,,,,,330,,,330,330,330,330,330,330,330',
'330,,330,330,330,,330,330,330,330,330,,,,,,,,,,,,,,,,,,,,330,,,330,330',
',330,330,,,330,,,,,,330,,,,,,,,,330,,,,,330,330,330,330,,330,330,330',
'330,,,,,330,330,,,,642,642,642,330,642,330,330,330,642,642,,,,642,,642',
'642,642,642,642,642,642,,,,,,642,642,642,642,642,642,642,,,642,,,,,',
',642,,,642,642,642,642,642,642,642,642,,642,642,642,,642,642,642,642',
'642,,,,,,,,,,,,,,,,,,,,642,,,642,,,642,642,,,642,,,,,,642,,,,,,,,,642',
',,,,642,642,642,642,,642,642,642,642,,,,,642,642,,,,641,641,641,642',
'641,642,642,642,641,641,,,,641,,641,641,641,641,641,641,641,,,,,,641',
'641,641,641,641,641,641,,,641,,,,,,,641,,,641,641,641,641,641,641,641',
'641,,641,641,641,,641,641,641,641,641,,,,,,,,,,,,,,,,,,,,641,,,641,',
',641,641,,,641,,,,,,641,,,,,,,,,641,,,,,641,641,641,641,,641,641,641',
'641,,,,,641,641,,,,640,640,640,641,640,641,641,641,640,640,,,,640,,640',
'640,640,640,640,640,640,,,,,,640,640,640,640,640,640,640,,,640,,,,,',
',640,,,640,640,640,640,640,640,640,640,640,640,640,640,,640,640,640',
'640,640,,,,,,,,,,,,,,,,,,,,640,,,640,,,640,640,,,640,,,,640,,640,,,640',
',,,,,640,,,,,640,640,640,640,,640,640,640,640,,,,,640,640,,,,639,639',
'639,640,639,640,640,640,639,639,,,,639,,639,639,639,639,639,639,639',
',,,,,639,639,639,639,639,639,639,,,639,,,,,,,639,,,639,639,639,639,639',
'639,639,639,639,639,639,639,,639,639,639,639,639,,,,,,,,,,,,,,,,,,,',
'639,,,639,,,639,639,,,639,,639,,639,,639,,,639,,,,,,639,,,,,639,639',
'639,639,,639,639,639,639,,,,,639,639,,,,636,636,636,639,636,639,639',
'639,636,636,,,,636,,636,636,636,636,636,636,636,,,,,,636,636,636,636',
'636,636,636,,,636,,,,,,,636,,,636,636,636,636,636,636,636,636,,636,636',
'636,,636,636,636,636,636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636',
',,,,,636,,,,,,,,,636,,,,,636,636,636,636,,636,636,636,636,,,,,636,636',
',,,,,,636,,636,636,636,635,635,635,635,635,,,,635,635,,,,635,,635,635',
'635,635,635,635,635,,,,,,635,635,635,635,635,635,635,,,635,,,,,,635',
'635,,635,635,635,635,635,635,635,635,635,,635,635,635,,635,635,635,635',
'635,,,,,,,,,,,,,,,,,,,,635,,,635,,,635,635,,,635,,635,,,,635,,,,,,,',
',635,,,,,635,635,635,635,,635,635,635,635,,,,,635,635,,,,632,632,632',
'635,632,635,635,635,632,632,,,,632,,632,632,632,632,632,632,632,,,,',
',632,632,632,632,632,632,632,,,632,,,,,,,632,,,632,632,632,632,632,632',
'632,632,632,632,632,632,,632,632,632,632,632,,,,,,,,,,,,,,,,,,,,632',
',,632,,,632,632,,,632,,632,,632,,632,,,632,,,,,,632,,,,,632,632,632',
'632,,632,632,632,632,,,,,632,632,,,,631,631,631,632,631,632,632,632',
'631,631,,,,631,,631,631,631,631,631,631,631,,,,,,631,631,631,631,631',
'631,631,,,631,,,,,,,631,,,631,631,631,631,631,631,631,631,,631,631,631',
',631,631,631,631,631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631,631,,,631,,',
',,,631,,,,,,,,,631,,,,,631,631,631,631,,631,631,631,631,,,,,631,631',
',,,630,630,630,631,630,631,631,631,630,630,,,,630,,630,630,630,630,630',
'630,630,,,,,,630,630,630,630,630,630,630,,,630,,,,,,,630,,,630,630,630',
'630,630,630,630,630,,630,630,630,,630,630,630,630,630,,,,,,,,,,,,,,',
',,,,,630,,,630,,,630,630,,,630,,630,,,,630,,,,,,,,,630,,,,,630,630,630',
'630,,630,630,630,630,,,,,630,630,,,,347,347,347,630,347,630,630,630',
'347,347,,,,347,,347,347,347,347,347,347,347,,,,,,347,347,347,347,347',
'347,347,,,347,,,,,,,347,,,347,347,347,347,347,347,347,347,,347,347,347',
',347,347,347,347,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347,347,,,347,,',
',,,347,,,,,,,,,347,,,,,347,347,347,347,,347,347,347,347,,,,,347,347',
',,,598,598,598,347,598,347,347,347,598,598,,,,598,,598,598,598,598,598',
'598,598,,,,,,598,598,598,598,598,598,598,,,598,,,,,,,598,,,598,598,598',
'598,598,598,598,598,598,598,598,598,,598,598,598,598,598,,,,,,,,,,,',
',,,,,,,,598,,,598,,,598,598,,,598,,598,,598,,598,,,598,,,,,,598,,,,',
'598,598,598,598,,598,598,598,598,,,,,598,598,,,,588,588,588,598,588',
'598,598,598,588,588,,,,588,,588,588,588,588,588,588,588,,,,,,588,588',
'588,588,588,588,588,,,588,,,,,,,588,,,588,588,588,588,588,588,588,588',
'588,588,588,588,,588,588,588,588,588,,,,,,,,,,,,,,,,,,,,588,,,588,,',
'588,588,,,588,,588,,588,,588,,,588,,,,,,588,,,,,588,588,588,588,,588',
'588,588,588,,,,,588,588,,,,587,587,587,588,587,588,588,588,587,587,',
',,587,,587,587,587,587,587,587,587,,,,,,587,587,587,587,587,587,587',
',,587,,,,,,,587,,,587,587,587,587,587,587,587,587,,587,587,587,,587',
'587,587,587,587,,,,,,,,,,,,,,,,,,,,587,,,587,,,587,587,,,587,,587,,',
',587,,,,,,,,,587,,,,,587,587,587,587,,587,587,587,587,,,,,587,587,,',
',368,368,368,587,368,587,587,587,368,368,,,,368,,368,368,368,368,368',
'368,368,,,,,,368,368,368,368,368,368,368,,,368,,,,,,,368,,,368,368,368',
'368,368,368,368,368,,368,368,368,,368,368,368,368,368,,,,,,,,,,,,,,',
',,,,,368,,,368,,,368,368,,,368,,,,,,368,,,,,,,,,368,,,,,368,368,368',
'368,,368,368,368,368,,,,,368,368,,,,541,541,541,368,541,368,368,368',
'541,541,,,,541,,541,541,541,541,541,541,541,,,,,,541,541,541,541,541',
'541,541,,,541,,,,,,,541,,,541,541,541,541,541,541,541,541,541,541,541',
'541,,541,541,541,541,541,,,,,,,,,,,,,,,,,,,,541,,,541,,,541,541,,,541',
',,,,,541,,,541,,,,,,541,,,,,541,541,541,541,,541,541,541,541,,,,,541',
'541,,,,538,538,538,541,538,541,541,541,538,538,,,,538,,538,538,538,538',
'538,538,538,,,,,,538,538,538,538,538,538,538,,,538,,,,,,,538,,,538,538',
'538,538,538,538,538,538,538,538,538,538,,538,538,538,538,538,,,,,,,',
',,,,,,,,,,,,538,,,538,,,538,538,,,538,,538,,,,538,,,538,,,,,,538,,,',
',538,538,538,538,,538,538,538,538,,,,,538,538,,,,532,532,532,538,532',
'538,538,538,532,532,,,,532,,532,532,532,532,532,532,532,,,,,,532,532',
'532,532,532,532,532,,,532,,,,,,,532,,,532,532,532,532,532,532,532,532',
',532,532,532,,532,532,532,532,532,,,,,,,,,,,,,,,,,,,,532,,,532,,,532',
'532,,,532,,,,,,532,,,,,,,,,532,,,,,532,532,532,532,,532,532,532,532',
',,,,532,532,,,,527,527,527,532,527,532,532,532,527,527,,,,527,,527,527',
'527,527,527,527,527,,,,,,527,527,527,527,527,527,527,,,527,,,,,,,527',
',,527,527,527,527,527,527,527,527,,527,527,527,,527,527,527,527,527',
',,,,,,,,,,,,,,,,,,,527,,,527,,,527,527,,,527,,,,,,527,,,,,,,,,527,,',
',,527,527,527,527,,527,527,527,527,,,,,527,527,,,,526,526,526,527,526',
'527,527,527,526,526,,,,526,,526,526,526,526,526,526,526,,,,,,526,526',
'526,526,526,526,526,,,526,,,,,,,526,,,526,526,526,526,526,526,526,526',
',526,526,526,,526,526,526,526,526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526',
'526,,,526,,,,,,526,,,,,,,,,526,,,,,526,526,526,526,,526,526,526,526',
',,,,526,526,,,,523,523,523,526,523,526,526,526,523,523,,,,523,,523,523',
'523,523,523,523,523,,,,,,523,523,523,523,523,523,523,,,523,,,,,,,523',
',,523,523,523,523,523,523,523,523,,523,523,523,,523,523,,,523,,,,,,',
',,,,,,,,,,,,,523,,,523,,,523,523,,,523,,,,,,,,,,,,,,,,,,,,523,523,523',
'523,,523,523,523,523,,,,,523,523,,,,517,517,517,523,517,523,523,523',
'517,517,,,,517,,517,517,517,517,517,517,517,,,,,,517,517,517,517,517',
'517,517,,,517,,,,,,,517,,,517,517,517,517,517,517,517,517,517,517,517',
'517,,517,517,517,517,517,,,,,,,,,,,,,,,,,,,,517,,,517,,,517,517,,,517',
',517,,517,,517,,,517,,,,,,517,,,,,517,517,517,517,,517,517,517,517,',
',,,517,517,,,,515,515,515,517,515,517,517,517,515,515,,,,515,,515,515',
'515,515,515,515,515,,,,,,515,515,515,515,515,515,515,,,515,,,,,,,515',
',,515,515,515,515,515,515,515,515,,515,515,515,,515,515,,,515,,,,,,',
',,,,,,,,,,,,,515,,,515,,,515,515,,,515,,,,,,,,,,,,,,,,,,,,515,515,515',
'515,,515,515,515,515,,,,,515,515,,,,384,384,384,515,384,515,515,515',
'384,384,,,,384,,384,384,384,384,384,384,384,,,,,,384,384,384,384,384',
'384,384,,,384,,,,,,,384,,,384,384,384,384,384,384,384,384,,384,384,384',
',384,384,384,384,384,,,,,,,,,,,,,,,,,,,,384,,,384,,,384,384,,,384,,',
',,,384,,,,,,,,,384,,,,,384,384,384,384,,384,384,384,384,,,,,384,384',
',,,,,,384,,384,384,384,507,507,507,507,507,,,,507,507,,,,507,,507,507',
'507,507,507,507,507,,,,,,507,507,507,507,507,507,507,,,507,,,,,,507',
'507,507,507,507,507,507,507,507,507,507,507,,507,507,507,,507,507,507',
'507,507,,,,,,,,,,,,,,,,,,,,507,,,507,,,507,507,,,507,,507,,,,507,,,',
',,,,,507,,,,,507,507,507,507,,507,507,507,507,,,,,507,507,,,,,,507,507',
',507,507,507,501,501,501,,501,,,,501,501,,,,501,,501,501,501,501,501',
'501,501,,,,,,501,501,501,501,501,501,501,,,501,,,,,,,501,,,501,501,501',
'501,501,501,501,501,,501,501,501,,501,501,501,501,501,,,,,,,,,,,,,,',
',,,,,501,,,501,,,501,501,,,501,,,,,,501,,,,,,,,,501,,,,,501,501,501',
'501,,501,501,501,501,,,,,501,501,,,,499,499,499,501,499,501,501,501',
'499,499,,,,499,,499,499,499,499,499,499,499,,,,,,499,499,499,499,499',
'499,499,,,499,,,,,,,499,,,499,499,499,499,499,499,499,499,499,499,499',
'499,,499,499,499,499,499,,,,,,,,,,,,,,,,,,,,499,,,499,,,499,499,,,499',
',,,499,,499,,,499,,,,,,499,,,,,499,499,499,499,,499,499,499,499,,,,',
'499,499,,,,497,497,497,499,497,499,499,499,497,497,,,,497,,497,497,497',
'497,497,497,497,,,,,,497,497,497,497,497,497,497,,,497,,,,,,,497,,,497',
'497,497,497,497,497,497,497,497,497,497,497,,497,497,497,497,497,,,',
',,,,,,,,,,,,,,,,497,,,497,,,497,497,,,497,,497,,497,,497,,,497,,,,,',
'497,,,,,497,497,497,497,,497,497,497,497,,,,,497,497,,,,462,462,462',
'497,462,497,497,497,462,462,,,,462,,462,462,462,462,462,462,462,,,,',
',462,462,462,462,462,462,462,,,462,,,,,,,462,,,462,462,462,462,462,462',
'462,462,,462,462,462,,462,462,462,462,462,,,,,,,,,,,,,,,,,,,,462,,,462',
',,462,462,,,462,,,,,,462,,,,,,,,,462,,,,,462,462,462,462,,462,462,462',
'462,,,,,462,462,,,,461,461,461,462,461,462,462,462,461,461,,,,461,,461',
'461,461,461,461,461,461,,,,,,461,461,461,461,461,461,461,,,461,,,,,',
',461,,,461,461,461,461,461,461,461,461,,461,461,461,,461,461,461,461',
'461,,,,,,,,,,,,,,,,,,,,461,,,461,,,461,461,,,461,,,,,,461,,,,,,,,,461',
',,,,461,461,461,461,,461,461,461,461,,,,,461,461,,,,460,460,460,461',
'460,461,461,461,460,460,,,,460,,460,460,460,460,460,460,460,,,,,,460',
'460,460,460,460,460,460,,,460,,,,,,,460,,,460,460,460,460,460,460,460',
'460,,460,460,460,,460,460,460,460,460,,,,,,,,,,,,,,,,,,,,460,,,460,',
',460,460,,,460,,,,,,460,,,,,,,,,460,,,,,460,460,460,460,,460,460,460',
'460,,,,,460,460,,,,458,458,458,460,458,460,460,460,458,458,,,,458,,458',
'458,458,458,458,458,458,,,,,,458,458,458,458,458,458,458,,,458,,,,,',
',458,,,458,458,458,458,458,458,458,458,458,458,458,458,,458,458,458',
'458,458,,,,,,,,,,,,,,,,,,,,458,,,458,,,458,458,,,458,,458,,458,,458',
',,458,,,,,,458,,,,,458,458,458,458,,458,458,458,458,,,,,458,458,,,,412',
'412,412,458,412,458,458,458,412,412,,,,412,,412,412,412,412,412,412',
'412,,,,,,412,412,412,412,412,412,412,,,412,,,,,,,412,,,412,412,412,412',
'412,412,412,412,,412,412,412,,412,412,412,412,412,,,,,,,,,,,,,,,,,,',
',412,,,412,,,412,412,,,412,,,,,,412,,,,,,,,,412,,,,,412,412,412,412',
',412,412,412,412,,,,,412,412,,,,304,304,304,412,304,412,412,412,304',
'304,,,,304,,304,304,304,304,304,304,304,,,,,,304,304,304,304,304,304',
'304,,,304,,,,,,,304,,,304,304,304,304,304,304,304,304,,304,304,304,',
'304,304,,,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,,708,,708',
'708,708,708,708,,,,,,,,,708,,304,304,304,304,,304,304,304,304,,,,,304',
'304,,,,304,,708,304,,304,304,304,710,710,710,,710,708,708,,710,710,708',
',,710,,710,710,710,710,710,710,710,,,,,,710,710,710,710,710,710,710',
',,710,,,,,,,710,,,710,710,710,710,710,710,710,710,,710,710,710,,710',
'710,710,710,710,,,,,,,,,,,,,,,,,,,,710,,,710,,,710,710,,,710,,,,,,710',
',,,,,,,,710,,,,,710,710,710,710,,710,710,710,710,,,,,710,710,,,,,,,710',
',710,710,710,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9',
'9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9',
',,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,',
',,,,,,,,,,9,627,627,627,627,627,627,627,627,627,627,627,627,627,627',
'627,627,627,627,627,627,627,627,627,627,,,,627,627,627,627,627,627,627',
'627,627,627,,,,,,627,627,627,627,627,627,627,627,627,,,627,,,,,,,,627',
'627,,627,627,627,627,627,627,627,,,627,627,,,,627,627,627,627,,,,,,',
',,,,,,,627,627,,627,627,627,627,627,627,627,627,627,627,627,627,,,627',
'627,,,,,,,,,,,,,,627,403,403,403,403,403,403,403,403,403,403,403,403',
'403,403,403,403,403,403,403,403,403,403,403,403,,,,403,403,403,403,403',
'403,403,403,403,403,,,,,,403,403,403,403,403,403,403,403,403,,,403,',
',,,,,,403,403,,403,403,403,403,403,403,403,,,403,403,,,,403,403,403',
'403,,,,,,,,,,,,,,403,403,,403,403,403,403,403,403,403,403,403,403,403',
'403,,,403,403,,,,,,,,,,,,,,403,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
'8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,',
'8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8',
'8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,749,749,749,749,749,749,749,749,749,749',
'749,749,749,749,749,749,749,749,749,749,749,749,749,749,,,,749,749,749',
'749,749,749,749,749,749,749,,,,,,749,749,749,749,749,749,749,749,749',
',,749,,,,,,,,749,749,,749,749,749,749,749,749,749,,,749,749,,,,749,749',
'749,749,,,,,,,,,,,,,,749,749,,749,749,749,749,749,749,749,749,749,749',
'749,749,,,749,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72',
'72,72,72,72,72,72,,,,72,72,72,72,72,72,72,72,72,72,,,,,,72,72,72,72',
'72,72,72,72,72,72,72,72,,72,,,,,,72,72,,72,72,72,72,72,72,72,,,72,72',
',,,72,72,72,72,,,,,,72,,,,,,,,72,72,,72,72,72,72,72,72,72,72,72,72,72',
'72,529,529,72,,529,,,,,,,,529,529,,529,529,529,529,529,529,529,,,529',
'529,,,,529,529,529,529,,,,,,529,,,,,,,,529,529,,529,529,529,529,529',
'529,529,529,529,529,529,529,265,265,529,,265,,,,,,,,265,265,,265,265',
'265,265,265,265,265,,,265,265,,,,265,265,265,265,,,,,,,,,,,,,,265,265',
',265,265,265,265,265,265,265,265,265,265,265,265,589,589,265,,589,,',
',,,,,589,589,,589,589,589,589,589,589,589,,,589,589,,,,589,589,589,589',
',,,,,589,,,,,,,,589,589,,589,589,589,589,589,589,589,589,589,589,589',
'589,590,590,589,,590,,,,,,,,590,590,,590,590,590,590,590,590,590,,,590',
'590,,,,590,590,590,590,,,,,,590,,,,,,,,590,590,,590,590,590,590,590',
'590,590,590,590,590,590,590,217,217,590,,217,,,,,,,,217,217,,217,217',
'217,217,217,217,217,,,217,217,,,,217,217,217,217,,,,,,,,,,,,,,217,217',
',217,217,217,217,217,217,217,217,217,217,217,217,596,596,217,,596,,',
',,,,,596,596,,596,596,596,596,596,596,596,,,596,596,,,,596,596,596,596',
',,,,,596,,,,,,,,596,596,,596,596,596,596,596,596,596,596,596,596,596',
'596,216,216,596,,216,,,,,,,,216,216,,216,216,216,216,216,216,216,,,216',
'216,,,,216,216,216,216,,,,,,216,,,,,,,,216,216,,216,216,216,216,216',
'216,216,216,216,216,216,216,597,597,216,,597,,,,,,,,597,597,,597,597',
'597,597,597,597,597,,,597,597,,,,597,597,597,597,,,,,,597,,,,,,,,597',
'597,,597,597,597,597,597,597,597,597,597,597,597,597,215,215,597,,215',
',,,,,,,215,215,,215,215,215,215,215,215,215,,,215,215,,,,215,215,215',
'215,,,,,,215,,,,,,,,215,215,,215,215,215,215,215,215,215,215,215,215',
'215,215,456,456,215,,456,,,,,,,,456,456,,456,456,456,456,456,456,456',
',,456,456,,,,456,456,456,456,,,,,,456,,,,,,,,456,456,,456,456,456,456',
'456,456,456,456,456,456,456,456,457,457,456,,457,,,,,,,,457,457,,457',
'457,457,457,457,457,457,,,457,457,,,,457,457,457,457,,,,,,457,,,,,,',
',457,457,,457,457,457,457,457,457,457,457,457,457,457,457,633,633,457',
',633,,,,,,,,633,633,,633,633,633,633,633,633,633,,,633,633,,,,633,633',
'633,633,,,,,,633,,,,,,,,633,633,,633,633,633,633,633,633,633,633,633',
'633,633,633,634,634,633,,634,,,,,,,,634,634,,634,634,634,634,634,634',
'634,,,634,634,,,,634,634,634,634,,,,,,634,,,,,,,,634,634,,634,634,634',
'634,634,634,634,634,634,634,634,634,518,518,634,,518,,,,,,,,518,518',
',518,518,518,518,518,518,518,,,518,518,,,,518,518,518,518,,,,,,518,',
',,,,,,518,518,,518,518,518,518,518,518,518,518,518,518,518,518,519,519',
'518,,519,,,,,,,,519,519,,519,519,519,519,519,519,519,,,519,519,,,,519',
'519,519,519,,,,,,519,,,,,,,,519,519,,519,519,519,519,519,519,519,519',
'519,519,519,519,528,528,519,,528,,,,,,,,528,528,,528,528,528,528,528',
'528,528,,,528,528,,,,528,528,528,528,,,,,,528,,,,,,,,528,528,,528,528',
'528,528,528,528,528,528,528,528,528,528,977,977,528,,977,,,,,,,,977',
'977,,977,977,977,977,977,977,977,,,977,977,,,,977,977,977,977,,,,,,977',
',,,,,,,977,977,,977,977,977,977,977,977,977,977,977,977,977,977,981',
'981,977,,981,,,,,,,,981,981,,981,981,981,981,981,981,981,,,981,981,',
',,981,981,981,981,,,,,,981,,,,,,,,981,981,,981,981,981,981,981,981,981',
'981,981,981,981,981,982,982,981,,982,,,,,,,,982,982,,982,982,982,982',
'982,982,982,,,982,982,,,,982,982,982,982,,,,,,982,,,,,,,,982,982,,982',
'982,982,982,982,982,982,982,982,982,982,982,,343,982,343,343,343,343',
'343,,895,,895,895,895,895,895,343,,,,,,,,895,,706,,706,706,706,706,706',
',,,,,343,343,,706,,,,,895,343,343,343,343,,,,343,895,895,895,895,,,',
'895,706,,927,,927,927,927,927,927,706,706,706,706,,,,706,927,,929,,929',
'929,929,929,929,931,,931,931,931,931,931,,929,,,,,927,,931,,,,,,,927',
'927,927,927,,,,927,929,,,,,,,931,,929,929,929,929,,,,929,,931,931,,',
'748,931,748,748,748,748,748,,747,,747,747,747,747,747,748,,,,,,,,747',
',1026,,1026,1026,1026,1026,1026,,,,,,748,,,1026,,,,,747,748,748,748',
'748,,,,748,747,747,747,747,,,,747,1026,,988,,988,988,988,988,988,,,1026',
'1026,,,,1026,988,,998,,998,998,998,998,998,1000,,1000,1000,1000,1000',
'1000,,998,,,,,988,,1000,,1002,,1002,1002,1002,1002,1002,988,988,,,,988',
'998,,1002,,,,,1000,,998,998,998,998,,,,998,,1000,1000,,,,1000,1002,',
'1004,,1004,1004,1004,1004,1004,,,1002,1002,,,,1002,1004,,546,,546,546',
'546,546,546,,704,,704,704,704,704,704,546,,,,,1004,,,704,,,,,,,,1004',
'1004,,,,1004,546,,,,,,,,704,546,546,546,546,,,,546,704,704,704,704,',
',,704' ]
        racc_action_check = arr = ::Array.new(24783, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  4251,   191,   nil,    99,   nil, 11169,  1609,  1128, 22907, 22523,
  1123,   nil,  1061,  1059,   490,  1082,   802,   576,   nil,   -66,
 11431,  1733,  1112,   nil,   518,   nil,    87,  1106,  1492, 11693,
 11824, 11955,   nil,  4111, 12086, 12217,   nil,   997,   168,   684,
  1074,   127, 12618, 12749,   485, 12880,   974,   546,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1216,   nil, 13281,
 13412, 13543,   -15,   nil, 13674, 13805,   nil,   nil, 13936, 14075,
 14206, 14337, 23148,   nil,   nil,   nil,   nil,   nil,   170,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   830,   nil,
   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1078,   nil, 14476,   nil,   nil,   nil,   nil, 14615,
 14746, 14877, 15008, 15147,   nil,  4811,   nil,   612,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   936,   nil,  5231, 15540,
 15671, 15802, 15933, 16064, 16195, 23697, 23575, 23453,   nil,   nil,
 16326, 16457, 16588,   nil,   nil,  1044,   414,   339,   960,   338,
   862,   917,   nil,  6568,  3831,   913,  6699,  6830,  6961,  7092,
  7223,  7354,  7485,  7616,  7747,  7878,  8009,  8140,  8271,  8402,
  8533,  8664,  8795,  8926,  9057,  9188,  9319,  9450,   nil,   nil,
   nil,   nil,  9581,   nil,   nil, 23270,   nil,   nil,   902,  9843,
  9974,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 10105,   nil,
  2151,   nil,   864,   856,   nil, 10367,   900, 10498,   nil,   nil,
 10629, 10760,   nil,   nil,   -78,   nil, 10899,  1221,   873,   835,
  2851,   841,   880,   833, 22245,  2291,  1009,  1154,  1188,   874,
  1292,   nil,   804,   752,    70,   nil,   nil,   nil,   776,   135,
   731, 17374,   nil,   609,   768,   470,   nil,   753, 17767,   nil,
 17898,  4671,  1567,   680,   nil,   265,   319,   713,   690,   100,
   691,   nil,   nil, 24369,   506,    34,    32, 19216,  3131,  2011,
   346,   720,   594,    25,     7,  1257,   673,    86,   683,   nil,
   nil,   436,   251,   -36,   nil,   656,   nil,   592, 19740,   nil,
   nil,   nil,   380,   510,   447,   513,   -24,   582,   141,   195,
   118,   nil,   444,   nil, 20919,   nil,   420,   353,   179,   425,
   436,   -27,   -25,   240,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   335, 22779,   nil,   nil,   nil,   nil,   309,   nil,
   nil,   237, 22114,   229,   nil,   nil,   185,   nil,   940,   -82,
   160,   nil,   nil,  1871,   nil,   nil,   nil,   nil,   nil,  2011,
   133,   nil,   164,   176,   499,   560,  1604,   nil,   nil,   nil,
   608,   498,   250,   nil,   nil,  1354,   968,   nil,   nil,   nil,
   nil,   nil,   nil,    19,   nil,   351, 23758, 23819, 21983,   261,
 21852, 21721, 21590,  3411,  2991,   -44,   856,   389,   393,   404,
   420,  4251,  4391,  1441,  3551,  3831,  3131,  4111,  3971,  3691,
   844,   925,  3271,  2851,  2571,  1168,   nil,  1736,   nil,   nil,
   378,   nil,   nil,   nil,   388,   nil,   nil, 21459,   nil, 21328,
   nil, 21197,   nil,   391,   nil,   nil,   nil, 21058,  1614,   nil,
   400,   400,   nil,   nil,   403, 20788,   425, 20657, 24002, 24063,
   265,   494,   nil, 20526,   466,   nil, 20395, 20264, 24124, 23209,
  1306,  2711, 20133,   613,   617,   497,   544,   nil, 20002,   nil,
   nil, 19871,   nil,   nil,   nil,   nil, 24670,   nil,   502,   503,
   nil,   504,   520,   523,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   514,   830,   nil,   nil, 11030,   nil,   nil,   nil,
   612,   nil,   nil,   nil,   616,   nil,   nil,   617,  4391,   685,
   nil,  5511,    55,   691,   693,   687,   696, 19609, 19478, 23331,
 23392,   -18,   nil,   nil,  1078,   nil, 23514, 23636, 19347,   nil,
   nil,   274,  1871,   648,   nil,   241,   nil,   nil,   nil,   723,
   nil,   nil,   nil,   628,   nil,   nil,   350,   nil,   385,   nil,
   nil,   614,   nil,   622,   nil,   nil,   nil, 22651,   nil,   630,
 19085, 18954, 18823, 23880, 23941, 18692, 18553,   528,   715, 18422,
 18291, 18160, 18029,   717,   nil,   nil, 17636, 17505,   726,   nil,
   nil,   nil,   415,   552,   360,   718,   705,   704,   831,   nil,
   814,    -8,   nil,   nil,   734,   161,   843,   nil,   726,   nil,
   776, 17243,   nil,   nil, 17112,   nil,   -99, 16981,   735,   nil,
   745,   163,   162,   800,   169,   580,   826,   786, 16850,   nil,
   855,   -16,   917, 16719,   nil,   nil,   nil,   247,    35,   810,
   922,   nil,   nil,   519, 24678,   nil, 24394,   nil, 22292,   nil,
 22384,   nil,   718,   nil,   818,   366,   822,   nil,   nil,   nil,
   nil,   539,   nil,   939,   nil,   nil,   nil,   nil,   nil,   947,
   nil,   -11,   839,    65,    67,    68,    27,  3551,  1612,   690,
   nil,   856,  3691, 10236,   nil,   983,  2991, 24517, 24509, 23035,
   nil,   nil,   nil,   nil,   nil,   nil,  2431,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   867,  9712,   871,   208,   296,   248,
   138,   nil,  2431,  6437,   nil,   879,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  6306,  6175,  6044,  5913,
   568,  5782,   nil,   118,   nil,   nil,   903,   nil,   nil,  1730,
   nil,  2571,   nil,   nil,   nil,   nil,   885,    93,   nil,   nil,
  1011,   nil,  2151,   887,   938,   nil,   nil,   nil,   nil,   nil,
   nil,   894,   942,   920,   nil,   nil,   nil,   921,   923,   nil,
   924,   926,   nil,   927,   nil,   nil,   933,   837,   932,   823,
   nil,  1058,   nil, 15409,  1063,   nil, 15278,  3971,    61,  1075,
   nil,  1076,   254,  3271,   nil,  1078,   959,   276,   nil,   969,
   964,    98,   nil,   nil, 13142, 13011,  2291,  5651,   nil,   974,
   975,   nil,   976,   979,   984,   nil,  1014,   994,   983, 12487,
   nil,   nil,   nil,   nil,  4951,   nil,   nil,    20, 12356,   nil,
  4531,  3411,   711,   nil,   nil, 24377,   nil, 12264,   nil, 14384,
   nil,  1422,   nil,   nil,   nil,   nil,   361,  1499,  1001,   nil,
    26,   nil,   nil,   329,   nil,   nil,   nil,  1126,   nil,   nil,
   nil,  1047,   nil,   nil,  1060,   nil,   nil, 24433,   nil, 24450,
   nil, 24457,   nil,   nil,  1029, 11562,   906,  1085,   nil,  2711,
   -10,    -7,   871,  1086,    36,   nil,  1031,  1141,   203,   nil,
   nil,   nil,  1020,  1021,  1023,  1024,  1025,  1037,  1028,  1285,
  5371,   nil,   nil,   nil,   nil,  5091,  1037,   nil,   nil,  1058,
  1059,  1061,  1064,   nil,  1065,   nil,  1326, 24185,   nil,  1194,
 11300, 24246, 24307,    18,   nil,   nil,   nil,  1112, 24573,   nil,
   nil,   nil,   nil,  1460,  1074,   475,  1201,   nil, 24590,   nil,
 24597,   nil, 24614,   nil, 24653,   nil,   nil,  1133,  1137,   nil,
  1097,     6,    35,    -1,    -9,   nil,  1112,  -108,   nil,   nil,
  -104,   -72,   -68,     6,    38,   nil, 24534,   nil,   nil,   nil,
   nil,    99,   nil ]

racc_action_default = [
    -3,  -607,    -1,  -593,    -4,  -607,    -7,  -607,  -607,  -607,
  -607,   -30,  -607,  -607,   -34,  -607,  -607,  -287,   -46,  -595,
  -607,   -51,   -55,   -56,   -57,   -61,  -264,  -264,  -264,  -300,
  -329,  -330,   -73,   -12,   -77,   -85,   -87,  -607,  -497,  -498,
  -607,  -607,  -607,  -607,  -223,  -607,  -595,  -237,  -278,  -279,
  -280,  -281,  -282,  -283,  -284,  -285,  -286,  -581,  -289,  -293,
  -606,  -571,  -308,  -392,  -607,  -607,   -53,   -53,  -593,  -607,
  -607,  -607,  -607,  -331,  -332,  -335,  -437,  -438,  -439,  -440,
  -461,  -443,  -444,  -463,  -465,  -448,  -453,  -457,  -459,  -475,
  -476,  -477,  -461,  -479,  -481,  -482,  -483,  -484,  -579,  -486,
  -487,  -580,  -489,  -490,  -491,  -492,  -493,  -494,  -495,  -496,
  -501,  -502,  -607,    -2,  -594,  -602,  -603,  -604,    -6,  -607,
  -607,  -607,  -607,  -607,    -8,    -3,   -18,  -607,  -116,  -117,
  -118,  -119,  -120,  -121,  -122,  -126,  -127,  -128,  -129,  -130,
  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,
  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,
  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,
  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,
  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,
  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,
  -191,  -192,  -193,  -194,  -195,  -196,   -23,  -123,   -12,  -607,
  -607,  -607,  -607,  -607,  -254,  -607,  -607,  -607,  -591,  -592,
  -607,  -607,  -595,  -596,   -50,  -607,  -497,  -498,  -607,  -287,
  -607,  -607,  -229,  -607,   -12,  -607,  -208,  -209,  -607,  -607,
  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,
  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -238,  -239,
  -240,  -241,  -607,  -401,  -403,  -607,  -589,  -590,   -62,  -254,
  -607,  -307,  -407,  -416,  -418,   -68,  -413,   -69,  -595,   -70,
  -244,  -259,  -268,  -268,  -263,  -607,  -269,  -607,  -461,  -573,
  -607,  -607,   -71,   -72,  -593,   -13,  -607,   -16,  -607,   -75,
   -12,  -595,  -607,   -78,   -81,   -12,   -93,   -94,  -607,  -607,
  -101,  -300,  -303,  -595,  -607,  -329,  -330,  -334,  -414,  -607,
   -83,  -607,   -89,  -297,  -480,  -607,  -217,  -218,  -607,  -230,
  -607,   -12,  -291,  -595,  -245,  -599,  -599,  -607,  -607,  -599,
  -607,  -309,  -310,  -529,   -52,  -607,  -607,  -607,   -12,   -12,
  -593,  -607,  -594,  -497,  -498,  -607,  -607,  -287,  -607,  -345,
  -346,  -111,  -112,  -607,  -114,  -607,  -287,  -505,  -607,  -497,
  -498,  -322,  -116,  -117,  -156,  -157,  -158,  -174,  -179,  -186,
  -189,  -324,  -607,  -569,  -607,  -441,  -607,  -607,  -607,  -607,
  -607,  -607,  -607,  -607,  1033,    -5,  -605,   -24,   -25,   -26,
   -27,   -28,  -607,  -607,   -20,   -21,   -22,  -124,  -607,   -31,
   -33,  -274,  -607,  -607,  -273,   -32,  -607,   -35,  -607,  -287,
   -43,   -45,  -197,  -249,  -269,   -47,   -48,   -36,  -198,  -249,
  -595,  -255,  -268,  -268,  -582,  -583,  -264,  -411,  -584,  -585,
  -583,  -582,  -264,  -410,  -412,  -584,  -585,  -333,  -582,  -583,
   -42,  -205,   -49,  -595,  -306,  -607,  -607,  -607,  -254,  -297,
  -607,  -607,  -607,  -206,  -207,  -210,  -211,  -212,  -213,  -214,
  -215,  -219,  -220,  -221,  -222,  -224,  -225,  -226,  -227,  -228,
  -231,  -232,  -233,  -234,  -595,  -242,  -422,  -264,   -59,   -63,
  -595,  -265,  -420,  -422,  -595,  -302,  -260,  -607,  -261,  -607,
  -266,  -607,  -270,  -607,  -576,  -578,   -11,  -594,   -15,   -17,
  -595,   -74,  -295,   -90,   -79,  -607,  -595,  -254,  -607,  -607,
  -100,  -607,  -480,  -607,   -86,   -91,  -607,  -607,  -607,  -607,
  -243,  -235,  -607,  -429,  -607,  -595,  -607,  -246,  -601,  -600,
  -248,  -601,  -298,  -299,  -572,  -393,  -529,  -396,  -568,  -568,
  -512,  -514,  -514,  -514,  -528,  -530,  -531,  -532,  -533,  -534,
  -535,  -536,  -537,  -607,  -539,  -541,  -543,  -548,  -550,  -551,
  -553,  -558,  -560,  -561,  -563,  -564,  -565,  -607,   -12,  -336,
  -337,   -12,  -607,  -607,  -607,  -607,  -607,  -607,  -254,  -607,
  -607,  -297,   -53,  -111,  -112,  -113,  -607,  -607,  -254,  -318,
  -503,  -607,   -12,  -507,  -326,  -595,  -442,  -462,  -467,  -607,
  -469,  -445,  -464,  -607,  -466,  -447,  -607,  -450,  -607,  -452,
  -455,  -607,  -456,  -607,  -478,    -9,   -19,  -607,   -29,  -277,
  -607,  -607,  -254,  -607,  -607,  -607,  -607,  -415,  -607,  -256,
  -258,  -607,  -607,   -64,  -253,  -408,  -607,  -607,   -66,  -409,
  -305,  -597,  -582,  -583,  -582,  -583,  -595,  -607,  -607,  -423,
   -58,  -404,  -420,  -251,  -607,  -381,  -607,  -301,  -268,  -267,
  -271,  -607,  -574,  -575,  -607,   -14,   -76,  -607,   -82,   -88,
  -595,  -582,  -583,  -252,  -586,   -99,  -607,   -84,  -607,  -204,
  -216,  -595,  -606,  -606,  -290,  -292,  -294,  -599,  -607,  -595,
  -607,  -510,  -511,  -607,  -607,  -521,  -607,  -524,  -607,  -526,
  -607,  -347,  -607,  -349,  -351,  -358,  -595,  -542,  -552,  -562,
  -566,  -606,  -338,  -606,   -54,  -339,  -340,  -313,  -314,  -607,
  -316,  -607,  -595,  -582,  -583,  -586,  -296,   -12,  -111,  -112,
  -115,  -595,   -12,  -607,  -320,  -607,   -12,  -529,  -529,  -607,
  -570,  -468,  -471,  -472,  -473,  -474,   -12,  -446,  -449,  -451,
  -454,  -458,  -460,  -125,  -275,  -607,  -595,  -582,  -583,  -583,
  -582,   -44,  -250,  -607,  -598,  -268,   -38,  -200,   -39,  -201,
   -65,   -40,  -203,   -41,  -202,   -67,  -607,  -607,  -607,  -607,
  -415,  -607,  -402,  -381,  -406,  -405,  -607,  -417,  -382,  -595,
  -384,   -12,  -419,  -262,  -272,  -577,   -80,  -415,   -92,  -304,
  -606,  -343,   -12,  -430,  -606,  -431,  -432,  -247,  -394,  -397,
  -399,  -386,  -607,  -568,  -549,  -567,  -513,  -514,  -514,  -540,
  -514,  -514,  -559,  -514,  -537,  -554,  -595,  -607,  -356,  -607,
  -538,  -607,  -341,  -607,  -607,  -315,  -607,   -12,  -415,  -607,
  -415,  -607,  -607,   -12,  -323,  -607,  -595,  -607,  -327,  -607,
  -276,  -415,   -37,  -199,  -257,  -607,  -236,   -12,   -60,  -568,
  -568,  -363,  -365,  -365,  -365,  -380,  -607,  -595,  -537,  -545,
  -546,  -556,  -421,   -10,   -12,  -436,  -344,  -607,  -607,  -434,
   -12,   -12,  -607,  -395,  -509,  -607,  -517,  -607,  -519,  -607,
  -522,  -607,  -525,  -527,  -348,  -350,  -354,  -607,  -359,  -311,
  -607,  -312,  -271,  -606,  -317,  -319,  -504,  -607,  -325,  -506,
  -508,  -507,  -470,  -424,  -607,  -361,  -362,  -371,  -373,  -607,
  -376,  -607,  -378,  -383,  -607,  -607,  -544,  -607,  -435,   -12,
  -497,  -498,  -607,  -607,  -287,  -433,  -607,  -607,  -595,  -388,
  -390,  -391,  -514,  -514,  -514,  -514,  -352,  -607,  -357,  -607,
   -12,  -425,  -426,  -427,  -321,   -12,  -568,  -547,  -364,  -365,
  -365,  -365,  -365,  -557,  -365,  -385,  -555,  -607,  -297,  -429,
  -254,  -607,  -607,  -297,  -398,  -400,  -387,  -607,  -607,  -515,
  -518,  -520,  -523,  -607,  -355,  -606,  -607,  -360,  -607,  -368,
  -607,  -370,  -607,  -374,  -607,  -377,  -379,  -296,  -586,  -428,
  -595,  -582,  -583,  -586,  -296,  -389,  -514,  -353,  -342,  -328,
  -365,  -365,  -365,  -365,  -415,  -516,  -607,  -366,  -369,  -372,
  -375,  -365,  -367 ]

clist = [
'221,381,264,26,281,281,281,341,26,692,317,317,586,117,134,134,498,126',
'207,334,131,131,124,26,345,346,746,330,350,301,215,265,26,26,26,669',
'26,669,266,554,114,272,276,829,430,317,317,317,547,534,489,302,299,303',
'324,578,581,348,349,6,524,637,26,841,6,414,415,26,26,595,716,26,320',
'562,801,832,873,672,117,397,398,399,400,822,131,436,442,447,664,282',
'282,282,386,973,427,268,275,277,905,490,810,450,344,344,393,387,344',
'2,658,113,949,951,279,292,293,666,388,26,332,672,335,389,26,26,26,26',
'26,118,26,421,390,844,421,537,540,487,391,544,392,421,367,371,616,618',
'612,614,617,617,751,743,827,701,702,824,967,756,224,344,344,344,344',
'428,973,662,627,328,498,724,451,337,29,403,410,6,351,29,360,669,669',
'206,661,675,401,876,6,383,338,883,908,281,29,342,358,599,382,331,535',
'333,742,29,29,29,867,29,969,1015,951,853,602,603,749,26,26,26,26,26',
'26,26,672,836,905,921,1,26,26,26,408,875,446,29,437,877,402,948,29,29',
'395,26,29,456,829,545,554,818,281,281,729,343,698,425,426,699,302,281',
'678,890,958,891,796,452,453,934,687,828,832,830,829,486,492,413,413',
'493,26,26,793,961,562,814,887,385,317,26,,,29,,,790,656,29,29,29,29',
'29,521,29,510,317,,26,503,516,740,26,117,,994,582,26,,,807,,509,536',
',,,302,299,745,962,518,302,299,,436,442,,272,282,507,522,276,26,,,1018',
'282,528,525,514,1017,829,965,409,420,680,,420,26,26,26,491,,508,420',
',874,,117,494,,848,,,583,584,,589,,26,850,759,,759,,,29,29,29,29,29',
'29,29,344,823,26,683,604,29,29,29,,,,266,861,683,,506,803,669,,29,,601',
',451,134,428,638,626,,,131,806,,732,,,,605,,,780,894,,741,,785,,633',
'281,562,,562,454,,29,29,847,672,554,554,,,,29,,,644,856,857,952,1009',
'585,649,,683,851,26,766,,855,657,29,683,,446,29,437,925,926,689,29,',
'562,562,,,,,,,870,970,,971,,,317,281,495,,817,,,,317,,29,644,436,442',
'643,,,803,,26,648,,,,,511,29,29,29,26,,776,778,,,,781,783,878,,446,',
'437,525,26,,,29,,,446,525,437,283,283,283,,,815,421,,,,29,,660,1020',
',,421,421,,281,,421,421,,,997,691,917,,281,963,336,339,,,,,26,,737,26',
'923,,,,777,779,26,725,,782,784,721,939,,723,,26,446,,437,26,795,281',
'446,947,966,744,437,870,,870,,870,,,960,,,,,562,,,29,,,,879,134,26,26',
'763,638,26,131,794,1024,,,26,26,446,731,437,26,26,,816,317,862,,,878',
',878,,638,,,317,,,,650,,,,,,,,,29,858,,821,,,996,870,,870,29,870,,870',
',421,,771,,525,,644,,,649,29,852,,663,,808,,667,,,870,638,,,,,,,,863',
'638,,,676,,,878,,,679,,,777,779,784,782,15,,26,,,15,,26,26,638,29,26',
'695,29,,413,,849,,879,29,26,879,131,879,,879,,,420,29,885,,15,29,889',
'859,,26,420,420,,821,344,420,420,,283,705,707,709,,,,,283,,,,15,,,711',
'29,29,910,26,29,,,,,1010,29,29,863,,26,29,29,,882,750,,,,,,,,,,886,879',
',879,,879,,879,,,,,,,,,26,,,,26,683,15,,,317,26,,821,879,,15,916,15',
'317,913,831,920,833,,26,,,,,,,,,,,344,,,,,,26,,,,,,26,26,,,,,,,,938',
',,16,809,29,946,420,16,317,29,29,,,29,,,,,,,,,225,29,,,986,,840,,,225',
'225,225,,16,308,308,,26,29,,,15,,15,711,,15,838,,,281,981,979,15,872',
',,,26,16,,,,26,225,225,29,15,225,355,365,365,,995,,,,29,26,,,,,,446',
',638,,,446,,437,,,,,,,,,,,,,,,,668,29,,,,29,,16,,,,29,225,225,225,225',
'16,,16,,,,15,,,29,15,,,825,,15,825,,,,,,,904,,697,29,953,,954,,955,29',
'29,896,898,,900,902,,903,15,,919,,,711,,711,,,,,,,,,,15,15,,972,13,974',
',,,13,,,,,,,,,,,,,,29,,,,16,225,418,225,225,418,225,,,,13,,418,225,225',
',,29,,,,,29,,,,16,871,,,956,711,,,,1016,13,29,,,,775,,,,1021,359,1022',
',1023,,928,930,932,,,,,,,,225,225,,,,,,,,225,,,1031,989,990,991,992',
',,,711,,711,,,,,16,,,13,16,,,,308,16,,,13,,13,,,,,,,,39,,,308,,39,,711',
',,,,,16,,,,,,,,,15,,,,,,1025,225,16,16,,39,307,307,,,999,1001,1003,1005',
'825,1006,,871,,871,,871,225,,,,,,,,,39,,,,,,,225,,,354,370,370,370,',
',13,,416,,,416,,,,,,,416,,1027,1028,1029,1030,15,,,15,,,,1032,13,,,',
',,,,,,,,,39,,871,15,871,,871,,871,39,,39,,,,,,,,,,,,,,,225,,,,871,,15',
',,,15,,,,,,15,15,,,,15,15,13,,,,13,,,,,13,,,,,,,,,,,,,,,,,16,,,,,,38',
',308,13,225,38,,,,,308,,,39,,,,,,225,13,13,,,,,,,,,,,,38,306,306,,,',
'39,,,,,,,,,,,,,,,,,,15,,38,,,15,,,16,15,,16,353,369,369,369,,,225,15',
',,,,,,,,225,,,,16,,,,15,,,,,,,,39,,,,39,,,,307,39,,,,38,,,,418,225,',
'15,16,38,,38,307,,418,418,,,15,418,418,340,39,,,,,,,,,,,,,,17,,,39,39',
'17,,,,,,,,,308,,,15,,,,,,15,,308,,,,13,,,,17,310,310,,15,,,,,,,,,,,',
',,,,,15,,,,38,17,15,15,,,,,,,,357,366,366,,,16,,,,,16,225,,,16,38,,',
',,,,,,16,,,,,,,13,,,13,,,,,,15,418,,,,17,,,,,,,,,17,13,17,,,,,15,,,411',
'424,15,,,16,,,,,,,,38,,,16,38,,,416,306,38,,13,,,,,39,416,416,,,,416',
'416,307,306,,,,,,,307,,225,38,,,16,,,,,,16,,,,,,,,38,38,,,,,16,,,,17',
'500,419,502,,419,504,505,936,,,,419,16,,,,942,,16,16,,,,,39,17,,39,',
',,,,,,,,,,,,,,,,,,,39,,13,,,,,13,,,,13,,,,976,,,,16,,13,,,,,,,,,,,,39',
',,,,416,17,16,,,17,,16,,310,17,,,,,,,,,,,,225,,,,310,,13,,,,,,,,17,307',
',13,,629,,,,,,,307,,,,,17,17,,,,,,,,38,,,,,,,,306,,,,13,,,,306,,13,',
',,,,,,,,,,,,13,,,39,,,,,39,,,,39,,,,,13,,,,945,39,13,13,,,,,,,,670,',
'340,,673,,,38,,,38,,,,,,,,,,,,,,,,,,,,,38,,,,39,,,,,13,670,,,340,,39',
',,,,,,,,,,,,,,13,,,38,,13,,,717,,,,,,,,,,,,39,,,,,17,39,,,424,,,,310',
',,,,,,39,310,,,,306,,,,,,,370,,,,306,39,,,,941,,39,39,,,,,,,,764,,,',
',,,,,670,340,,,,,,,,,,,,,,17,,,17,,,,,,38,,,370,,38,,39,804,38,,805',
',,,17,,,,38,,,755,,,,,,39,,813,,,39,,,,,,,,,,,419,,,835,17,,,,,,419',
'419,,,,419,419,,,,38,,,,,,,,,,,38,,,,,,,,,,,,,,,310,,,,,232,,,,,,310',
'860,,280,280,280,,,,38,,,,,,38,326,327,,329,,,,,,,,,,38,,,,,280,280',
',,,,,369,,,,,38,,,17,940,,38,38,17,,,,17,,,,,,,,,,17,,,,,,,,,,,,,,912',
',,419,,,,,,,,,,,,369,,,340,38,,,,,,,,,,,,17,,,,,,,,,38,,17,,,38,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,17,,,,,,,,,,,,,,17,,,,280,423,,,429',
'280,,,366,,,429,,17,,,,944,,17,17,,,,232,,,463,464,465,466,467,468,469',
'470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,,,,,485',
',,,,,,280,280,,,366,,,,17,280,,,,,,,280,,280,,,280,280,,,,,,,17,,,,',
'17,,,,,,,,,,,,,,,,,,,,,,,,,530,,531,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,,429,429,429,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,280,,280,,280,,,,,,,,,,,,,,,,280,,,,,,,,,429,690,,,,,,',
',,,,280,,,280,,,,,,,,,,,,,,,,,,,,,,,,,280,,,,,,,,,,,,,,,,,,,,,280,280',
',,,,,,,,,280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,429,280,,,,772,,,280',
'280,429,429,,,,429,429,,,,,,,,,,,,,,,,,,,,,,,,280,,,280,,,,,,,,,,,,',
',,,,,,280,,,,,,,,,,,,,,,,,280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,280,,,,,,,,429,,,,,,,,,,,,,429,429,429,429,,866,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,,,,,,,,,,,,,,',
',,,280,429,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280' ]
        racc_goto_table = arr = ::Array.new(3211, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'34,63,139,47,39,39,39,94,47,11,71,71,99,102,66,66,81,16,16,75,64,64',
'8,47,18,18,103,34,18,53,32,42,47,47,47,82,47,82,32,170,6,79,79,176,30',
'71,71,71,138,9,45,10,52,56,69,97,97,36,36,7,58,31,47,98,7,23,23,47,47',
'61,116,47,57,175,128,181,126,185,102,18,18,18,18,130,64,43,43,43,46',
'76,76,76,156,182,27,44,44,44,114,30,12,27,25,25,156,157,25,2,142,4,132',
'133,51,51,51,142,158,47,7,185,76,159,47,47,47,47,47,5,47,19,162,12,19',
'77,77,43,163,77,164,19,62,62,160,160,161,161,161,161,165,169,174,121',
'121,178,179,166,21,25,25,25,25,68,182,48,67,72,81,37,68,74,50,26,24',
'7,4,50,20,82,82,17,80,15,7,130,7,92,93,13,117,39,50,96,100,101,104,105',
'106,107,108,50,50,50,128,50,126,132,133,109,110,111,112,47,47,47,47',
'47,47,47,185,116,114,113,1,47,47,47,10,118,64,50,79,124,2,131,50,50',
'5,47,50,32,176,134,170,135,39,39,99,136,137,25,25,138,10,39,58,140,117',
'141,46,25,25,130,58,127,181,127,176,143,145,76,76,146,47,47,149,150',
'175,151,152,155,71,47,,,50,,,31,30,50,50,50,50,50,34,50,53,71,,47,156',
'53,61,47,102,,117,18,47,,,31,,8,34,,,,10,52,9,12,32,10,52,,43,43,,79',
'76,6,69,79,47,,,98,76,32,56,57,117,176,103,21,21,30,,21,47,47,47,51',
',7,21,,127,,102,51,,31,,,10,10,,32,,47,31,161,,161,,,50,50,50,50,50',
'50,50,25,120,47,43,42,50,50,50,,,,32,31,43,,4,81,82,,50,,25,,68,66,68',
'34,16,,,64,58,,30,,,,25,,,45,121,,30,,45,,32,39,175,,175,54,,50,50,97',
'185,170,170,,,,50,,,79,138,138,127,11,4,79,,43,9,47,30,,9,34,50,43,',
'64,50,79,121,121,68,50,,175,175,,,,,,,120,127,,127,,,71,39,54,,77,,',
',71,,50,79,43,43,44,,,81,,47,44,,,,,54,50,50,50,47,,27,27,,,,27,27,175',
',64,,79,56,47,,,50,,,64,56,79,78,78,78,,,23,19,,,,50,,44,127,,,19,19',
',39,,19,19,,,121,25,9,,39,99,78,78,,,,,47,,36,47,9,,,,68,68,47,102,',
'68,68,10,97,,10,,47,64,,79,47,94,39,64,9,120,102,79,120,,120,,120,,',
'97,,,,,175,,,50,,,,177,66,47,47,16,34,47,64,139,31,,,47,47,64,76,79',
'47,47,,75,71,27,,,175,,175,,34,,,71,,,,54,,,,,,,,,50,63,,34,,,9,120',
',120,50,120,,120,,19,,7,,56,,79,,,79,50,18,,54,,56,,54,,,120,34,,,,',
',,,68,34,,,54,,,175,,,54,,,68,68,68,68,28,,47,,,28,,47,47,34,50,47,54',
'50,,76,,10,,177,50,47,177,64,177,,177,,,21,50,75,,28,50,75,10,,47,21',
'21,,34,25,21,21,,78,173,173,173,,,,,78,,,,28,,,115,50,50,18,47,50,,',
',,30,50,50,68,,47,50,50,,10,54,,,,,,,,,,10,177,,177,,177,,177,,,,,,',
',,47,,,,47,43,28,,,71,47,,34,177,,28,102,28,71,10,125,102,125,,47,,',
',,,,,,,,25,,,,,,47,,,,,,47,47,,,,,,,,10,,,29,54,50,10,21,29,71,50,50',
',,50,,,,,,,,,29,50,,,34,,54,,,29,29,29,,29,29,29,,47,50,,,28,,28,115',
',28,115,,,39,32,10,28,125,,,,47,29,,,,47,29,29,50,28,29,29,29,29,,10',
',,,50,47,,,,,,64,,34,,,64,,79,,,,,,,,,,,,,,,,78,50,,,,50,,29,,,,50,29',
'29,29,29,29,,29,,,,28,,,50,28,,,122,,28,122,,,,,,,54,,78,50,125,,125',
',125,50,50,173,173,,173,173,,173,28,,54,,,115,,115,,,,,,,,,,28,28,,125',
'22,125,,,,22,,,,,,,,,,,,,,50,,,,29,29,29,29,29,29,29,,,,22,,29,29,29',
',,50,,,,,50,,,,29,122,,,115,115,,,,125,22,50,,,,78,,,,125,22,125,,125',
',123,123,123,,,,,,,,29,29,,,,,,,,29,,,125,173,173,173,173,,,,115,,115',
',,,,29,,,22,29,,,,29,29,,,22,,22,,,,,,,,60,,,29,,60,,115,,,,,,29,,,',
',,,,,28,,,,,,173,29,29,29,,60,60,60,,,123,123,123,123,122,123,,122,',
'122,,122,29,,,,,,,,,60,,,,,,,29,,,60,60,60,60,,,22,,22,,,22,,,,,,,22',
',123,123,123,123,28,,,28,,,,123,22,,,,,,,,,,,,,60,,122,28,122,,122,',
'122,60,,60,,,,,,,,,,,,,,,29,,,,122,,28,,,,28,,,,,,28,28,,,,28,28,22',
',,,22,,,,,22,,,,,,,,,,,,,,,,,29,,,,,,59,,29,22,29,59,,,,,29,,,60,,,',
',,29,22,22,,,,,,,,,,,,59,59,59,,,,60,,,,,,,,,,,,,,,,,,28,,59,,,28,,',
'29,28,,29,59,59,59,59,,,29,28,,,,,,,,,29,,,,29,,,,28,,,,,,,,60,,,,60',
',,,60,60,,,,59,,,,29,29,,28,29,59,,59,60,,29,29,,,28,29,29,73,60,,,',
',,,,,,,,,,33,,,60,60,33,,,,,,,,,29,,,28,,,,,,28,,29,,,,22,,,,33,33,33',
',28,,,,,,,,,,,,,,,,,28,,,,59,33,28,28,,,,,,,,33,33,33,,,29,,,,,29,29',
',,29,59,,,,,,,,,29,,,,,,,22,,,22,,,,,,28,29,,,,33,,,,,,,,,33,22,33,',
',,,28,,,73,73,28,,,29,,,,,,,,59,,,29,59,,,22,59,59,,22,,,,,60,22,22',
',,,22,22,60,59,,,,,,,60,,29,59,,,29,,,,,,29,,,,,,,,59,59,,,,,29,,,,33',
'73,33,73,,33,73,73,29,,,,33,29,,,,29,,29,29,,,,,60,33,,60,,,,,,,,,,',
',,,,,,,,,,60,,22,,,,,22,,,,22,,,,29,,,,29,,22,,,,,,,,,,,,60,,,,,22,33',
'29,,,33,,29,,33,33,,,,,,,,,,,,29,,,,33,,22,,,,,,,,33,60,,22,,73,,,,',
',,60,,,,,33,33,,,,,,,,59,,,,,,,,59,,,,22,,,,59,,22,,,,,,,,,,,,,,22,',
',60,,,,,60,,,,60,,,,,22,,,,22,60,22,22,,,,,,,,73,,73,,73,,,59,,,59,',
',,,,,,,,,,,,,,,,,,,59,,,,60,,,,,22,73,,,73,,60,,,,,,,,,,,,,,,22,,,59',
',22,,,73,,,,,,,,,,,,60,,,,,33,60,,,73,,,,33,,,,,,,60,33,,,,59,,,,,,',
'60,,,,59,60,,,,60,,60,60,,,,,,,,73,,,,,,,,,73,73,,,,,,,,,,,,,,33,,,33',
',,,,,59,,,60,,59,,60,73,59,,73,,,,33,,,,59,,,33,,,,,,60,,73,,,60,,,',
',,,,,,,33,,,73,33,,,,,,33,33,,,,33,33,,,,59,,,,,,,,,,,59,,,,,,,,,,,',
',,,33,,,,,35,,,,,,33,73,,35,35,35,,,,59,,,,,,59,35,35,,35,,,,,,,,,,59',
',,,,35,35,,,,,,59,,,,,59,,,33,59,,59,59,33,,,,33,,,,,,,,,,33,,,,,,,',
',,,,,,73,,,33,,,,,,,,,,,,59,,,73,59,,,,,,,,,,,,33,,,,,,,,,59,,33,,,59',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,33,,,,,,,,,,,,,,33,,,,35,35,',
',35,35,,,33,,,35,,33,,,,33,,33,33,,,,35,,,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,,,,,35,,,,,,,35,35,,,33,,,,33',
'35,,,,,,,35,,35,,,35,35,,,,,,,33,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,35,',
'35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,',
'35,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,,35,,,,,,,,,,,,,,',
',35,,,,,,,,,35,35,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,',
',,,,,,,,,,,,,,,35,35,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35',
'35,,,,35,,,35,35,35,35,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,,,,',
',,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,35,,,,,,,,35,,,,,,,,,,,,,35,35,35,35,,35,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,',
'35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3211, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   222,   107,   nil,   106,   122,    37,    59,    15,  -282,
    18,  -524,  -592,  -623,   nil,  -326,     9,   170,   -40,   -81,
   107,   136,  1090,  -144,   -37,    38,    45,  -119,   738,   905,
  -170,  -369,    14,  1568,   -19,  2230,    -9,  -415,   nil,   -25,
   nil,   nil,     7,  -130,    69,  -218,  -404,     3,  -325,   nil,
   170,    83,    19,    -4,   215,   nil,    19,    37,  -261,  1418,
  1223,  -294,    70,   -71,    12,   nil,     6,  -243,   -52,    13,
   nil,   -24,   121,  1492,   109,   -41,    60,  -202,   515,    15,
  -307,  -267,  -462,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   113,   125,   -55,   nil,   128,  -290,  -658,  -339,
   123,  -174,    10,  -577,   122,   137,  -136,   138,  -401,  -537,
  -163,  -172,  -394,  -637,  -739,   237,  -493,  -651,  -572,   nil,
  -314,  -397,   341,   292,  -568,   160,  -723,  -441,  -591,   nil,
  -616,  -659,  -782,  -781,  -102,  -455,   184,  -297,  -295,   -20,
  -564,  -563,  -378,     4,   nil,    -5,    -3,   nil,   nil,  -385,
  -638,  -416,  -536,   nil,   nil,   201,    12,    22,    32,    36,
  -247,  -243,    44,    49,    50,  -461,  -455,   nil,   nil,  -451,
  -304,   nil,   nil,   235,  -554,  -270,  -661,  -167,  -547,  -770,
   nil,  -631,  -836,   nil,   nil,  -422 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   352,   297,   nil,   nil,
   533,   nil,   842,   nil,   294,   295,   nil,   nil,   nil,    11,
    12,    18,   230,   nil,   nil,    14,   nil,   417,   231,   325,
   nil,   nil,   597,   229,   455,    21,   nil,   nil,   347,    22,
    23,    24,   nil,   686,   nil,   nil,   nil,   314,   nil,    25,
   311,   431,    32,   nil,   nil,    34,    37,    36,   nil,   226,
   227,   364,   nil,   133,   439,   132,    77,   nil,   422,    93,
    44,    47,   262,   286,   nil,   811,   432,   nil,   433,   444,
   645,   496,   284,   270,    48,    49,    50,    51,    52,    53,
    54,    55,    56,   nil,   271,    62,   nil,   nil,   nil,   nil,
   nil,   nil,   579,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   713,   561,   nil,   714,   968,   869,
   549,   nil,   550,   nil,   nil,   551,   nil,   553,   nil,   798,
   nil,   nil,   nil,   559,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   443,   nil,   nil,   665,   659,   nil,
   nil,   nil,   nil,    76,    78,    79,   nil,   nil,   nil,   nil,
   nil,   607,   nil,   nil,   nil,   nil,   nil,    89,    90,   nil,
   826,   748,   548,   nil,   552,   834,   564,   566,   567,   880,
   570,   571,   881,   574,   577,   289 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 147, :_reduce_none,
  2, 148, :_reduce_2,
  0, 149, :_reduce_3,
  1, 149, :_reduce_4,
  3, 149, :_reduce_5,
  2, 149, :_reduce_6,
  1, 151, :_reduce_none,
  2, 151, :_reduce_8,
  3, 154, :_reduce_9,
  4, 155, :_reduce_10,
  2, 156, :_reduce_11,
  0, 160, :_reduce_12,
  1, 160, :_reduce_13,
  3, 160, :_reduce_14,
  2, 160, :_reduce_15,
  1, 161, :_reduce_none,
  2, 161, :_reduce_17,
  0, 172, :_reduce_18,
  4, 153, :_reduce_19,
  3, 153, :_reduce_20,
  3, 153, :_reduce_21,
  3, 153, :_reduce_22,
  2, 153, :_reduce_23,
  3, 153, :_reduce_24,
  3, 153, :_reduce_25,
  3, 153, :_reduce_26,
  3, 153, :_reduce_27,
  3, 153, :_reduce_28,
  4, 153, :_reduce_29,
  1, 153, :_reduce_none,
  3, 153, :_reduce_31,
  3, 153, :_reduce_32,
  3, 153, :_reduce_33,
  1, 153, :_reduce_none,
  3, 165, :_reduce_35,
  3, 165, :_reduce_36,
  6, 165, :_reduce_37,
  5, 165, :_reduce_38,
  5, 165, :_reduce_39,
  5, 165, :_reduce_40,
  5, 165, :_reduce_41,
  3, 165, :_reduce_42,
  1, 173, :_reduce_none,
  3, 173, :_reduce_44,
  1, 173, :_reduce_none,
  1, 171, :_reduce_none,
  3, 171, :_reduce_47,
  3, 171, :_reduce_48,
  3, 171, :_reduce_49,
  2, 171, :_reduce_50,
  1, 171, :_reduce_none,
  1, 164, :_reduce_none,
  0, 184, :_reduce_53,
  3, 182, :_reduce_54,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 186, :_reduce_none,
  4, 186, :_reduce_58,
  0, 194, :_reduce_59,
  4, 191, :_reduce_60,
  1, 193, :_reduce_none,
  2, 185, :_reduce_62,
  3, 185, :_reduce_63,
  4, 185, :_reduce_64,
  5, 185, :_reduce_65,
  4, 185, :_reduce_66,
  5, 185, :_reduce_67,
  2, 185, :_reduce_68,
  2, 185, :_reduce_69,
  2, 185, :_reduce_70,
  2, 185, :_reduce_71,
  2, 185, :_reduce_72,
  1, 166, :_reduce_73,
  3, 166, :_reduce_74,
  1, 199, :_reduce_75,
  3, 199, :_reduce_76,
  1, 198, :_reduce_none,
  2, 198, :_reduce_78,
  3, 198, :_reduce_79,
  5, 198, :_reduce_80,
  2, 198, :_reduce_81,
  4, 198, :_reduce_82,
  2, 198, :_reduce_83,
  4, 198, :_reduce_84,
  1, 198, :_reduce_85,
  3, 198, :_reduce_86,
  1, 202, :_reduce_none,
  3, 202, :_reduce_88,
  2, 201, :_reduce_89,
  3, 201, :_reduce_90,
  1, 204, :_reduce_91,
  3, 204, :_reduce_92,
  1, 203, :_reduce_93,
  1, 203, :_reduce_94,
  4, 203, :_reduce_95,
  3, 203, :_reduce_96,
  3, 203, :_reduce_97,
  3, 203, :_reduce_98,
  3, 203, :_reduce_99,
  2, 203, :_reduce_100,
  1, 203, :_reduce_101,
  1, 168, :_reduce_102,
  1, 168, :_reduce_103,
  4, 168, :_reduce_104,
  3, 168, :_reduce_105,
  3, 168, :_reduce_106,
  3, 168, :_reduce_107,
  3, 168, :_reduce_108,
  2, 168, :_reduce_109,
  1, 168, :_reduce_110,
  1, 207, :_reduce_111,
  1, 207, :_reduce_none,
  2, 208, :_reduce_113,
  1, 208, :_reduce_114,
  3, 208, :_reduce_115,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 162, :_reduce_121,
  1, 162, :_reduce_none,
  1, 163, :_reduce_123,
  0, 213, :_reduce_124,
  4, 163, :_reduce_125,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  3, 181, :_reduce_197,
  3, 181, :_reduce_198,
  6, 181, :_reduce_199,
  5, 181, :_reduce_200,
  5, 181, :_reduce_201,
  5, 181, :_reduce_202,
  5, 181, :_reduce_203,
  4, 181, :_reduce_204,
  3, 181, :_reduce_205,
  3, 181, :_reduce_206,
  3, 181, :_reduce_207,
  2, 181, :_reduce_208,
  2, 181, :_reduce_209,
  3, 181, :_reduce_210,
  3, 181, :_reduce_211,
  3, 181, :_reduce_212,
  3, 181, :_reduce_213,
  3, 181, :_reduce_214,
  3, 181, :_reduce_215,
  4, 181, :_reduce_216,
  2, 181, :_reduce_217,
  2, 181, :_reduce_218,
  3, 181, :_reduce_219,
  3, 181, :_reduce_220,
  3, 181, :_reduce_221,
  3, 181, :_reduce_222,
  1, 181, :_reduce_none,
  3, 181, :_reduce_224,
  3, 181, :_reduce_225,
  3, 181, :_reduce_226,
  3, 181, :_reduce_227,
  3, 181, :_reduce_228,
  2, 181, :_reduce_229,
  2, 181, :_reduce_230,
  3, 181, :_reduce_231,
  3, 181, :_reduce_232,
  3, 181, :_reduce_233,
  3, 181, :_reduce_234,
  3, 181, :_reduce_235,
  6, 181, :_reduce_236,
  1, 181, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  3, 216, :_reduce_242,
  3, 216, :_reduce_243,
  1, 219, :_reduce_none,
  1, 220, :_reduce_none,
  2, 220, :_reduce_none,
  4, 220, :_reduce_247,
  2, 220, :_reduce_248,
  1, 214, :_reduce_none,
  3, 214, :_reduce_250,
  3, 225, :_reduce_251,
  0, 226, :_reduce_252,
  1, 226, :_reduce_none,
  0, 176, :_reduce_254,
  1, 176, :_reduce_none,
  2, 176, :_reduce_none,
  4, 176, :_reduce_257,
  2, 176, :_reduce_258,
  1, 197, :_reduce_259,
  2, 197, :_reduce_260,
  2, 197, :_reduce_261,
  4, 197, :_reduce_262,
  1, 197, :_reduce_263,
  0, 229, :_reduce_264,
  2, 190, :_reduce_265,
  2, 228, :_reduce_266,
  2, 227, :_reduce_267,
  0, 227, :_reduce_268,
  1, 222, :_reduce_269,
  2, 222, :_reduce_270,
  3, 222, :_reduce_271,
  4, 222, :_reduce_272,
  1, 170, :_reduce_273,
  1, 170, :_reduce_none,
  3, 169, :_reduce_275,
  4, 169, :_reduce_276,
  2, 169, :_reduce_277,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_288,
  0, 251, :_reduce_289,
  4, 217, :_reduce_290,
  0, 252, :_reduce_291,
  4, 217, :_reduce_292,
  0, 253, :_reduce_293,
  4, 217, :_reduce_294,
  3, 217, :_reduce_295,
  3, 217, :_reduce_296,
  2, 217, :_reduce_297,
  3, 217, :_reduce_298,
  3, 217, :_reduce_299,
  1, 217, :_reduce_300,
  4, 217, :_reduce_301,
  3, 217, :_reduce_302,
  1, 217, :_reduce_303,
  5, 217, :_reduce_304,
  4, 217, :_reduce_305,
  3, 217, :_reduce_306,
  2, 217, :_reduce_307,
  1, 217, :_reduce_none,
  2, 217, :_reduce_309,
  2, 217, :_reduce_310,
  6, 217, :_reduce_311,
  6, 217, :_reduce_312,
  4, 217, :_reduce_313,
  4, 217, :_reduce_314,
  5, 217, :_reduce_315,
  4, 217, :_reduce_316,
  6, 217, :_reduce_317,
  0, 254, :_reduce_318,
  6, 217, :_reduce_319,
  0, 255, :_reduce_320,
  7, 217, :_reduce_321,
  0, 256, :_reduce_322,
  5, 217, :_reduce_323,
  0, 257, :_reduce_324,
  6, 217, :_reduce_325,
  0, 258, :_reduce_326,
  0, 259, :_reduce_327,
  9, 217, :_reduce_328,
  1, 217, :_reduce_329,
  1, 217, :_reduce_330,
  1, 217, :_reduce_331,
  1, 217, :_reduce_332,
  3, 217, :_reduce_333,
  1, 175, :_reduce_none,
  1, 196, :_reduce_335,
  1, 243, :_reduce_none,
  1, 243, :_reduce_none,
  2, 243, :_reduce_338,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 244, :_reduce_none,
  5, 244, :_reduce_342,
  1, 158, :_reduce_none,
  2, 158, :_reduce_344,
  1, 246, :_reduce_none,
  1, 246, :_reduce_none,
  1, 260, :_reduce_347,
  3, 260, :_reduce_348,
  1, 263, :_reduce_349,
  3, 263, :_reduce_350,
  1, 262, :_reduce_none,
  4, 262, :_reduce_352,
  6, 262, :_reduce_353,
  3, 262, :_reduce_354,
  5, 262, :_reduce_355,
  2, 262, :_reduce_356,
  4, 262, :_reduce_357,
  1, 262, :_reduce_358,
  3, 262, :_reduce_359,
  4, 264, :_reduce_360,
  2, 264, :_reduce_361,
  2, 264, :_reduce_362,
  1, 264, :_reduce_363,
  2, 269, :_reduce_364,
  0, 269, :_reduce_365,
  6, 270, :_reduce_366,
  8, 270, :_reduce_367,
  4, 270, :_reduce_368,
  6, 270, :_reduce_369,
  4, 270, :_reduce_370,
  2, 270, :_reduce_none,
  6, 270, :_reduce_372,
  2, 270, :_reduce_373,
  4, 270, :_reduce_374,
  6, 270, :_reduce_375,
  2, 270, :_reduce_376,
  4, 270, :_reduce_377,
  2, 270, :_reduce_378,
  4, 270, :_reduce_379,
  1, 270, :_reduce_none,
  0, 274, :_reduce_381,
  1, 274, :_reduce_382,
  3, 275, :_reduce_383,
  1, 275, :_reduce_384,
  4, 275, :_reduce_385,
  1, 276, :_reduce_386,
  4, 276, :_reduce_387,
  1, 277, :_reduce_388,
  3, 277, :_reduce_389,
  1, 278, :_reduce_390,
  1, 278, :_reduce_none,
  0, 282, :_reduce_392,
  0, 283, :_reduce_393,
  4, 242, :_reduce_394,
  4, 280, :_reduce_395,
  1, 280, :_reduce_396,
  0, 286, :_reduce_397,
  4, 281, :_reduce_398,
  0, 287, :_reduce_399,
  4, 281, :_reduce_400,
  0, 289, :_reduce_401,
  4, 285, :_reduce_402,
  2, 187, :_reduce_403,
  4, 187, :_reduce_404,
  5, 187, :_reduce_405,
  5, 187, :_reduce_406,
  2, 241, :_reduce_407,
  4, 241, :_reduce_408,
  4, 241, :_reduce_409,
  3, 241, :_reduce_410,
  3, 241, :_reduce_411,
  3, 241, :_reduce_412,
  2, 241, :_reduce_413,
  1, 241, :_reduce_414,
  4, 241, :_reduce_415,
  0, 291, :_reduce_416,
  4, 240, :_reduce_417,
  0, 292, :_reduce_418,
  4, 240, :_reduce_419,
  0, 293, :_reduce_420,
  3, 192, :_reduce_421,
  0, 294, :_reduce_422,
  0, 295, :_reduce_423,
  4, 288, :_reduce_424,
  5, 245, :_reduce_425,
  1, 296, :_reduce_426,
  1, 296, :_reduce_none,
  6, 157, :_reduce_428,
  0, 157, :_reduce_429,
  1, 297, :_reduce_430,
  1, 297, :_reduce_none,
  1, 297, :_reduce_none,
  2, 298, :_reduce_433,
  1, 298, :_reduce_none,
  2, 159, :_reduce_435,
  1, 159, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 231, :_reduce_439,
  1, 300, :_reduce_440,
  2, 300, :_reduce_441,
  3, 301, :_reduce_442,
  1, 301, :_reduce_443,
  1, 301, :_reduce_444,
  3, 232, :_reduce_445,
  4, 233, :_reduce_446,
  3, 234, :_reduce_447,
  0, 305, :_reduce_448,
  3, 305, :_reduce_449,
  1, 306, :_reduce_450,
  2, 306, :_reduce_451,
  3, 236, :_reduce_452,
  0, 308, :_reduce_453,
  3, 308, :_reduce_454,
  3, 235, :_reduce_455,
  3, 237, :_reduce_456,
  0, 309, :_reduce_457,
  3, 309, :_reduce_458,
  0, 310, :_reduce_459,
  3, 310, :_reduce_460,
  0, 302, :_reduce_461,
  2, 302, :_reduce_462,
  0, 303, :_reduce_463,
  2, 303, :_reduce_464,
  0, 304, :_reduce_465,
  2, 304, :_reduce_466,
  1, 307, :_reduce_467,
  2, 307, :_reduce_468,
  0, 312, :_reduce_469,
  4, 307, :_reduce_470,
  1, 311, :_reduce_471,
  1, 311, :_reduce_472,
  1, 311, :_reduce_473,
  1, 311, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 313, :_reduce_477,
  3, 314, :_reduce_478,
  1, 299, :_reduce_479,
  2, 299, :_reduce_480,
  1, 215, :_reduce_481,
  1, 215, :_reduce_482,
  1, 215, :_reduce_483,
  1, 215, :_reduce_484,
  1, 205, :_reduce_485,
  1, 205, :_reduce_486,
  1, 205, :_reduce_487,
  1, 205, :_reduce_488,
  1, 205, :_reduce_489,
  1, 206, :_reduce_490,
  1, 206, :_reduce_491,
  1, 206, :_reduce_492,
  1, 206, :_reduce_493,
  1, 206, :_reduce_494,
  1, 206, :_reduce_495,
  1, 206, :_reduce_496,
  1, 238, :_reduce_497,
  1, 238, :_reduce_498,
  1, 174, :_reduce_499,
  1, 174, :_reduce_500,
  1, 179, :_reduce_501,
  1, 179, :_reduce_502,
  0, 315, :_reduce_503,
  4, 247, :_reduce_504,
  0, 247, :_reduce_505,
  3, 249, :_reduce_506,
  0, 317, :_reduce_507,
  3, 249, :_reduce_508,
  4, 316, :_reduce_509,
  2, 316, :_reduce_510,
  2, 316, :_reduce_511,
  1, 316, :_reduce_512,
  2, 319, :_reduce_513,
  0, 319, :_reduce_514,
  6, 284, :_reduce_515,
  8, 284, :_reduce_516,
  4, 284, :_reduce_517,
  6, 284, :_reduce_518,
  4, 284, :_reduce_519,
  6, 284, :_reduce_520,
  2, 284, :_reduce_521,
  4, 284, :_reduce_522,
  6, 284, :_reduce_523,
  2, 284, :_reduce_524,
  4, 284, :_reduce_525,
  2, 284, :_reduce_526,
  4, 284, :_reduce_527,
  1, 284, :_reduce_528,
  0, 284, :_reduce_529,
  1, 279, :_reduce_530,
  1, 279, :_reduce_531,
  1, 279, :_reduce_532,
  1, 279, :_reduce_533,
  1, 261, :_reduce_none,
  1, 261, :_reduce_535,
  1, 321, :_reduce_536,
  1, 322, :_reduce_537,
  3, 322, :_reduce_538,
  1, 271, :_reduce_539,
  3, 271, :_reduce_540,
  1, 323, :_reduce_541,
  2, 324, :_reduce_542,
  1, 324, :_reduce_543,
  2, 325, :_reduce_544,
  1, 325, :_reduce_545,
  1, 265, :_reduce_546,
  3, 265, :_reduce_547,
  1, 318, :_reduce_548,
  3, 318, :_reduce_549,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  2, 266, :_reduce_552,
  1, 266, :_reduce_553,
  3, 327, :_reduce_554,
  3, 328, :_reduce_555,
  1, 272, :_reduce_556,
  3, 272, :_reduce_557,
  1, 320, :_reduce_558,
  3, 320, :_reduce_559,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  2, 273, :_reduce_562,
  1, 273, :_reduce_563,
  1, 330, :_reduce_none,
  1, 330, :_reduce_none,
  2, 268, :_reduce_566,
  2, 267, :_reduce_567,
  0, 267, :_reduce_568,
  1, 250, :_reduce_none,
  3, 250, :_reduce_570,
  0, 239, :_reduce_571,
  2, 239, :_reduce_none,
  1, 224, :_reduce_573,
  3, 224, :_reduce_574,
  3, 331, :_reduce_575,
  2, 331, :_reduce_576,
  4, 331, :_reduce_577,
  2, 331, :_reduce_578,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 290, :_reduce_none,
  1, 290, :_reduce_none,
  1, 290, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 178, :_reduce_591,
  1, 178, :_reduce_592,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 180, :_reduce_none,
  1, 180, :_reduce_none,
  2, 200, :_reduce_597,
  2, 177, :_reduce_598,
  0, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 248, :_reduce_602,
  1, 248, :_reduce_none,
  1, 152, :_reduce_none,
  2, 152, :_reduce_none,
  0, 221, :_reduce_606 ]

racc_reduce_n = 607

racc_shift_n = 1033

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tMETHREF => 143,
  :tEQL => 144,
  :tLOWEST => 145 }

racc_nt_base = 146

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tMETHREF",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@2",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@3",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@4",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@5",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@15",
  "@16",
  "f_args",
  "do_block",
  "@17",
  "@18",
  "do_body",
  "@19",
  "operation3",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@25",
  "ssym",
  "dsym",
  "@26",
  "args_tail",
  "@27",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = val
                    
    result
end

def _reduce_10(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_12(val, _values, result)
                      result = []
                    
    result
end

def _reduce_13(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_18(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 30 omitted

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 34 omitted

def _reduce_35(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_40(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 45 omitted

# reduce 46 omitted

def _reduce_47(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_48(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_49(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_54(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

def _reduce_58(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_60(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_74(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 77 omitted

def _reduce_78(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_80(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_81(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 87 omitted

def _reduce_88(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_111(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 112 omitted

def _reduce_113(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_114(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_115(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 122 omitted

def _reduce_123(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_124(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_125(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

def _reduce_197(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_204(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 223 omitted

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

def _reduce_242(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_243(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_248(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val
                    
    result
end

def _reduce_252(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 253 omitted

def _reduce_254(val, _values, result)
                      result = []
                    
    result
end

# reduce 255 omitted

# reduce 256 omitted

def _reduce_257(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_258(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_262(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_263(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_264(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_265(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = []
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_273(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 274 omitted

def _reduce_275(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_276(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_277(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

def _reduce_288(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_289(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_290(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_291(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_293(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_302(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_304(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_305(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_307(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 308 omitted

def _reduce_309(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_310(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_311(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_312(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_313(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_314(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_316(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_318(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_319(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_320(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_322(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_323(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                    
    result
end

def _reduce_324(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:def)
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_326(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_327(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:defs)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_329(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

def _reduce_333(val, _values, result)
                      result = @builder.method_ref(val[0], val[1], val[2])
                    
    result
end

# reduce 334 omitted

def _reduce_335(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

def _reduce_338(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

def _reduce_342(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      result = val
                    
    result
end

# reduce 345 omitted

# reduce 346 omitted

def _reduce_347(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_348(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_349(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_350(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 351 omitted

def _reduce_352(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_353(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_356(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = []
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 371 omitted

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_373(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 380 omitted

def _reduce_381(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_382(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_383(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_385(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_386(val, _values, result)
                      result = []
                    
    result
end

def _reduce_387(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_388(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_390(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 391 omitted

def _reduce_392(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_393(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_394(val, _values, result)
                      @lexer.cmdarg.pop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
end

def _reduce_395(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_396(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_397(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_399(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_400(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_401(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_402(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_403(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_404(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_413(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_415(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_416(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_417(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_418(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_419(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_420(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_421(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_422(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_423(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_424(val, _values, result)
                      result = [ val[2], val[3] ]

                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_425(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 427 omitted

def _reduce_428(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_429(val, _values, result)
                      result = []
                    
    result
end

def _reduce_430(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 431 omitted

# reduce 432 omitted

def _reduce_433(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 434 omitted

def _reduce_435(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 436 omitted

# reduce 437 omitted

# reduce 438 omitted

def _reduce_439(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_440(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_442(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_443(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_444(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_445(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_446(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_447(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = []
                    
    result
end

def _reduce_449(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_451(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = []
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = []
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = []
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = []
                    
    result
end

def _reduce_462(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_463(val, _values, result)
                      result = []
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = []
                    
    result
end

def _reduce_466(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_469(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_470(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 474 omitted

# reduce 475 omitted

# reduce 476 omitted

def _reduce_477(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_480(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_481(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_483(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_503(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_504(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_506(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_507(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_508(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_509(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_510(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_514(val, _values, result)
                      result = []
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_527(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_528(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_529(val, _values, result)
                      result = []
                    
    result
end

def _reduce_530(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_531(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_532(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_533(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 534 omitted

def _reduce_535(val, _values, result)
                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_536(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_537(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_538(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_539(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_540(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_541(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_542(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_543(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_544(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_545(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_546(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_547(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_548(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_549(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 550 omitted

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_553(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_554(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_555(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_556(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_557(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_558(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_559(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 560 omitted

# reduce 561 omitted

def _reduce_562(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_563(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 564 omitted

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_567(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_568(val, _values, result)
                      result = []
                    
    result
end

# reduce 569 omitted

def _reduce_570(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_571(val, _values, result)
                      result = []
                    
    result
end

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_574(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_577(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

# reduce 587 omitted

# reduce 588 omitted

# reduce 589 omitted

# reduce 590 omitted

def _reduce_591(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_592(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 593 omitted

# reduce 594 omitted

# reduce 595 omitted

# reduce 596 omitted

def _reduce_597(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_598(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

def _reduce_602(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

def _reduce_606(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby27
  end   # module Parser
